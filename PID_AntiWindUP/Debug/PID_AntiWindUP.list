
PID_AntiWindUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009de0  08009de0  00019de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2dc  0800a2dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e4  0800a2e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001e4  0800a4d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800a4d0  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142cf  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  000344e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00036fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c164  00000000  00000000  00038f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122b9  00000000  00000000  00055094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac321  00000000  00000000  0006734d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011366e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  001136c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc8 	.word	0x08009dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009dc8 	.word	0x08009dc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <PID_Init>:
#include "PID.h"

/**
 * @brief PID init parameters
 */
void PID_Init(PID_Def_t *pidx,float Kp,float Ki,float Kd,float Ts,float Umin,float Umax){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	61f8      	str	r0, [r7, #28]
 8000ff4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ff8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ffc:	ed87 1a04 	vstr	s2, [r7, #16]
 8001000:	edc7 1a03 	vstr	s3, [r7, #12]
 8001004:	ed87 2a02 	vstr	s4, [r7, #8]
 8001008:	edc7 2a01 	vstr	s5, [r7, #4]
	memset(pidx,0,sizeof(&pidx));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2204      	movs	r2, #4
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fd42 	bl	8005a9c <memset>
	pidx->Kp = Kp;
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	601a      	str	r2, [r3, #0]
	pidx->Ki = Ki;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	605a      	str	r2, [r3, #4]
	pidx->Kd = Kd;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	609a      	str	r2, [r3, #8]
	pidx->Kaw = Ki/Kp;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001030:	ed97 7a06 	vldr	s14, [r7, #24]
 8001034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001038:	edc3 7a03 	vstr	s15, [r3, #12]
	pidx->Ts = Ts;
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	611a      	str	r2, [r3, #16]
	pidx->Umin = Umin;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
	pidx->Umax = Umax;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <PID_Compute>:

/**
 * @brief compute pid
 */
float PID_Compute(PID_Def_t *pidx, float Ref, float yk){
 8001056:	b480      	push	{r7}
 8001058:	b087      	sub	sp, #28
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001062:	edc7 0a01 	vstr	s1, [r7, #4]
	float e_1 = pidx->e;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	613b      	str	r3, [r7, #16]
	float Uk;
	pidx->e = Ref - yk;
 800106c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001070:	edd7 7a01 	vldr	s15, [r7, #4]
 8001074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	edc3 7a05 	vstr	s15, [r3, #20]
	/*parte proporcional*/
	pidx->Pk = pidx->e * pidx->Kp;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	ed93 7a05 	vldr	s14, [r3, #20]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	edc3 7a06 	vstr	s15, [r3, #24]
	/*parte integral*/
	pidx->Ik += pidx->Ts*pidx->Ki*pidx->e + pidx->Ts*pidx->Kaw*pidx->Wk;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	ed93 7a07 	vldr	s14, [r3, #28]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	edd3 6a04 	vldr	s13, [r3, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80010b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	ed93 6a04 	vldr	s12, [r3, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80010c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80010ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	edc3 7a07 	vstr	s15, [r3, #28]
	/*parte derivativa*/
	pidx->Dk = (pidx->Kd/pidx->Ts)*(pidx->e - e_1);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	edd3 6a02 	vldr	s13, [r3, #8]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80010f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	edc3 7a08 	vstr	s15, [r3, #32]
	/*salida pid*/
	pidx->Vk = pidx->Pk + pidx->Ik + pidx->Dk;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	ed93 7a06 	vldr	s14, [r3, #24]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	edd3 7a08 	vldr	s15, [r3, #32]
 800111a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*saturador*/
	if(pidx->Vk > pidx->Umax)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	dd03      	ble.n	8001142 <PID_Compute+0xec>
		Uk = pidx->Umax;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e011      	b.n	8001166 <PID_Compute+0x110>
	else if(pidx->Vk < pidx->Umin)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800114e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d503      	bpl.n	8001160 <PID_Compute+0x10a>
		Uk = pidx->Umin;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e002      	b.n	8001166 <PID_Compute+0x110>
	else
		Uk = pidx->Vk;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	617b      	str	r3, [r7, #20]
	/*error wind up*/
	pidx->Wk = Uk - pidx->Vk;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800116c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*se retorna la salida el valor calculado*/
	return Uk;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	ee07 3a90 	vmov	s15, r3
}
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_GPIO_Init+0x74>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a16      	ldr	r2, [pc, #88]	; (8001204 <MX_GPIO_Init+0x74>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_GPIO_Init+0x74>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_GPIO_Init+0x74>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <MX_GPIO_Init+0x74>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_GPIO_Init+0x74>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2142      	movs	r1, #66	; 0x42
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_GPIO_Init+0x78>)
 80011dc:	f001 f922 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80011e0:	2342      	movs	r3, #66	; 0x42
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0x78>)
 80011f8:	f000 ffa2 	bl	8002140 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fd91 	bl	8001d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f852 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f7ff ffba 	bl	8001190 <MX_GPIO_Init>
  MX_TIM2_Init();
 800121c:	f000 fb00 	bl	8001820 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001220:	f000 fb52 	bl	80018c8 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001224:	f000 fb86 	bl	8001934 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001228:	f000 fcba 	bl	8001ba0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  PID_Init(&MotorDC, KP, KI, KD, Ts, UMIN, UMAX);
 800122c:	eddf 2a16 	vldr	s5, [pc, #88]	; 8001288 <main+0x7c>
 8001230:	ed9f 2a16 	vldr	s4, [pc, #88]	; 800128c <main+0x80>
 8001234:	eddf 1a16 	vldr	s3, [pc, #88]	; 8001290 <main+0x84>
 8001238:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001294 <main+0x88>
 800123c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001298 <main+0x8c>
 8001240:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800129c <main+0x90>
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <main+0x94>)
 8001246:	f7ff fed1 	bl	8000fec <PID_Init>
  /*se establece el sentido de giro*/
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <main+0x98>)
 8001250:	f001 f8e8 	bl	8002424 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <main+0x98>)
 800125a:	f001 f8e3 	bl	8002424 <HAL_GPIO_WritePin>
  /*inicializa los timers*/
  HAL_TIM_Base_Start(&htim2);
 800125e:	4812      	ldr	r0, [pc, #72]	; (80012a8 <main+0x9c>)
 8001260:	f002 f9c0 	bl	80035e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <main+0xa0>)
 8001266:	f002 fa09 	bl	800367c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800126a:	2104      	movs	r1, #4
 800126c:	4810      	ldr	r0, [pc, #64]	; (80012b0 <main+0xa4>)
 800126e:	f002 fab1 	bl	80037d4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,0);
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <main+0xa4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_UART_Receive_IT(&huart2,&byte,1);
 800127a:	2201      	movs	r2, #1
 800127c:	490d      	ldr	r1, [pc, #52]	; (80012b4 <main+0xa8>)
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <main+0xac>)
 8001280:	f003 fc14 	bl	8004aac <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001284:	e7fe      	b.n	8001284 <main+0x78>
 8001286:	bf00      	nop
 8001288:	4101999a 	.word	0x4101999a
 800128c:	00000000 	.word	0x00000000
 8001290:	3c23d70a 	.word	0x3c23d70a
 8001294:	3736b432 	.word	0x3736b432
 8001298:	3ec75254 	.word	0x3ec75254
 800129c:	3c463f14 	.word	0x3c463f14
 80012a0:	20000274 	.word	0x20000274
 80012a4:	48000400 	.word	0x48000400
 80012a8:	200003b8 	.word	0x200003b8
 80012ac:	2000036c 	.word	0x2000036c
 80012b0:	20000320 	.word	0x20000320
 80012b4:	200002b0 	.word	0x200002b0
 80012b8:	20000404 	.word	0x20000404

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b096      	sub	sp, #88	; 0x58
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2244      	movs	r2, #68	; 0x44
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fbe6 	bl	8005a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012e2:	f001 f8df 	bl	80024a4 <HAL_PWREx_ControlVoltageScaling>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ec:	f000 f938 	bl	8001560 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012f0:	2310      	movs	r3, #16
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001304:	2301      	movs	r3, #1
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800130c:	2328      	movs	r3, #40	; 0x28
 800130e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4618      	mov	r0, r3
 800131e:	f001 f917 	bl	8002550 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001328:	f000 f91a 	bl	8001560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2303      	movs	r3, #3
 8001332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	2104      	movs	r1, #4
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fd69 	bl	8002e1c <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001350:	f000 f906 	bl	8001560 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0000      	movs	r0, r0
	...

08001360 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800136c:	4293      	cmp	r3, r2
 800136e:	f040 8085 	bne.w	800147c <HAL_TIM_PeriodElapsedCallback+0x11c>
		pulse = __HAL_TIM_GET_COUNTER(&htim2);
 8001372:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800137a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
		/****************************************************/
		rpm = pulse * 60.0 /(Ts * S);				//se calcula el RPM
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8bb 	bl	8000504 <__aeabi_ui2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001394:	f7ff f930 	bl	80005f8 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013a6:	f7ff fa51 	bl	800084c <__aeabi_ddiv>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc19 	bl	8000be8 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80013ba:	6013      	str	r3, [r2, #0]
		radS = rpm  *(2*3.141592)/60;				//velocidad en Rad/s
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	a330      	add	r3, pc, #192	; (adr r3, 8001488 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff f914 	bl	80005f8 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013de:	f7ff fa35 	bl	800084c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fbfd 	bl	8000be8 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80013f2:	6013      	str	r3, [r2, #0]
		/****************************************************************/
		U = (uint16_t)(PID_Compute(&MotorDC, ref, radS)*50.0/8.4);
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80013fc:	ed93 7a00 	vldr	s14, [r3]
 8001400:	eef0 0a47 	vmov.f32	s1, s14
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	482b      	ldr	r0, [pc, #172]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800140a:	f7ff fe24 	bl	8001056 <PID_Compute>
 800140e:	ee10 3a10 	vmov	r3, s0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f898 	bl	8000548 <__aeabi_f2d>
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800141e:	f7ff f8eb 	bl	80005f8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	a319      	add	r3, pc, #100	; (adr r3, 8001490 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff fa0c 	bl	800084c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fbb4 	bl	8000ba8 <__aeabi_d2uiz>
 8001440:	4603      	mov	r3, r0
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001446:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,U);
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800144a:	881a      	ldrh	r2, [r3, #0]
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
		sprintf((char*)bufferTx,"%.2f\r\n",radS);
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f876 	bl	8000548 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4919      	ldr	r1, [pc, #100]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001464:	f004 ff8c 	bl	8006380 <siprintf>
		HAL_UART_Transmit(&huart2, bufferTx, strlen((char*)bufferTx), 5);
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800146a:	f7fe feb1 	bl	80001d0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	2305      	movs	r3, #5
 8001474:	4915      	ldr	r1, [pc, #84]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001478:	f003 fa84 	bl	8004984 <HAL_UART_Transmit>
	}
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	fc8b007a 	.word	0xfc8b007a
 800148c:	401921fa 	.word	0x401921fa
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	4020cccc 	.word	0x4020cccc
 8001498:	2000036c 	.word	0x2000036c
 800149c:	200003b8 	.word	0x200003b8
 80014a0:	200002b4 	.word	0x200002b4
 80014a4:	404e0000 	.word	0x404e0000
 80014a8:	3ff33333 	.word	0x3ff33333
 80014ac:	200002ac 	.word	0x200002ac
 80014b0:	200002a8 	.word	0x200002a8
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000274 	.word	0x20000274
 80014bc:	40490000 	.word	0x40490000
 80014c0:	200002b8 	.word	0x200002b8
 80014c4:	20000320 	.word	0x20000320
 80014c8:	08009de0 	.word	0x08009de0
 80014cc:	200002bc 	.word	0x200002bc
 80014d0:	20000404 	.word	0x20000404

080014d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	if(byte == 'x'){
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_UART_RxCpltCallback+0x74>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b78      	cmp	r3, #120	; 0x78
 80014e2:	d11a      	bne.n	800151a <HAL_UART_RxCpltCallback+0x46>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80014e4:	2108      	movs	r1, #8
 80014e6:	4819      	ldr	r0, [pc, #100]	; (800154c <HAL_UART_RxCpltCallback+0x78>)
 80014e8:	f000 ffb4 	bl	8002454 <HAL_GPIO_TogglePin>
		ref = atof(bufferRx);
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <HAL_UART_RxCpltCallback+0x7c>)
 80014ee:	f004 faa7 	bl	8005a40 <atof>
 80014f2:	ec53 2b10 	vmov	r2, r3, d0
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fb75 	bl	8000be8 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_UART_RxCpltCallback+0x80>)
 8001502:	6013      	str	r3, [r2, #0]
		memset(bufferRx,0,i);
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_UART_RxCpltCallback+0x84>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	4810      	ldr	r0, [pc, #64]	; (8001550 <HAL_UART_RxCpltCallback+0x7c>)
 800150e:	f004 fac5 	bl	8005a9c <memset>
		i = 0;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_UART_RxCpltCallback+0x84>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e00c      	b.n	8001534 <HAL_UART_RxCpltCallback+0x60>
	}else{
		bufferRx[i] = byte;
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_UART_RxCpltCallback+0x84>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_UART_RxCpltCallback+0x74>)
 8001522:	7819      	ldrb	r1, [r3, #0]
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_UART_RxCpltCallback+0x7c>)
 8001526:	5499      	strb	r1, [r3, r2]
		i++;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_UART_RxCpltCallback+0x84>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_UART_RxCpltCallback+0x84>)
 8001532:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2,&byte,1);
 8001534:	2201      	movs	r2, #1
 8001536:	4904      	ldr	r1, [pc, #16]	; (8001548 <HAL_UART_RxCpltCallback+0x74>)
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <HAL_UART_RxCpltCallback+0x88>)
 800153a:	f003 fab7 	bl	8004aac <HAL_UART_Receive_IT>

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200002b0 	.word	0x200002b0
 800154c:	48000400 	.word	0x48000400
 8001550:	2000020c 	.word	0x2000020c
 8001554:	20000000 	.word	0x20000000
 8001558:	20000270 	.word	0x20000270
 800155c:	20000404 	.word	0x20000404

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x44>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_MspInit+0x44>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	; 0x60
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_MspInit+0x44>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_MspInit+0x44>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_MspInit+0x44>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 fbee 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART2_IRQHandler+0x10>)
 800160e:	f003 fa91 	bl	8004b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000404 	.word	0x20000404

0800161c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM6_IRQHandler+0x10>)
 8001622:	f002 f9b5 	bl	8003990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000036c 	.word	0x2000036c

08001630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_kill>:

int _kill(int pid, int sig)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800164a:	f004 f9fd 	bl	8005a48 <__errno>
 800164e:	4603      	mov	r3, r0
 8001650:	2216      	movs	r2, #22
 8001652:	601a      	str	r2, [r3, #0]
	return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_exit>:

void _exit (int status)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ffe7 	bl	8001640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001672:	e7fe      	b.n	8001672 <_exit+0x12>

08001674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001686:	f3af 8000 	nop.w
 800168a:	4601      	mov	r1, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	b2ca      	uxtb	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf0      	blt.n	8001686 <_read+0x12>
	}

return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e009      	b.n	80016d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf1      	blt.n	80016c0 <_write+0x12>
	}
	return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_close>:

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170e:	605a      	str	r2, [r3, #4]
	return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f004 f962 	bl	8005a48 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20008000 	.word	0x20008000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000200 	.word	0x20000200
 80017b8:	200004a0 	.word	0x200004a0

080017bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <SystemInit+0x5c>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <SystemInit+0x5c>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <SystemInit+0x60>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a11      	ldr	r2, [pc, #68]	; (800181c <SystemInit+0x60>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <SystemInit+0x60>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <SystemInit+0x60>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0d      	ldr	r2, [pc, #52]	; (800181c <SystemInit+0x60>)
 80017e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <SystemInit+0x60>)
 80017f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <SystemInit+0x60>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <SystemInit+0x60>)
 8001800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <SystemInit+0x60>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	40021000 	.word	0x40021000

08001820 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <MX_TIM2_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001856:	f04f 32ff 	mov.w	r2, #4294967295
 800185a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <MX_TIM2_Init+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001868:	4816      	ldr	r0, [pc, #88]	; (80018c4 <MX_TIM2_Init+0xa4>)
 800186a:	f001 fe63 	bl	8003534 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001874:	f7ff fe74 	bl	8001560 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001878:	2307      	movs	r3, #7
 800187a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800187c:	2350      	movs	r3, #80	; 0x50
 800187e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_TIM2_Init+0xa4>)
 8001890:	f002 faae 	bl	8003df0 <HAL_TIM_SlaveConfigSynchro>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800189a:	f7ff fe61 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a6:	463b      	mov	r3, r7
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_TIM2_Init+0xa4>)
 80018ac:	f002 ff20 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018b6:	f7ff fe53 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200003b8 	.word	0x200003b8

080018c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_TIM6_Init+0x64>)
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_TIM6_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_TIM6_Init+0x64>)
 80018e0:	224f      	movs	r2, #79	; 0x4f
 80018e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_TIM6_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_TIM6_Init+0x64>)
 80018ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80018f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_TIM6_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM6_Init+0x64>)
 80018fa:	f001 fe1b 	bl	8003534 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001904:	f7ff fe2c 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM6_Init+0x64>)
 8001916:	f002 feeb 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001920:	f7ff fe1e 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000036c 	.word	0x2000036c
 8001930:	40001000 	.word	0x40001000

08001934 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b096      	sub	sp, #88	; 0x58
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	222c      	movs	r2, #44	; 0x2c
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f004 f89b 	bl	8005a9c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001968:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <MX_TIM15_Init+0x104>)
 800196a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 40-1;
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <MX_TIM15_Init+0x100>)
 800196e:	2227      	movs	r2, #39	; 0x27
 8001970:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 50;
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <MX_TIM15_Init+0x100>)
 800197a:	2232      	movs	r2, #50	; 0x32
 800197c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <MX_TIM15_Init+0x100>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001990:	4828      	ldr	r0, [pc, #160]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001992:	f001 fec7 	bl	8003724 <HAL_TIM_PWM_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 800199c:	f7ff fde0 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4821      	ldr	r0, [pc, #132]	; (8001a34 <MX_TIM15_Init+0x100>)
 80019b0:	f002 fe9e 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80019ba:	f7ff fdd1 	bl	8001560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019be:	2360      	movs	r3, #96	; 0x60
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019de:	2204      	movs	r2, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_TIM15_Init+0x100>)
 80019e4:	f002 f8f4 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 80019ee:	f7ff fdb7 	bl	8001560 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001a16:	f002 fed1 	bl	80047bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM15_Init+0xf0>
  {
    Error_Handler();
 8001a20:	f7ff fd9e 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <MX_TIM15_Init+0x100>)
 8001a26:	f000 f885 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8001a2a:	bf00      	nop
 8001a2c:	3758      	adds	r7, #88	; 0x58
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000320 	.word	0x20000320
 8001a38:	40014000 	.word	0x40014000

08001a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5c:	d129      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f000 fb48 	bl	8002140 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ab0:	e018      	b.n	8001ae4 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM6)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_TIM_Base_MspInit+0xb4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d113      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2036      	movs	r0, #54	; 0x36
 8001ada:	f000 fa7c 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001ade:	2036      	movs	r0, #54	; 0x36
 8001ae0:	f000 fa95 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40001000 	.word	0x40001000

08001af4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_TIM_PWM_MspInit+0x38>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10b      	bne.n	8001b1e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6613      	str	r3, [r2, #96]	; 0x60
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40014000 	.word	0x40014000
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_TIM_MspPostInit+0x64>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d11c      	bne.n	8001b90 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_TIM_MspPostInit+0x68>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_TIM_MspPostInit+0x68>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_TIM_MspPostInit+0x68>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b6e:	2308      	movs	r3, #8
 8001b70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001b7e:	230e      	movs	r3, #14
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f000 fad8 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40014000 	.word	0x40014000
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <MX_USART2_UART_Init+0x5c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART2_UART_Init+0x58>)
 8001be4:	f002 fe80 	bl	80048e8 <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bee:	f7ff fcb7 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000404 	.word	0x20000404
 8001bfc:	40004400 	.word	0x40004400

08001c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b096      	sub	sp, #88	; 0x58
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2234      	movs	r2, #52	; 0x34
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 ff3b 	bl	8005a9c <memset>
  if(uartHandle->Instance==USART2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <HAL_UART_MspInit+0xdc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d150      	bne.n	8001cd2 <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 faf3 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c48:	f7ff fc8a 	bl	8001560 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_UART_MspInit+0xe0>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_UART_MspInit+0xe0>)
 8001c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c56:	6593      	str	r3, [r2, #88]	; 0x58
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_UART_MspInit+0xe0>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_UART_MspInit+0xe0>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_UART_MspInit+0xe0>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_UART_MspInit+0xe0>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f000 fa51 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f000 fa3f 	bl	8002140 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2026      	movs	r0, #38	; 0x26
 8001cc8:	f000 f985 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ccc:	2026      	movs	r0, #38	; 0x26
 8001cce:	f000 f99e 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3758      	adds	r7, #88	; 0x58
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce8:	f7ff fd68 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cee:	e003      	b.n	8001cf8 <LoopCopyDataInit>

08001cf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cf6:	3104      	adds	r1, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d00:	d3f6      	bcc.n	8001cf0 <CopyDataInit>
	ldr	r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d04:	e002      	b.n	8001d0c <LoopFillZerobss>

08001d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d08:	f842 3b04 	str.w	r3, [r2], #4

08001d0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <LoopForever+0x16>)
	cmp	r2, r3
 8001d0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d10:	d3f9      	bcc.n	8001d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d12:	f003 fe9f 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d16:	f7ff fa79 	bl	800120c <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d1c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001d20:	0800a2ec 	.word	0x0800a2ec
	ldr	r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d28:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001d2c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001d30:	2000049c 	.word	0x2000049c

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>

08001d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f93d 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	200f      	movs	r0, #15
 8001d48:	f000 f80e 	bl	8001d68 <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	e001      	b.n	8001d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d58:	f7ff fc08 	bl	800156c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_InitTick+0x6c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_InitTick+0x70>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_InitTick+0x6c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f949 	bl	800202a <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d809      	bhi.n	8001db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 f913 	bl	8001fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_InitTick+0x74>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e007      	b.n	8001dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e004      	b.n	8001dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e001      	b.n	8001dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	20000488 	.word	0x20000488

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000488 	.word	0x20000488

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d008      	beq.n	800206c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e022      	b.n	80020b2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 020e 	bic.w	r2, r2, #14
 800207a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f003 021c 	and.w	r2, r3, #28
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f202 	lsl.w	r2, r1, r2
 800209e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d005      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e029      	b.n	8002136 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020e 	bic.w	r2, r2, #14
 80020f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f003 021c 	and.w	r2, r3, #28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
    }
  }
  return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e14e      	b.n	80023ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8140 	beq.w	80023e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d00b      	beq.n	8002188 <HAL_GPIO_Init+0x48>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217c:	2b11      	cmp	r3, #17
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b12      	cmp	r3, #18
 8002186:	d130      	bne.n	80021ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021be:	2201      	movs	r2, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 0201 	and.w	r2, r3, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0xea>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b12      	cmp	r3, #18
 8002228:	d123      	bne.n	8002272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	6939      	ldr	r1, [r7, #16]
 800226e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0203 	and.w	r2, r3, #3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 809a 	beq.w	80023e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6613      	str	r3, [r2, #96]	; 0x60
 80022c0:	4b52      	ldr	r3, [pc, #328]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022cc:	4a50      	ldr	r2, [pc, #320]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022f6:	d013      	beq.n	8002320 <HAL_GPIO_Init+0x1e0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a46      	ldr	r2, [pc, #280]	; (8002414 <HAL_GPIO_Init+0x2d4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00d      	beq.n	800231c <HAL_GPIO_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a45      	ldr	r2, [pc, #276]	; (8002418 <HAL_GPIO_Init+0x2d8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x1d8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_GPIO_Init+0x2dc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_GPIO_Init+0x1d4>
 8002310:	2303      	movs	r3, #3
 8002312:	e006      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002314:	2307      	movs	r3, #7
 8002316:	e004      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002318:	2302      	movs	r3, #2
 800231a:	e002      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002320:	2300      	movs	r3, #0
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	f002 0203 	and.w	r2, r2, #3
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	4093      	lsls	r3, r2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002332:	4937      	ldr	r1, [pc, #220]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002364:	4a2e      	ldr	r2, [pc, #184]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800238e:	4a24      	ldr	r2, [pc, #144]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e2:	4a0f      	ldr	r2, [pc, #60]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3301      	adds	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f47f aea9 	bne.w	8002150 <HAL_GPIO_Init+0x10>
  }
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000
 8002414:	48000400 	.word	0x48000400
 8002418:	48000800 	.word	0x48000800
 800241c:	48000c00 	.word	0x48000c00
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002440:	e002      	b.n	8002448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4013      	ands	r3, r2
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	43d9      	mvns	r1, r3
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	400b      	ands	r3, r1
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40007000 	.word	0x40007000

080024a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b2:	d130      	bne.n	8002516 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c0:	d038      	beq.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ca:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2232      	movs	r2, #50	; 0x32
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0c9b      	lsrs	r3, r3, #18
 80024e4:	3301      	adds	r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e8:	e002      	b.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fc:	d102      	bne.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f2      	bne.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002510:	d110      	bne.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e00f      	b.n	8002536 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002522:	d007      	beq.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252c:	4a05      	ldr	r2, [pc, #20]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002532:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40007000 	.word	0x40007000
 8002548:	20000004 	.word	0x20000004
 800254c:	431bde83 	.word	0x431bde83

08002550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f000 bc56 	b.w	8002e10 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002564:	4ba1      	ldr	r3, [pc, #644]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800256e:	4b9f      	ldr	r3, [pc, #636]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80e6 	beq.w	8002752 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_RCC_OscConfig+0x4c>
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	f040 808d 	bne.w	80026ae <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b01      	cmp	r3, #1
 8002598:	f040 8089 	bne.w	80026ae <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259c:	4b93      	ldr	r3, [pc, #588]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_RCC_OscConfig+0x66>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f000 bc2d 	b.w	8002e10 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ba:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_RCC_OscConfig+0x80>
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ce:	e005      	b.n	80025dc <HAL_RCC_OscConfig+0x8c>
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d224      	bcs.n	800262a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fdbf 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f000 bc0d 	b.w	8002e10 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7c      	ldr	r2, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b7a      	ldr	r3, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	4977      	ldr	r1, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002614:	4b75      	ldr	r3, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	4972      	ldr	r1, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e025      	b.n	8002676 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6f      	ldr	r2, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	496a      	ldr	r1, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd7e 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e3cc      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002676:	f000 fcb3 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	495a      	ldr	r1, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x2a0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_RCC_OscConfig+0x2a4>)
 8002694:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002696:	4b58      	ldr	r3, [pc, #352]	; (80027f8 <HAL_RCC_OscConfig+0x2a8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb64 	bl	8001d68 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	e3b0      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d032      	beq.n	800271c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b6:	4b4d      	ldr	r3, [pc, #308]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c2:	f7ff fba1 	bl	8001e08 <HAL_GetTick>
 80026c6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ca:	f7ff fb9d 	bl	8001e08 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e399      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	493a      	ldr	r1, [pc, #232]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
 800271a:	e01a      	b.n	8002752 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a32      	ldr	r2, [pc, #200]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002728:	f7ff fb6e 	bl	8001e08 <HAL_GetTick>
 800272c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002730:	f7ff fb6a 	bl	8001e08 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e366      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1e0>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d073      	beq.n	8002846 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x220>
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d10e      	bne.n	8002788 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d063      	beq.n	8002844 <HAL_RCC_OscConfig+0x2f4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d15f      	bne.n	8002844 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e343      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x250>
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0x28c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x274>
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0x28c>
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a08      	ldr	r2, [pc, #32]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_RCC_OscConfig+0x29c>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7ff fb10 	bl	8001e08 <HAL_GetTick>
 80027e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ea:	e010      	b.n	800280e <HAL_RCC_OscConfig+0x2be>
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08009de8 	.word	0x08009de8
 80027f4:	20000004 	.word	0x20000004
 80027f8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7ff fb04 	bl	8001e08 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e300      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	4ba0      	ldr	r3, [pc, #640]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x2ac>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff faf4 	bl	8001e08 <HAL_GetTick>
 8002820:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff faf0 	bl	8001e08 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e2ec      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002836:	4b96      	ldr	r3, [pc, #600]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x2d4>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d060      	beq.n	8002914 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x314>
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d119      	bne.n	8002892 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d116      	bne.n	8002892 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002864:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x32c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e2c9      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4981      	ldr	r1, [pc, #516]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002890:	e040      	b.n	8002914 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289a:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7c      	ldr	r2, [pc, #496]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff faaf 	bl	8001e08 <HAL_GetTick>
 80028aa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff faab 	bl	8001e08 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e2a7      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c0:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b70      	ldr	r3, [pc, #448]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	496d      	ldr	r1, [pc, #436]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b6b      	ldr	r3, [pc, #428]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6a      	ldr	r2, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80028e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7ff fa8b 	bl	8001e08 <HAL_GetTick>
 80028f2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7ff fa87 	bl	8001e08 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e283      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d07f      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05f      	beq.n	80029e8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	429a      	cmp	r2, r3
 800293c:	d037      	beq.n	80029ae <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e25c      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	4a4a      	ldr	r2, [pc, #296]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002970:	f7ff fa4a 	bl	8001e08 <HAL_GetTick>
 8002974:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002978:	f7ff fa46 	bl	8001e08 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b11      	cmp	r3, #17
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e242      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800298c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ef      	bne.n	8002978 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 800299a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299e:	f023 0210 	bic.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7ff fa23 	bl	8001e08 <HAL_GetTick>
 80029c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c6:	f7ff fa1f 	bl	8001e08 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b11      	cmp	r3, #17
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e21b      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0ef      	beq.n	80029c6 <HAL_RCC_OscConfig+0x476>
 80029e6:	e01b      	b.n	8002a20 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff fa06 	bl	8001e08 <HAL_GetTick>
 80029fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a00:	f7ff fa02 	bl	8001e08 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b11      	cmp	r3, #17
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1fe      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ef      	bne.n	8002a00 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80c1 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10e      	bne.n	8002a5e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x540>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x544>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCC_OscConfig+0x544>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_OscConfig+0x544>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7ff f9c7 	bl	8001e08 <HAL_GetTick>
 8002a7a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	e00c      	b.n	8002a98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7ff f9c3 	bl	8001e08 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d905      	bls.n	8002a98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1bf      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a98:	4bb1      	ldr	r3, [pc, #708]	; (8002d60 <HAL_RCC_OscConfig+0x810>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ec      	beq.n	8002a7e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d02c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002ab0:	4bac      	ldr	r3, [pc, #688]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	49a8      	ldr	r1, [pc, #672]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ad6:	4ba3      	ldr	r3, [pc, #652]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	4aa1      	ldr	r2, [pc, #644]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ae6:	4b9f      	ldr	r3, [pc, #636]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	4a9d      	ldr	r2, [pc, #628]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002af8:	4b9a      	ldr	r3, [pc, #616]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a99      	ldr	r2, [pc, #612]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b08:	e00f      	b.n	8002b2a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b0a:	4b96      	ldr	r3, [pc, #600]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	4a94      	ldr	r2, [pc, #592]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b1a:	4b92      	ldr	r3, [pc, #584]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	4a90      	ldr	r2, [pc, #576]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7ff f969 	bl	8001e08 <HAL_GetTick>
 8002b36:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7ff f965 	bl	8001e08 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e15f      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b50:	4b84      	ldr	r3, [pc, #528]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ed      	beq.n	8002b3a <HAL_RCC_OscConfig+0x5ea>
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7ff f952 	bl	8001e08 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7ff f94e 	bl	8001e08 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e148      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7e:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ed      	bne.n	8002b68 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b8c:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	4a74      	ldr	r2, [pc, #464]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bc4:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bca:	4a66      	ldr	r2, [pc, #408]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7ff f918 	bl	8001e08 <HAL_GetTick>
 8002bd8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bdc:	f7ff f914 	bl	8001e08 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e110      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bee:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <HAL_RCC_OscConfig+0x68c>
 8002bfc:	e01b      	b.n	8002c36 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bfe:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c04:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7ff f8fb 	bl	8001e08 <HAL_GetTick>
 8002c12:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c16:	f7ff f8f7 	bl	8001e08 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0f3      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c28:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ef      	bne.n	8002c16 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80e7 	beq.w	8002e0e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f040 80b7 	bne.w	8002db8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c4a:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d124      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d113      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d109      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d061      	beq.n	8002d6c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d056      	beq.n	8002d5c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cba:	f7ff f8a5 	bl	8001e08 <HAL_GetTick>
 8002cbe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7ff f8a1 	bl	8001e08 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e09d      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCC_OscConfig+0x818>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cf0:	3a01      	subs	r2, #1
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cfa:	0212      	lsls	r2, r2, #8
 8002cfc:	4311      	orrs	r1, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d02:	0852      	lsrs	r2, r2, #1
 8002d04:	3a01      	subs	r2, #1
 8002d06:	0552      	lsls	r2, r2, #21
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d0e:	0852      	lsrs	r2, r2, #1
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0652      	lsls	r2, r2, #25
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4913      	ldr	r1, [pc, #76]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d34:	f7ff f868 	bl	8001e08 <HAL_GetTick>
 8002d38:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7ff f864 	bl	8001e08 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e060      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_OscConfig+0x814>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d5a:	e058      	b.n	8002e0e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e057      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
 8002d60:	40007000 	.word	0x40007000
 8002d64:	40021000 	.word	0x40021000
 8002d68:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d14a      	bne.n	8002e0e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d90:	f7ff f83a 	bl	8001e08 <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7ff f836 	bl	8001e08 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e032      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x848>
 8002db6:	e02a      	b.n	8002e0e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d025      	beq.n	8002e0a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dd0:	f023 0303 	bic.w	r3, r3, #3
 8002dd4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002ddc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002de0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7ff f811 	bl	8001e08 <HAL_GetTick>
 8002de6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7ff f80d 	bl	8001e08 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e009      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x8c8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x89a>
 8002e08:	e001      	b.n	8002e0e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0c8      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d910      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4961      	ldr	r1, [pc, #388]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b0      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d04c      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d121      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e09e      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d115      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e092      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e086      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e07e      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	493f      	ldr	r1, [pc, #252]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed6:	f7fe ff97 	bl	8001e08 <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fe ff93 	bl	8001e08 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e066      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 020c 	and.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d1eb      	bne.n	8002ede <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d210      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4924      	ldr	r1, [pc, #144]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e036      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4910      	ldr	r1, [pc, #64]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f92:	f000 f825 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fed6 	bl	8001d68 <HAL_InitTick>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08009de8 	.word	0x08009de8
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20000008 	.word	0x20000008

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x34>
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d121      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d11e      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003014:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e005      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800303c:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d102      	bne.n	800305e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	e004      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d101      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003066:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d134      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0xa6>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d003      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0xac>
 8003084:	e005      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003088:	617b      	str	r3, [r7, #20]
      break;
 800308a:	e005      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800308e:	617b      	str	r3, [r7, #20]
      break;
 8003090:	e002      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	617b      	str	r3, [r7, #20]
      break;
 8003096:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	3301      	adds	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	fb02 f203 	mul.w	r2, r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	0e5b      	lsrs	r3, r3, #25
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	3301      	adds	r3, #1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030d8:	69bb      	ldr	r3, [r7, #24]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08009e00 	.word	0x08009e00
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200

080030f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	08009df8 	.word	0x08009df8

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003140:	f7ff ffda 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0adb      	lsrs	r3, r3, #11
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	08009df8 	.word	0x08009df8

08003168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003180:	f7ff f982 	bl	8002488 <HAL_PWREx_GetVoltageRange>
 8003184:	6178      	str	r0, [r7, #20]
 8003186:	e014      	b.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	4a24      	ldr	r2, [pc, #144]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	; 0x58
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a0:	f7ff f972 	bl	8002488 <HAL_PWREx_GetVoltageRange>
 80031a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b8:	d10b      	bne.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d919      	bls.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2ba0      	cmp	r3, #160	; 0xa0
 80031c4:	d902      	bls.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c6:	2302      	movs	r3, #2
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e013      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e010      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d902      	bls.n	80031de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031d8:	2303      	movs	r3, #3
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e00a      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d102      	bne.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e4:	2302      	movs	r3, #2
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e004      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b70      	cmp	r3, #112	; 0x70
 80031ee:	d101      	bne.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f0:	2301      	movs	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 0207 	bic.w	r2, r3, #7
 80031fc:	4909      	ldr	r1, [pc, #36]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	40022000 	.word	0x40022000

08003228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003230:	2300      	movs	r3, #0
 8003232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003234:	2300      	movs	r3, #0
 8003236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 809e 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b40      	ldr	r3, [pc, #256]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003288:	f7fe fdbe 	bl	8001e08 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328e:	e009      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fe fdba 	bl	8001e08 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d902      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	74fb      	strb	r3, [r7, #19]
        break;
 80032a2:	e005      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ef      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d15a      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d019      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fe:	4a19      	ldr	r2, [pc, #100]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fd7a 	bl	8001e08 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003316:	e00b      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fe fd76 	bl	8001e08 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d902      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	74fb      	strb	r3, [r7, #19]
            break;
 800332e:	e006      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0ec      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a6d      	ldr	r2, [pc, #436]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4964      	ldr	r1, [pc, #400]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b5f      	ldr	r3, [pc, #380]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	495c      	ldr	r1, [pc, #368]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4953      	ldr	r1, [pc, #332]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f4:	4b4e      	ldr	r3, [pc, #312]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	494b      	ldr	r1, [pc, #300]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003416:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4942      	ldr	r1, [pc, #264]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	493a      	ldr	r1, [pc, #232]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345a:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4931      	ldr	r1, [pc, #196]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800347c:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4929      	ldr	r1, [pc, #164]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4920      	ldr	r1, [pc, #128]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	4918      	ldr	r1, [pc, #96]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	490a      	ldr	r1, [pc, #40]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003522:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003524:	7cbb      	ldrb	r3, [r7, #18]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e049      	b.n	80035da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fa6e 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fca6 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d001      	beq.n	80035fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e033      	b.n	8003664 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_TIM_Base_Start+0x8c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_TIM_Base_Start+0x3e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d004      	beq.n	8003622 <HAL_TIM_Base_Start+0x3e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a15      	ldr	r2, [pc, #84]	; (8003674 <HAL_TIM_Base_Start+0x90>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d115      	bne.n	800364e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_TIM_Base_Start+0x94>)
 800362a:	4013      	ands	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d015      	beq.n	8003660 <HAL_TIM_Base_Start+0x7c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d011      	beq.n	8003660 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364c:	e008      	b.n	8003660 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e000      	b.n	8003662 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003660:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40014000 	.word	0x40014000
 8003678:	00010007 	.word	0x00010007

0800367c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d001      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e03b      	b.n	800370c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_TIM_Base_Start_IT+0x9c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_TIM_Base_Start_IT+0x4e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d004      	beq.n	80036ca <HAL_TIM_Base_Start_IT+0x4e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_TIM_Base_Start_IT+0xa0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d115      	bne.n	80036f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_TIM_Base_Start_IT+0xa4>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d015      	beq.n	8003708 <HAL_TIM_Base_Start_IT+0x8c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d011      	beq.n	8003708 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	e008      	b.n	8003708 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e000      	b.n	800370a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003708:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40014000 	.word	0x40014000
 8003720:	00010007 	.word	0x00010007

08003724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e049      	b.n	80037ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe f9d2 	bl	8001af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f000 fbae 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_TIM_PWM_Start+0x24>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e03c      	b.n	8003872 <HAL_TIM_PWM_Start+0x9e>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d109      	bne.n	8003812 <HAL_TIM_PWM_Start+0x3e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e02f      	b.n	8003872 <HAL_TIM_PWM_Start+0x9e>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d109      	bne.n	800382c <HAL_TIM_PWM_Start+0x58>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e022      	b.n	8003872 <HAL_TIM_PWM_Start+0x9e>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d109      	bne.n	8003846 <HAL_TIM_PWM_Start+0x72>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e015      	b.n	8003872 <HAL_TIM_PWM_Start+0x9e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b10      	cmp	r3, #16
 800384a:	d109      	bne.n	8003860 <HAL_TIM_PWM_Start+0x8c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e008      	b.n	8003872 <HAL_TIM_PWM_Start+0x9e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07e      	b.n	8003978 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <HAL_TIM_PWM_Start+0xb6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003888:	e023      	b.n	80038d2 <HAL_TIM_PWM_Start+0xfe>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d104      	bne.n	800389a <HAL_TIM_PWM_Start+0xc6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003898:	e01b      	b.n	80038d2 <HAL_TIM_PWM_Start+0xfe>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d104      	bne.n	80038aa <HAL_TIM_PWM_Start+0xd6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a8:	e013      	b.n	80038d2 <HAL_TIM_PWM_Start+0xfe>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_PWM_Start+0xe6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b8:	e00b      	b.n	80038d2 <HAL_TIM_PWM_Start+0xfe>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0xf6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	e003      	b.n	80038d2 <HAL_TIM_PWM_Start+0xfe>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2201      	movs	r2, #1
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fee3 	bl	80046a6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <HAL_TIM_PWM_Start+0x1ac>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_TIM_PWM_Start+0x12a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_TIM_PWM_Start+0x1b0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIM_PWM_Start+0x12a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	; (8003988 <HAL_TIM_PWM_Start+0x1b4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_PWM_Start+0x12e>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_TIM_PWM_Start+0x130>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_TIM_PWM_Start+0x1ac>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_TIM_PWM_Start+0x162>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392a:	d004      	beq.n	8003936 <HAL_TIM_PWM_Start+0x162>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a14      	ldr	r2, [pc, #80]	; (8003984 <HAL_TIM_PWM_Start+0x1b0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d115      	bne.n	8003962 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_TIM_PWM_Start+0x1b8>)
 800393e:	4013      	ands	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d015      	beq.n	8003974 <HAL_TIM_PWM_Start+0x1a0>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d011      	beq.n	8003974 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	e008      	b.n	8003974 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e000      	b.n	8003976 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	00010007 	.word	0x00010007

08003990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0202 	mvn.w	r2, #2
 80039bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa58 	bl	8003e88 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa4a 	bl	8003e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fa5b 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d122      	bne.n	8003a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d11b      	bne.n	8003a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0204 	mvn.w	r2, #4
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa2e 	bl	8003e88 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa20 	bl	8003e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fa31 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d122      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d11b      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0208 	mvn.w	r2, #8
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa04 	bl	8003e88 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9f6 	bl	8003e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fa07 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0210 	mvn.w	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2208      	movs	r2, #8
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9da 	bl	8003e88 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9cc 	bl	8003e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9dd 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0201 	mvn.w	r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fc26 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d10e      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d107      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fec0 	bl	80048c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 feb3 	bl	80048d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d10e      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d107      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f98b 	bl	8003eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0220 	mvn.w	r2, #32
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fe73 	bl	80048ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0fd      	b.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b14      	cmp	r3, #20
 8003bf6:	f200 80f0 	bhi.w	8003dda <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003ddb 	.word	0x08003ddb
 8003c08:	08003ddb 	.word	0x08003ddb
 8003c0c:	08003ddb 	.word	0x08003ddb
 8003c10:	08003c95 	.word	0x08003c95
 8003c14:	08003ddb 	.word	0x08003ddb
 8003c18:	08003ddb 	.word	0x08003ddb
 8003c1c:	08003ddb 	.word	0x08003ddb
 8003c20:	08003cd7 	.word	0x08003cd7
 8003c24:	08003ddb 	.word	0x08003ddb
 8003c28:	08003ddb 	.word	0x08003ddb
 8003c2c:	08003ddb 	.word	0x08003ddb
 8003c30:	08003d17 	.word	0x08003d17
 8003c34:	08003ddb 	.word	0x08003ddb
 8003c38:	08003ddb 	.word	0x08003ddb
 8003c3c:	08003ddb 	.word	0x08003ddb
 8003c40:	08003d59 	.word	0x08003d59
 8003c44:	08003ddb 	.word	0x08003ddb
 8003c48:	08003ddb 	.word	0x08003ddb
 8003c4c:	08003ddb 	.word	0x08003ddb
 8003c50:	08003d99 	.word	0x08003d99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f996 	bl	8003f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6999      	ldr	r1, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
      break;
 8003c92:	e0a3      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f9f2 	bl	8004084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]
      break;
 8003cd4:	e082      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fa4b 	bl	8004178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0208 	orr.w	r2, r2, #8
 8003cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
      break;
 8003d14:	e062      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 faa3 	bl	8004268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	61da      	str	r2, [r3, #28]
      break;
 8003d56:	e041      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae0 	bl	8004324 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d96:	e021      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fb18 	bl	80043d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dd8:	e000      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003dda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e031      	b.n	8003e6c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fb34 	bl	8004488 <TIM_SlaveTimer_SetConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e018      	b.n	8003e6c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e48:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e58:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <TIM_Base_SetConfig+0xbc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_Base_SetConfig+0x20>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d108      	bne.n	8003ef6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <TIM_Base_SetConfig+0xbc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x52>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x52>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <TIM_Base_SetConfig+0xc0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x52>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <TIM_Base_SetConfig+0xc4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <TIM_Base_SetConfig+0xbc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_Base_SetConfig+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <TIM_Base_SetConfig+0xc0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xa0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <TIM_Base_SetConfig+0xc4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400

08003f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 0302 	bic.w	r3, r3, #2
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a24      	ldr	r2, [pc, #144]	; (8004078 <TIM_OC1_SetConfig+0xec>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_OC1_SetConfig+0x70>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a23      	ldr	r2, [pc, #140]	; (800407c <TIM_OC1_SetConfig+0xf0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC1_SetConfig+0x70>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a22      	ldr	r2, [pc, #136]	; (8004080 <TIM_OC1_SetConfig+0xf4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10c      	bne.n	8004016 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0308 	bic.w	r3, r3, #8
 8004002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <TIM_OC1_SetConfig+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_OC1_SetConfig+0xa2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <TIM_OC1_SetConfig+0xf0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC1_SetConfig+0xa2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <TIM_OC1_SetConfig+0xf4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40014000 	.word	0x40014000
 8004080:	40014400 	.word	0x40014400

08004084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0210 	bic.w	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f023 0320 	bic.w	r3, r3, #32
 80040d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <TIM_OC2_SetConfig+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10d      	bne.n	8004104 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <TIM_OC2_SetConfig+0xe8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_OC2_SetConfig+0x98>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a18      	ldr	r2, [pc, #96]	; (8004170 <TIM_OC2_SetConfig+0xec>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC2_SetConfig+0x98>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <TIM_OC2_SetConfig+0xf0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d113      	bne.n	8004144 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40014000 	.word	0x40014000
 8004174:	40014400 	.word	0x40014400

08004178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a21      	ldr	r2, [pc, #132]	; (800425c <TIM_OC3_SetConfig+0xe4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10d      	bne.n	80041f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a18      	ldr	r2, [pc, #96]	; (800425c <TIM_OC3_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d007      	beq.n	800420e <TIM_OC3_SetConfig+0x96>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a17      	ldr	r2, [pc, #92]	; (8004260 <TIM_OC3_SetConfig+0xe8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC3_SetConfig+0x96>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <TIM_OC3_SetConfig+0xec>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d113      	bne.n	8004236 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400

08004268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	031b      	lsls	r3, r3, #12
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <TIM_OC4_SetConfig+0xb0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_OC4_SetConfig+0x74>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <TIM_OC4_SetConfig+0xb4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC4_SetConfig+0x74>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a12      	ldr	r2, [pc, #72]	; (8004320 <TIM_OC4_SetConfig+0xb8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400

08004324 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004368:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <TIM_OC5_SetConfig+0xa4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <TIM_OC5_SetConfig+0x6a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a12      	ldr	r2, [pc, #72]	; (80043cc <TIM_OC5_SetConfig+0xa8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC5_SetConfig+0x6a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <TIM_OC5_SetConfig+0xac>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d109      	bne.n	80043a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400

080043d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800441a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	051b      	lsls	r3, r3, #20
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a14      	ldr	r2, [pc, #80]	; (800447c <TIM_OC6_SetConfig+0xa8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d007      	beq.n	8004440 <TIM_OC6_SetConfig+0x6c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a13      	ldr	r2, [pc, #76]	; (8004480 <TIM_OC6_SetConfig+0xac>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_OC6_SetConfig+0x6c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <TIM_OC6_SetConfig+0xb0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d109      	bne.n	8004454 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	029b      	lsls	r3, r3, #10
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40014000 	.word	0x40014000
 8004484:	40014400 	.word	0x40014400

08004488 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b70      	cmp	r3, #112	; 0x70
 80044d0:	d01a      	beq.n	8004508 <TIM_SlaveTimer_SetConfig+0x80>
 80044d2:	2b70      	cmp	r3, #112	; 0x70
 80044d4:	d860      	bhi.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
 80044d6:	2b60      	cmp	r3, #96	; 0x60
 80044d8:	d054      	beq.n	8004584 <TIM_SlaveTimer_SetConfig+0xfc>
 80044da:	2b60      	cmp	r3, #96	; 0x60
 80044dc:	d85c      	bhi.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
 80044de:	2b50      	cmp	r3, #80	; 0x50
 80044e0:	d046      	beq.n	8004570 <TIM_SlaveTimer_SetConfig+0xe8>
 80044e2:	2b50      	cmp	r3, #80	; 0x50
 80044e4:	d858      	bhi.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d019      	beq.n	800451e <TIM_SlaveTimer_SetConfig+0x96>
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d854      	bhi.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
 80044ee:	2b30      	cmp	r3, #48	; 0x30
 80044f0:	d054      	beq.n	800459c <TIM_SlaveTimer_SetConfig+0x114>
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d850      	bhi.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d050      	beq.n	800459c <TIM_SlaveTimer_SetConfig+0x114>
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d84c      	bhi.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04c      	beq.n	800459c <TIM_SlaveTimer_SetConfig+0x114>
 8004502:	2b10      	cmp	r3, #16
 8004504:	d04a      	beq.n	800459c <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004506:	e047      	b.n	8004598 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f000 f8a5 	bl	8004666 <TIM_ETR_SetConfig>
      break;
 800451c:	e03f      	b.n	800459e <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b05      	cmp	r3, #5
 8004524:	d101      	bne.n	800452a <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e03a      	b.n	80045a0 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004550:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
      break;
 800456e:	e016      	b.n	800459e <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6899      	ldr	r1, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	461a      	mov	r2, r3
 800457e:	f000 f813 	bl	80045a8 <TIM_TI1_ConfigInputStage>
      break;
 8004582:	e00c      	b.n	800459e <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 f838 	bl	8004606 <TIM_TI2_ConfigInputStage>
      break;
 8004596:	e002      	b.n	800459e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8004598:	bf00      	nop
 800459a:	e000      	b.n	800459e <TIM_SlaveTimer_SetConfig+0x116>
        break;
 800459c:	bf00      	nop
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 030a 	bic.w	r3, r3, #10
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	031b      	lsls	r3, r3, #12
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004666:	b480      	push	{r7}
 8004668:	b087      	sub	sp, #28
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004680:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	021a      	lsls	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	431a      	orrs	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4313      	orrs	r3, r2
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	609a      	str	r2, [r3, #8]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b087      	sub	sp, #28
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2201      	movs	r2, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	401a      	ands	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e04f      	b.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d004      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10c      	bne.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40014000 	.word	0x40014000

080047bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e060      	b.n	800489a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d115      	bne.n	8004888 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	051b      	lsls	r3, r3, #20
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00

080048ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e040      	b.n	800497c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fd f978 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fb26 	bl	8004f78 <UART_SetConfig>
 800492c:	4603      	mov	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e022      	b.n	800497c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fd4e 	bl	80053e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fdd5 	bl	8005524 <UART_CheckIdleState>
 800497a:	4603      	mov	r3, r0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004998:	2b20      	cmp	r3, #32
 800499a:	f040 8082 	bne.w	8004aa2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_UART_Transmit+0x26>
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07a      	b.n	8004aa4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_UART_Transmit+0x38>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e073      	b.n	8004aa4 <HAL_UART_Transmit+0x120>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2221      	movs	r2, #33	; 0x21
 80049d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d2:	f7fd fa19 	bl	8001e08 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d108      	bne.n	8004a04 <HAL_UART_Transmit+0x80>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e003      	b.n	8004a0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a14:	e02d      	b.n	8004a72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fdc8 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e039      	b.n	8004aa4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a42:	b292      	uxth	r2, r2
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e008      	b.n	8004a60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b292      	uxth	r2, r2
 8004a58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1cb      	bne.n	8004a16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2140      	movs	r1, #64	; 0x40
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fd94 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e005      	b.n	8004aa4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
  }
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d131      	bne.n	8004b26 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_UART_Receive_IT+0x22>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e02a      	b.n	8004b28 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Receive_IT+0x34>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e023      	b.n	8004b28 <HAL_UART_Receive_IT+0x7c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <HAL_UART_Receive_IT+0x84>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b14:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fdc7 	bl	80056b0 <UART_Start_Receive_IT>
 8004b22:	4603      	mov	r3, r0
 8004b24:	e000      	b.n	8004b28 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40008000 	.word	0x40008000

08004b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d113      	bne.n	8004b8c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 81ce 	beq.w	8004f1e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
      }
      return;
 8004b8a:	e1c8      	b.n	8004f1e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80e3 	beq.w	8004d5a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4ba6      	ldr	r3, [pc, #664]	; (8004e3c <HAL_UART_IRQHandler+0x308>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80d8 	beq.w	8004d5a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d010      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xa2>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_UART_IRQHandler+0xce>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <HAL_UART_IRQHandler+0xfa>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c24:	f043 0202 	orr.w	r2, r3, #2
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2208      	movs	r2, #8
 8004c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5a:	f043 0208 	orr.w	r2, r3, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <HAL_UART_IRQHandler+0x15e>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8142 	beq.w	8004f22 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d004      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d031      	beq.n	8004d46 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fd6c 	bl	80057c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d123      	bne.n	8004d3e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d013      	beq.n	8004d36 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <HAL_UART_IRQHandler+0x30c>)
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd f9cf 	bl	80020be <HAL_DMA_Abort_IT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d017      	beq.n	8004d56 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004d30:	4610      	mov	r0, r2
 8004d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	e00f      	b.n	8004d56 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f908 	bl	8004f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	e00b      	b.n	8004d56 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f904 	bl	8004f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	e007      	b.n	8004d56 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f900 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004d54:	e0e5      	b.n	8004f22 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d56:	bf00      	nop
    return;
 8004d58:	e0e3      	b.n	8004f22 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 80a9 	bne.w	8004eb6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80a3 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 809d 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d158      	bne.n	8004e44 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80c1 	beq.w	8004f26 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004daa:	893a      	ldrh	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	f080 80ba 	bcs.w	8004f26 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	893a      	ldrh	r2, [r7, #8]
 8004db6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d12a      	bne.n	8004e20 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0210 	bic.w	r2, r2, #16
 8004e14:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd f911 	bl	8002042 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f893 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e3a:	e074      	b.n	8004f26 <HAL_UART_IRQHandler+0x3f2>
 8004e3c:	04000120 	.word	0x04000120
 8004e40:	0800581f 	.word	0x0800581f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d060      	beq.n	8004f2a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e76:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0210 	bic.w	r2, r2, #16
 8004ea8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eaa:	897b      	ldrh	r3, [r7, #10]
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f856 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eb4:	e039      	b.n	8004f2a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00d      	beq.n	8004edc <HAL_UART_IRQHandler+0x3a8>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fda9 	bl	8005a2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eda:	e029      	b.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01a      	beq.n	8004f2e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
    }
    return;
 8004f00:	e015      	b.n	8004f2e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d011      	beq.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fc97 	bl	800584a <UART_EndTransmit_IT>
    return;
 8004f1c:	e008      	b.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004f1e:	bf00      	nop
 8004f20:	e006      	b.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004f22:	bf00      	nop
 8004f24:	e004      	b.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004f26:	bf00      	nop
 8004f28:	e002      	b.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004f2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b5b0      	push	{r4, r5, r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4baa      	ldr	r3, [pc, #680]	; (800524c <UART_SetConfig+0x2d4>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a9f      	ldr	r2, [pc, #636]	; (8005250 <UART_SetConfig+0x2d8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a96      	ldr	r2, [pc, #600]	; (8005254 <UART_SetConfig+0x2dc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d121      	bne.n	8005042 <UART_SetConfig+0xca>
 8004ffe:	4b96      	ldr	r3, [pc, #600]	; (8005258 <UART_SetConfig+0x2e0>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d817      	bhi.n	800503c <UART_SetConfig+0xc4>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x9c>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005025 	.word	0x08005025
 8005018:	08005031 	.word	0x08005031
 800501c:	0800502b 	.word	0x0800502b
 8005020:	08005037 	.word	0x08005037
 8005024:	2301      	movs	r3, #1
 8005026:	76fb      	strb	r3, [r7, #27]
 8005028:	e096      	b.n	8005158 <UART_SetConfig+0x1e0>
 800502a:	2302      	movs	r3, #2
 800502c:	76fb      	strb	r3, [r7, #27]
 800502e:	e093      	b.n	8005158 <UART_SetConfig+0x1e0>
 8005030:	2304      	movs	r3, #4
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e090      	b.n	8005158 <UART_SetConfig+0x1e0>
 8005036:	2308      	movs	r3, #8
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e08d      	b.n	8005158 <UART_SetConfig+0x1e0>
 800503c:	2310      	movs	r3, #16
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e08a      	b.n	8005158 <UART_SetConfig+0x1e0>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a85      	ldr	r2, [pc, #532]	; (800525c <UART_SetConfig+0x2e4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d132      	bne.n	80050b2 <UART_SetConfig+0x13a>
 800504c:	4b82      	ldr	r3, [pc, #520]	; (8005258 <UART_SetConfig+0x2e0>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d828      	bhi.n	80050ac <UART_SetConfig+0x134>
 800505a:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0xe8>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005095 	.word	0x08005095
 8005064:	080050ad 	.word	0x080050ad
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050a1 	.word	0x080050a1
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050ad 	.word	0x080050ad
 8005080:	0800509b 	.word	0x0800509b
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050a7 	.word	0x080050a7
 8005094:	2300      	movs	r3, #0
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e05e      	b.n	8005158 <UART_SetConfig+0x1e0>
 800509a:	2302      	movs	r3, #2
 800509c:	76fb      	strb	r3, [r7, #27]
 800509e:	e05b      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050a0:	2304      	movs	r3, #4
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e058      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050a6:	2308      	movs	r3, #8
 80050a8:	76fb      	strb	r3, [r7, #27]
 80050aa:	e055      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050ac:	2310      	movs	r3, #16
 80050ae:	76fb      	strb	r3, [r7, #27]
 80050b0:	e052      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6a      	ldr	r2, [pc, #424]	; (8005260 <UART_SetConfig+0x2e8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d120      	bne.n	80050fe <UART_SetConfig+0x186>
 80050bc:	4b66      	ldr	r3, [pc, #408]	; (8005258 <UART_SetConfig+0x2e0>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050c6:	2b30      	cmp	r3, #48	; 0x30
 80050c8:	d013      	beq.n	80050f2 <UART_SetConfig+0x17a>
 80050ca:	2b30      	cmp	r3, #48	; 0x30
 80050cc:	d814      	bhi.n	80050f8 <UART_SetConfig+0x180>
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d009      	beq.n	80050e6 <UART_SetConfig+0x16e>
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d810      	bhi.n	80050f8 <UART_SetConfig+0x180>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <UART_SetConfig+0x168>
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d006      	beq.n	80050ec <UART_SetConfig+0x174>
 80050de:	e00b      	b.n	80050f8 <UART_SetConfig+0x180>
 80050e0:	2300      	movs	r3, #0
 80050e2:	76fb      	strb	r3, [r7, #27]
 80050e4:	e038      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050e6:	2302      	movs	r3, #2
 80050e8:	76fb      	strb	r3, [r7, #27]
 80050ea:	e035      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050ec:	2304      	movs	r3, #4
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e032      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050f2:	2308      	movs	r3, #8
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e02f      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050f8:	2310      	movs	r3, #16
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e02c      	b.n	8005158 <UART_SetConfig+0x1e0>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a53      	ldr	r2, [pc, #332]	; (8005250 <UART_SetConfig+0x2d8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d125      	bne.n	8005154 <UART_SetConfig+0x1dc>
 8005108:	4b53      	ldr	r3, [pc, #332]	; (8005258 <UART_SetConfig+0x2e0>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005116:	d017      	beq.n	8005148 <UART_SetConfig+0x1d0>
 8005118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800511c:	d817      	bhi.n	800514e <UART_SetConfig+0x1d6>
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005122:	d00b      	beq.n	800513c <UART_SetConfig+0x1c4>
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005128:	d811      	bhi.n	800514e <UART_SetConfig+0x1d6>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <UART_SetConfig+0x1be>
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d006      	beq.n	8005142 <UART_SetConfig+0x1ca>
 8005134:	e00b      	b.n	800514e <UART_SetConfig+0x1d6>
 8005136:	2300      	movs	r3, #0
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e00d      	b.n	8005158 <UART_SetConfig+0x1e0>
 800513c:	2302      	movs	r3, #2
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	e00a      	b.n	8005158 <UART_SetConfig+0x1e0>
 8005142:	2304      	movs	r3, #4
 8005144:	76fb      	strb	r3, [r7, #27]
 8005146:	e007      	b.n	8005158 <UART_SetConfig+0x1e0>
 8005148:	2308      	movs	r3, #8
 800514a:	76fb      	strb	r3, [r7, #27]
 800514c:	e004      	b.n	8005158 <UART_SetConfig+0x1e0>
 800514e:	2310      	movs	r3, #16
 8005150:	76fb      	strb	r3, [r7, #27]
 8005152:	e001      	b.n	8005158 <UART_SetConfig+0x1e0>
 8005154:	2310      	movs	r3, #16
 8005156:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3c      	ldr	r2, [pc, #240]	; (8005250 <UART_SetConfig+0x2d8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	f040 8082 	bne.w	8005268 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005164:	7efb      	ldrb	r3, [r7, #27]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d823      	bhi.n	80051b2 <UART_SetConfig+0x23a>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0x1f8>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005195 	.word	0x08005195
 8005174:	080051b3 	.word	0x080051b3
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051b3 	.word	0x080051b3
 8005180:	080051a3 	.word	0x080051a3
 8005184:	080051b3 	.word	0x080051b3
 8005188:	080051b3 	.word	0x080051b3
 800518c:	080051b3 	.word	0x080051b3
 8005190:	080051ab 	.word	0x080051ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005194:	f7fd ffbc 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8005198:	6178      	str	r0, [r7, #20]
        break;
 800519a:	e00f      	b.n	80051bc <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800519c:	4b31      	ldr	r3, [pc, #196]	; (8005264 <UART_SetConfig+0x2ec>)
 800519e:	617b      	str	r3, [r7, #20]
        break;
 80051a0:	e00c      	b.n	80051bc <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a2:	f7fd ff1d 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 80051a6:	6178      	str	r0, [r7, #20]
        break;
 80051a8:	e008      	b.n	80051bc <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ae:	617b      	str	r3, [r7, #20]
        break;
 80051b0:	e004      	b.n	80051bc <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	76bb      	strb	r3, [r7, #26]
        break;
 80051ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8100 	beq.w	80053c4 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d305      	bcc.n	80051e0 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d902      	bls.n	80051e6 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	76bb      	strb	r3, [r7, #26]
 80051e4:	e0ee      	b.n	80053c4 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	020b      	lsls	r3, r1, #8
 80051f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051fc:	0202      	lsls	r2, r0, #8
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	6849      	ldr	r1, [r1, #4]
 8005202:	0849      	lsrs	r1, r1, #1
 8005204:	4608      	mov	r0, r1
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	1814      	adds	r4, r2, r0
 800520c:	eb43 0501 	adc.w	r5, r3, r1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	461a      	mov	r2, r3
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	4620      	mov	r0, r4
 800521c:	4629      	mov	r1, r5
 800521e:	f7fb fd33 	bl	8000c88 <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4613      	mov	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005230:	d308      	bcc.n	8005244 <UART_SetConfig+0x2cc>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005238:	d204      	bcs.n	8005244 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	e0bf      	b.n	80053c4 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	76bb      	strb	r3, [r7, #26]
 8005248:	e0bc      	b.n	80053c4 <UART_SetConfig+0x44c>
 800524a:	bf00      	nop
 800524c:	efff69f3 	.word	0xefff69f3
 8005250:	40008000 	.word	0x40008000
 8005254:	40013800 	.word	0x40013800
 8005258:	40021000 	.word	0x40021000
 800525c:	40004400 	.word	0x40004400
 8005260:	40004800 	.word	0x40004800
 8005264:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005270:	d15c      	bne.n	800532c <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8005272:	7efb      	ldrb	r3, [r7, #27]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d828      	bhi.n	80052ca <UART_SetConfig+0x352>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x308>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fd ff34 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 80052a8:	6178      	str	r0, [r7, #20]
        break;
 80052aa:	e013      	b.n	80052d4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fd ff46 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 80052b0:	6178      	str	r0, [r7, #20]
        break;
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <UART_SetConfig+0x464>)
 80052b6:	617b      	str	r3, [r7, #20]
        break;
 80052b8:	e00c      	b.n	80052d4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fd fe91 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 80052be:	6178      	str	r0, [r7, #20]
        break;
 80052c0:	e008      	b.n	80052d4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c6:	617b      	str	r3, [r7, #20]
        break;
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	76bb      	strb	r3, [r7, #26]
        break;
 80052d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d074      	beq.n	80053c4 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	005a      	lsls	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d916      	bls.n	8005326 <UART_SetConfig+0x3ae>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d212      	bcs.n	8005326 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 030f 	bic.w	r3, r3, #15
 8005308:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	b29a      	uxth	r2, r3
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	4313      	orrs	r3, r2
 800531a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	89fa      	ldrh	r2, [r7, #14]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e04e      	b.n	80053c4 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	76bb      	strb	r3, [r7, #26]
 800532a:	e04b      	b.n	80053c4 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532c:	7efb      	ldrb	r3, [r7, #27]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d827      	bhi.n	8005382 <UART_SetConfig+0x40a>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0x3c0>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005383 	.word	0x08005383
 8005348:	08005373 	.word	0x08005373
 800534c:	08005383 	.word	0x08005383
 8005350:	08005383 	.word	0x08005383
 8005354:	08005383 	.word	0x08005383
 8005358:	0800537b 	.word	0x0800537b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fd fed8 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8005360:	6178      	str	r0, [r7, #20]
        break;
 8005362:	e013      	b.n	800538c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fd feea 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8005368:	6178      	str	r0, [r7, #20]
        break;
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <UART_SetConfig+0x464>)
 800536e:	617b      	str	r3, [r7, #20]
        break;
 8005370:	e00c      	b.n	800538c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7fd fe35 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8005376:	6178      	str	r0, [r7, #20]
        break;
 8005378:	e008      	b.n	800538c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	617b      	str	r3, [r7, #20]
        break;
 8005380:	e004      	b.n	800538c <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	76bb      	strb	r3, [r7, #26]
        break;
 800538a:	bf00      	nop
    }

    if (pclk != 0U)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d018      	beq.n	80053c4 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085a      	lsrs	r2, r3, #1
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	441a      	add	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	d908      	bls.n	80053c0 <UART_SetConfig+0x448>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d204      	bcs.n	80053c0 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e001      	b.n	80053c4 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bdb0      	pop	{r4, r5, r7, pc}
 80053da:	bf00      	nop
 80053dc:	00f42400 	.word	0x00f42400

080053e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01a      	beq.n	80054f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d10a      	bne.n	80054f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
  }
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005534:	f7fc fc68 	bl	8001e08 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d10e      	bne.n	8005566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f82d 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e023      	b.n	80055ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b04      	cmp	r3, #4
 8005572:	d10e      	bne.n	8005592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f817 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e00d      	b.n	80055ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	e05e      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d05a      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d0:	f7fc fc1a 	bl	8001e08 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d302      	bcc.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11b      	bne.n	800561e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e043      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02c      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563a:	d124      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005644:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005654:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e00f      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d091      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d10e      	bne.n	8005702 <UART_Start_Receive_IT+0x52>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <UART_Start_Receive_IT+0x48>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056f6:	e02d      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	22ff      	movs	r2, #255	; 0xff
 80056fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005700:	e028      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <UART_Start_Receive_IT+0x76>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <UART_Start_Receive_IT+0x6c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	22ff      	movs	r2, #255	; 0xff
 8005716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800571a:	e01b      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	227f      	movs	r2, #127	; 0x7f
 8005720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005724:	e016      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800572e:	d10d      	bne.n	800574c <UART_Start_Receive_IT+0x9c>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <UART_Start_Receive_IT+0x92>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	227f      	movs	r2, #127	; 0x7f
 800573c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005740:	e008      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	223f      	movs	r2, #63	; 0x3f
 8005746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800574a:	e003      	b.n	8005754 <UART_Start_Receive_IT+0xa4>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2222      	movs	r2, #34	; 0x22
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d107      	bne.n	800578c <UART_Start_Receive_IT+0xdc>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <UART_Start_Receive_IT+0x108>)
 8005788:	665a      	str	r2, [r3, #100]	; 0x64
 800578a:	e002      	b.n	8005792 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <UART_Start_Receive_IT+0x10c>)
 8005790:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80057a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	08005955 	.word	0x08005955
 80057bc:	0800587d 	.word	0x0800587d

080057c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0210 	bic.w	r2, r2, #16
 80057fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff fb85 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005842:	bf00      	nop
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005860:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fb62 	bl	8004f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800588a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005890:	2b22      	cmp	r3, #34	; 0x22
 8005892:	d151      	bne.n	8005938 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800589a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800589c:	89bb      	ldrh	r3, [r7, #12]
 800589e:	b2d9      	uxtb	r1, r3
 80058a0:	89fb      	ldrh	r3, [r7, #14]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a8:	400a      	ands	r2, r1
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d13a      	bne.n	800594c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10f      	bne.n	800592a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0210 	bic.w	r2, r2, #16
 8005918:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fb1c 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
 8005928:	e002      	b.n	8005930 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fdd2 	bl	80014d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005936:	e009      	b.n	800594c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	8b1b      	ldrh	r3, [r3, #24]
 800593e:	b29a      	uxth	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	b292      	uxth	r2, r2
 800594a:	831a      	strh	r2, [r3, #24]
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005962:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005968:	2b22      	cmp	r3, #34	; 0x22
 800596a:	d151      	bne.n	8005a10 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005972:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005978:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800597a:	89ba      	ldrh	r2, [r7, #12]
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4013      	ands	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	1c9a      	adds	r2, r3, #2
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d13a      	bne.n	8005a24 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d10f      	bne.n	8005a02 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0210 	bic.w	r2, r2, #16
 80059f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fab0 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
 8005a00:	e002      	b.n	8005a08 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb fd66 	bl	80014d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a0e:	e009      	b.n	8005a24 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	8b1b      	ldrh	r3, [r3, #24]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0208 	orr.w	r2, r2, #8
 8005a20:	b292      	uxth	r2, r2
 8005a22:	831a      	strh	r2, [r3, #24]
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <atof>:
 8005a40:	2100      	movs	r1, #0
 8005a42:	f001 bae3 	b.w	800700c <strtod>
	...

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	; (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000010 	.word	0x20000010

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4d0d      	ldr	r5, [pc, #52]	; (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	; (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4d0b      	ldr	r5, [pc, #44]	; (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	; (8005a98 <__libc_init_array+0x44>)
 8005a68:	f004 f9ae 	bl	8009dc8 <_init>
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2600      	movs	r6, #0
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7c:	4798      	blx	r3
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a86:	4798      	blx	r3
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	0800a2e4 	.word	0x0800a2e4
 8005a90:	0800a2e4 	.word	0x0800a2e4
 8005a94:	0800a2e4 	.word	0x0800a2e4
 8005a98:	0800a2e8 	.word	0x0800a2e8

08005a9c <memset>:
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <__cvt>:
 8005aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	ec55 4b10 	vmov	r4, r5, d0
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	460e      	mov	r6, r1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	462b      	mov	r3, r5
 8005abc:	bfbb      	ittet	lt
 8005abe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ac2:	461d      	movlt	r5, r3
 8005ac4:	2300      	movge	r3, #0
 8005ac6:	232d      	movlt	r3, #45	; 0x2d
 8005ac8:	700b      	strb	r3, [r1, #0]
 8005aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005acc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ad0:	4691      	mov	r9, r2
 8005ad2:	f023 0820 	bic.w	r8, r3, #32
 8005ad6:	bfbc      	itt	lt
 8005ad8:	4622      	movlt	r2, r4
 8005ada:	4614      	movlt	r4, r2
 8005adc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae0:	d005      	beq.n	8005aee <__cvt+0x42>
 8005ae2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ae6:	d100      	bne.n	8005aea <__cvt+0x3e>
 8005ae8:	3601      	adds	r6, #1
 8005aea:	2102      	movs	r1, #2
 8005aec:	e000      	b.n	8005af0 <__cvt+0x44>
 8005aee:	2103      	movs	r1, #3
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	ab02      	add	r3, sp, #8
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	ec45 4b10 	vmov	d0, r4, r5
 8005afc:	4653      	mov	r3, sl
 8005afe:	4632      	mov	r2, r6
 8005b00:	f001 fb1e 	bl	8007140 <_dtoa_r>
 8005b04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b08:	4607      	mov	r7, r0
 8005b0a:	d102      	bne.n	8005b12 <__cvt+0x66>
 8005b0c:	f019 0f01 	tst.w	r9, #1
 8005b10:	d022      	beq.n	8005b58 <__cvt+0xac>
 8005b12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b16:	eb07 0906 	add.w	r9, r7, r6
 8005b1a:	d110      	bne.n	8005b3e <__cvt+0x92>
 8005b1c:	783b      	ldrb	r3, [r7, #0]
 8005b1e:	2b30      	cmp	r3, #48	; 0x30
 8005b20:	d10a      	bne.n	8005b38 <__cvt+0x8c>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b2e:	b918      	cbnz	r0, 8005b38 <__cvt+0x8c>
 8005b30:	f1c6 0601 	rsb	r6, r6, #1
 8005b34:	f8ca 6000 	str.w	r6, [sl]
 8005b38:	f8da 3000 	ldr.w	r3, [sl]
 8005b3c:	4499      	add	r9, r3
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2300      	movs	r3, #0
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7fa ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4a:	b108      	cbz	r0, 8005b50 <__cvt+0xa4>
 8005b4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b50:	2230      	movs	r2, #48	; 0x30
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	454b      	cmp	r3, r9
 8005b56:	d307      	bcc.n	8005b68 <__cvt+0xbc>
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b5c:	1bdb      	subs	r3, r3, r7
 8005b5e:	4638      	mov	r0, r7
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	b004      	add	sp, #16
 8005b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e7f0      	b.n	8005b52 <__cvt+0xa6>

08005b70 <__exponent>:
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	4603      	mov	r3, r0
 8005b74:	2900      	cmp	r1, #0
 8005b76:	bfb8      	it	lt
 8005b78:	4249      	neglt	r1, r1
 8005b7a:	f803 2b02 	strb.w	r2, [r3], #2
 8005b7e:	bfb4      	ite	lt
 8005b80:	222d      	movlt	r2, #45	; 0x2d
 8005b82:	222b      	movge	r2, #43	; 0x2b
 8005b84:	2909      	cmp	r1, #9
 8005b86:	7042      	strb	r2, [r0, #1]
 8005b88:	dd2a      	ble.n	8005be0 <__exponent+0x70>
 8005b8a:	f10d 0407 	add.w	r4, sp, #7
 8005b8e:	46a4      	mov	ip, r4
 8005b90:	270a      	movs	r7, #10
 8005b92:	46a6      	mov	lr, r4
 8005b94:	460a      	mov	r2, r1
 8005b96:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b9a:	fb07 1516 	mls	r5, r7, r6, r1
 8005b9e:	3530      	adds	r5, #48	; 0x30
 8005ba0:	2a63      	cmp	r2, #99	; 0x63
 8005ba2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ba6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005baa:	4631      	mov	r1, r6
 8005bac:	dcf1      	bgt.n	8005b92 <__exponent+0x22>
 8005bae:	3130      	adds	r1, #48	; 0x30
 8005bb0:	f1ae 0502 	sub.w	r5, lr, #2
 8005bb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bb8:	1c44      	adds	r4, r0, #1
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4561      	cmp	r1, ip
 8005bbe:	d30a      	bcc.n	8005bd6 <__exponent+0x66>
 8005bc0:	f10d 0209 	add.w	r2, sp, #9
 8005bc4:	eba2 020e 	sub.w	r2, r2, lr
 8005bc8:	4565      	cmp	r5, ip
 8005bca:	bf88      	it	hi
 8005bcc:	2200      	movhi	r2, #0
 8005bce:	4413      	add	r3, r2
 8005bd0:	1a18      	subs	r0, r3, r0
 8005bd2:	b003      	add	sp, #12
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bde:	e7ed      	b.n	8005bbc <__exponent+0x4c>
 8005be0:	2330      	movs	r3, #48	; 0x30
 8005be2:	3130      	adds	r1, #48	; 0x30
 8005be4:	7083      	strb	r3, [r0, #2]
 8005be6:	70c1      	strb	r1, [r0, #3]
 8005be8:	1d03      	adds	r3, r0, #4
 8005bea:	e7f1      	b.n	8005bd0 <__exponent+0x60>

08005bec <_printf_float>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	ed2d 8b02 	vpush	{d8}
 8005bf4:	b08d      	sub	sp, #52	; 0x34
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	461f      	mov	r7, r3
 8005c00:	4605      	mov	r5, r0
 8005c02:	f002 fbf9 	bl	80083f8 <_localeconv_r>
 8005c06:	f8d0 a000 	ldr.w	sl, [r0]
 8005c0a:	4650      	mov	r0, sl
 8005c0c:	f7fa fae0 	bl	80001d0 <strlen>
 8005c10:	2300      	movs	r3, #0
 8005c12:	930a      	str	r3, [sp, #40]	; 0x28
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c20:	3307      	adds	r3, #7
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	f103 0208 	add.w	r2, r3, #8
 8005c2a:	f8c8 2000 	str.w	r2, [r8]
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c3e:	9307      	str	r3, [sp, #28]
 8005c40:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c44:	ee08 0a10 	vmov	s16, r0
 8005c48:	4b9f      	ldr	r3, [pc, #636]	; (8005ec8 <_printf_float+0x2dc>)
 8005c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	f7fa ff6b 	bl	8000b2c <__aeabi_dcmpun>
 8005c56:	bb88      	cbnz	r0, 8005cbc <_printf_float+0xd0>
 8005c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5c:	4b9a      	ldr	r3, [pc, #616]	; (8005ec8 <_printf_float+0x2dc>)
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	f7fa ff45 	bl	8000af0 <__aeabi_dcmple>
 8005c66:	bb48      	cbnz	r0, 8005cbc <_printf_float+0xd0>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4649      	mov	r1, r9
 8005c70:	f7fa ff34 	bl	8000adc <__aeabi_dcmplt>
 8005c74:	b110      	cbz	r0, 8005c7c <_printf_float+0x90>
 8005c76:	232d      	movs	r3, #45	; 0x2d
 8005c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c7c:	4b93      	ldr	r3, [pc, #588]	; (8005ecc <_printf_float+0x2e0>)
 8005c7e:	4894      	ldr	r0, [pc, #592]	; (8005ed0 <_printf_float+0x2e4>)
 8005c80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c84:	bf94      	ite	ls
 8005c86:	4698      	movls	r8, r3
 8005c88:	4680      	movhi	r8, r0
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	9b05      	ldr	r3, [sp, #20]
 8005c90:	f023 0204 	bic.w	r2, r3, #4
 8005c94:	6022      	str	r2, [r4, #0]
 8005c96:	f04f 0900 	mov.w	r9, #0
 8005c9a:	9700      	str	r7, [sp, #0]
 8005c9c:	4633      	mov	r3, r6
 8005c9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 f9d8 	bl	8006058 <_printf_common>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f040 8090 	bne.w	8005dce <_printf_float+0x1e2>
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	b00d      	add	sp, #52	; 0x34
 8005cb4:	ecbd 8b02 	vpop	{d8}
 8005cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	f7fa ff32 	bl	8000b2c <__aeabi_dcmpun>
 8005cc8:	b140      	cbz	r0, 8005cdc <_printf_float+0xf0>
 8005cca:	464b      	mov	r3, r9
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bfbc      	itt	lt
 8005cd0:	232d      	movlt	r3, #45	; 0x2d
 8005cd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cd6:	487f      	ldr	r0, [pc, #508]	; (8005ed4 <_printf_float+0x2e8>)
 8005cd8:	4b7f      	ldr	r3, [pc, #508]	; (8005ed8 <_printf_float+0x2ec>)
 8005cda:	e7d1      	b.n	8005c80 <_printf_float+0x94>
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ce2:	9206      	str	r2, [sp, #24]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	d13f      	bne.n	8005d68 <_printf_float+0x17c>
 8005ce8:	2306      	movs	r3, #6
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	9b05      	ldr	r3, [sp, #20]
 8005cee:	6861      	ldr	r1, [r4, #4]
 8005cf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9303      	str	r3, [sp, #12]
 8005cf8:	ab0a      	add	r3, sp, #40	; 0x28
 8005cfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cfe:	ab09      	add	r3, sp, #36	; 0x24
 8005d00:	ec49 8b10 	vmov	d0, r8, r9
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6022      	str	r2, [r4, #0]
 8005d08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f7ff fecd 	bl	8005aac <__cvt>
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d16:	2b47      	cmp	r3, #71	; 0x47
 8005d18:	4680      	mov	r8, r0
 8005d1a:	d108      	bne.n	8005d2e <_printf_float+0x142>
 8005d1c:	1cc8      	adds	r0, r1, #3
 8005d1e:	db02      	blt.n	8005d26 <_printf_float+0x13a>
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	4299      	cmp	r1, r3
 8005d24:	dd41      	ble.n	8005daa <_printf_float+0x1be>
 8005d26:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d2a:	fa5f fb8b 	uxtb.w	fp, fp
 8005d2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d32:	d820      	bhi.n	8005d76 <_printf_float+0x18a>
 8005d34:	3901      	subs	r1, #1
 8005d36:	465a      	mov	r2, fp
 8005d38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8005d3e:	f7ff ff17 	bl	8005b70 <__exponent>
 8005d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d44:	1813      	adds	r3, r2, r0
 8005d46:	2a01      	cmp	r2, #1
 8005d48:	4681      	mov	r9, r0
 8005d4a:	6123      	str	r3, [r4, #16]
 8005d4c:	dc02      	bgt.n	8005d54 <_printf_float+0x168>
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	07d2      	lsls	r2, r2, #31
 8005d52:	d501      	bpl.n	8005d58 <_printf_float+0x16c>
 8005d54:	3301      	adds	r3, #1
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d09c      	beq.n	8005c9a <_printf_float+0xae>
 8005d60:	232d      	movs	r3, #45	; 0x2d
 8005d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d66:	e798      	b.n	8005c9a <_printf_float+0xae>
 8005d68:	9a06      	ldr	r2, [sp, #24]
 8005d6a:	2a47      	cmp	r2, #71	; 0x47
 8005d6c:	d1be      	bne.n	8005cec <_printf_float+0x100>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1bc      	bne.n	8005cec <_printf_float+0x100>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7b9      	b.n	8005cea <_printf_float+0xfe>
 8005d76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d7a:	d118      	bne.n	8005dae <_printf_float+0x1c2>
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	dd0b      	ble.n	8005d9a <_printf_float+0x1ae>
 8005d82:	6121      	str	r1, [r4, #16]
 8005d84:	b913      	cbnz	r3, 8005d8c <_printf_float+0x1a0>
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	07d0      	lsls	r0, r2, #31
 8005d8a:	d502      	bpl.n	8005d92 <_printf_float+0x1a6>
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	440b      	add	r3, r1
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d94:	f04f 0900 	mov.w	r9, #0
 8005d98:	e7de      	b.n	8005d58 <_printf_float+0x16c>
 8005d9a:	b913      	cbnz	r3, 8005da2 <_printf_float+0x1b6>
 8005d9c:	6822      	ldr	r2, [r4, #0]
 8005d9e:	07d2      	lsls	r2, r2, #31
 8005da0:	d501      	bpl.n	8005da6 <_printf_float+0x1ba>
 8005da2:	3302      	adds	r3, #2
 8005da4:	e7f4      	b.n	8005d90 <_printf_float+0x1a4>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e7f2      	b.n	8005d90 <_printf_float+0x1a4>
 8005daa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db0:	4299      	cmp	r1, r3
 8005db2:	db05      	blt.n	8005dc0 <_printf_float+0x1d4>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	6121      	str	r1, [r4, #16]
 8005db8:	07d8      	lsls	r0, r3, #31
 8005dba:	d5ea      	bpl.n	8005d92 <_printf_float+0x1a6>
 8005dbc:	1c4b      	adds	r3, r1, #1
 8005dbe:	e7e7      	b.n	8005d90 <_printf_float+0x1a4>
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	bfd4      	ite	le
 8005dc4:	f1c1 0202 	rsble	r2, r1, #2
 8005dc8:	2201      	movgt	r2, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	e7e0      	b.n	8005d90 <_printf_float+0x1a4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	055a      	lsls	r2, r3, #21
 8005dd2:	d407      	bmi.n	8005de4 <_printf_float+0x1f8>
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	4642      	mov	r2, r8
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	d12c      	bne.n	8005e3c <_printf_float+0x250>
 8005de2:	e764      	b.n	8005cae <_printf_float+0xc2>
 8005de4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005de8:	f240 80e0 	bls.w	8005fac <_printf_float+0x3c0>
 8005dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005df0:	2200      	movs	r2, #0
 8005df2:	2300      	movs	r3, #0
 8005df4:	f7fa fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d034      	beq.n	8005e66 <_printf_float+0x27a>
 8005dfc:	4a37      	ldr	r2, [pc, #220]	; (8005edc <_printf_float+0x2f0>)
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af51 	beq.w	8005cae <_printf_float+0xc2>
 8005e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e10:	429a      	cmp	r2, r3
 8005e12:	db02      	blt.n	8005e1a <_printf_float+0x22e>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07d8      	lsls	r0, r3, #31
 8005e18:	d510      	bpl.n	8005e3c <_printf_float+0x250>
 8005e1a:	ee18 3a10 	vmov	r3, s16
 8005e1e:	4652      	mov	r2, sl
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f af41 	beq.w	8005cae <_printf_float+0xc2>
 8005e2c:	f04f 0800 	mov.w	r8, #0
 8005e30:	f104 091a 	add.w	r9, r4, #26
 8005e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e36:	3b01      	subs	r3, #1
 8005e38:	4543      	cmp	r3, r8
 8005e3a:	dc09      	bgt.n	8005e50 <_printf_float+0x264>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	079b      	lsls	r3, r3, #30
 8005e40:	f100 8105 	bmi.w	800604e <_printf_float+0x462>
 8005e44:	68e0      	ldr	r0, [r4, #12]
 8005e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e48:	4298      	cmp	r0, r3
 8005e4a:	bfb8      	it	lt
 8005e4c:	4618      	movlt	r0, r3
 8005e4e:	e730      	b.n	8005cb2 <_printf_float+0xc6>
 8005e50:	2301      	movs	r3, #1
 8005e52:	464a      	mov	r2, r9
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af27 	beq.w	8005cae <_printf_float+0xc2>
 8005e60:	f108 0801 	add.w	r8, r8, #1
 8005e64:	e7e6      	b.n	8005e34 <_printf_float+0x248>
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dc39      	bgt.n	8005ee0 <_printf_float+0x2f4>
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <_printf_float+0x2f0>)
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	f43f af19 	beq.w	8005cae <_printf_float+0xc2>
 8005e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e80:	4313      	orrs	r3, r2
 8005e82:	d102      	bne.n	8005e8a <_printf_float+0x29e>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07d9      	lsls	r1, r3, #31
 8005e88:	d5d8      	bpl.n	8005e3c <_printf_float+0x250>
 8005e8a:	ee18 3a10 	vmov	r3, s16
 8005e8e:	4652      	mov	r2, sl
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	f43f af09 	beq.w	8005cae <_printf_float+0xc2>
 8005e9c:	f04f 0900 	mov.w	r9, #0
 8005ea0:	f104 0a1a 	add.w	sl, r4, #26
 8005ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea6:	425b      	negs	r3, r3
 8005ea8:	454b      	cmp	r3, r9
 8005eaa:	dc01      	bgt.n	8005eb0 <_printf_float+0x2c4>
 8005eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eae:	e792      	b.n	8005dd6 <_printf_float+0x1ea>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	f43f aef7 	beq.w	8005cae <_printf_float+0xc2>
 8005ec0:	f109 0901 	add.w	r9, r9, #1
 8005ec4:	e7ee      	b.n	8005ea4 <_printf_float+0x2b8>
 8005ec6:	bf00      	nop
 8005ec8:	7fefffff 	.word	0x7fefffff
 8005ecc:	08009e34 	.word	0x08009e34
 8005ed0:	08009e38 	.word	0x08009e38
 8005ed4:	08009e40 	.word	0x08009e40
 8005ed8:	08009e3c 	.word	0x08009e3c
 8005edc:	08009e44 	.word	0x08009e44
 8005ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	bfa8      	it	ge
 8005ee8:	461a      	movge	r2, r3
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	4691      	mov	r9, r2
 8005eee:	dc37      	bgt.n	8005f60 <_printf_float+0x374>
 8005ef0:	f04f 0b00 	mov.w	fp, #0
 8005ef4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef8:	f104 021a 	add.w	r2, r4, #26
 8005efc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005efe:	9305      	str	r3, [sp, #20]
 8005f00:	eba3 0309 	sub.w	r3, r3, r9
 8005f04:	455b      	cmp	r3, fp
 8005f06:	dc33      	bgt.n	8005f70 <_printf_float+0x384>
 8005f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	db3b      	blt.n	8005f88 <_printf_float+0x39c>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07da      	lsls	r2, r3, #31
 8005f14:	d438      	bmi.n	8005f88 <_printf_float+0x39c>
 8005f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	eba2 0901 	sub.w	r9, r2, r1
 8005f22:	4599      	cmp	r9, r3
 8005f24:	bfa8      	it	ge
 8005f26:	4699      	movge	r9, r3
 8005f28:	f1b9 0f00 	cmp.w	r9, #0
 8005f2c:	dc35      	bgt.n	8005f9a <_printf_float+0x3ae>
 8005f2e:	f04f 0800 	mov.w	r8, #0
 8005f32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f36:	f104 0a1a 	add.w	sl, r4, #26
 8005f3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	eba3 0309 	sub.w	r3, r3, r9
 8005f44:	4543      	cmp	r3, r8
 8005f46:	f77f af79 	ble.w	8005e3c <_printf_float+0x250>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f aeaa 	beq.w	8005cae <_printf_float+0xc2>
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	e7ec      	b.n	8005f3a <_printf_float+0x34e>
 8005f60:	4613      	mov	r3, r2
 8005f62:	4631      	mov	r1, r6
 8005f64:	4642      	mov	r2, r8
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d1c0      	bne.n	8005ef0 <_printf_float+0x304>
 8005f6e:	e69e      	b.n	8005cae <_printf_float+0xc2>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	9205      	str	r2, [sp, #20]
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f ae97 	beq.w	8005cae <_printf_float+0xc2>
 8005f80:	9a05      	ldr	r2, [sp, #20]
 8005f82:	f10b 0b01 	add.w	fp, fp, #1
 8005f86:	e7b9      	b.n	8005efc <_printf_float+0x310>
 8005f88:	ee18 3a10 	vmov	r3, s16
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	d1be      	bne.n	8005f16 <_printf_float+0x32a>
 8005f98:	e689      	b.n	8005cae <_printf_float+0xc2>
 8005f9a:	9a05      	ldr	r2, [sp, #20]
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	4442      	add	r2, r8
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d1c1      	bne.n	8005f2e <_printf_float+0x342>
 8005faa:	e680      	b.n	8005cae <_printf_float+0xc2>
 8005fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fae:	2a01      	cmp	r2, #1
 8005fb0:	dc01      	bgt.n	8005fb6 <_printf_float+0x3ca>
 8005fb2:	07db      	lsls	r3, r3, #31
 8005fb4:	d538      	bpl.n	8006028 <_printf_float+0x43c>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f43f ae74 	beq.w	8005cae <_printf_float+0xc2>
 8005fc6:	ee18 3a10 	vmov	r3, s16
 8005fca:	4652      	mov	r2, sl
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	f43f ae6b 	beq.w	8005cae <_printf_float+0xc2>
 8005fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f7fa fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe4:	b9d8      	cbnz	r0, 800601e <_printf_float+0x432>
 8005fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe8:	f108 0201 	add.w	r2, r8, #1
 8005fec:	3b01      	subs	r3, #1
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d10e      	bne.n	8006016 <_printf_float+0x42a>
 8005ff8:	e659      	b.n	8005cae <_printf_float+0xc2>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4652      	mov	r2, sl
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae52 	beq.w	8005cae <_printf_float+0xc2>
 800600a:	f108 0801 	add.w	r8, r8, #1
 800600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	4543      	cmp	r3, r8
 8006014:	dcf1      	bgt.n	8005ffa <_printf_float+0x40e>
 8006016:	464b      	mov	r3, r9
 8006018:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800601c:	e6dc      	b.n	8005dd8 <_printf_float+0x1ec>
 800601e:	f04f 0800 	mov.w	r8, #0
 8006022:	f104 0a1a 	add.w	sl, r4, #26
 8006026:	e7f2      	b.n	800600e <_printf_float+0x422>
 8006028:	2301      	movs	r3, #1
 800602a:	4642      	mov	r2, r8
 800602c:	e7df      	b.n	8005fee <_printf_float+0x402>
 800602e:	2301      	movs	r3, #1
 8006030:	464a      	mov	r2, r9
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae38 	beq.w	8005cae <_printf_float+0xc2>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	4543      	cmp	r3, r8
 800604a:	dcf0      	bgt.n	800602e <_printf_float+0x442>
 800604c:	e6fa      	b.n	8005e44 <_printf_float+0x258>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	f104 0919 	add.w	r9, r4, #25
 8006056:	e7f4      	b.n	8006042 <_printf_float+0x456>

08006058 <_printf_common>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4616      	mov	r6, r2
 800605e:	4699      	mov	r9, r3
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	4293      	cmp	r3, r2
 800606a:	bfb8      	it	lt
 800606c:	4613      	movlt	r3, r2
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006074:	4607      	mov	r7, r0
 8006076:	460c      	mov	r4, r1
 8006078:	b10a      	cbz	r2, 800607e <_printf_common+0x26>
 800607a:	3301      	adds	r3, #1
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	0699      	lsls	r1, r3, #26
 8006082:	bf42      	ittt	mi
 8006084:	6833      	ldrmi	r3, [r6, #0]
 8006086:	3302      	addmi	r3, #2
 8006088:	6033      	strmi	r3, [r6, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	f015 0506 	ands.w	r5, r5, #6
 8006090:	d106      	bne.n	80060a0 <_printf_common+0x48>
 8006092:	f104 0a19 	add.w	sl, r4, #25
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	6832      	ldr	r2, [r6, #0]
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	42ab      	cmp	r3, r5
 800609e:	dc26      	bgt.n	80060ee <_printf_common+0x96>
 80060a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a4:	1e13      	subs	r3, r2, #0
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	0692      	lsls	r2, r2, #26
 80060ae:	d42b      	bmi.n	8006108 <_printf_common+0xb0>
 80060b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d01e      	beq.n	80060fc <_printf_common+0xa4>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	68e5      	ldr	r5, [r4, #12]
 80060c2:	6832      	ldr	r2, [r6, #0]
 80060c4:	f003 0306 	and.w	r3, r3, #6
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	bf08      	it	eq
 80060cc:	1aad      	subeq	r5, r5, r2
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	bf0c      	ite	eq
 80060d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d8:	2500      	movne	r5, #0
 80060da:	4293      	cmp	r3, r2
 80060dc:	bfc4      	itt	gt
 80060de:	1a9b      	subgt	r3, r3, r2
 80060e0:	18ed      	addgt	r5, r5, r3
 80060e2:	2600      	movs	r6, #0
 80060e4:	341a      	adds	r4, #26
 80060e6:	42b5      	cmp	r5, r6
 80060e8:	d11a      	bne.n	8006120 <_printf_common+0xc8>
 80060ea:	2000      	movs	r0, #0
 80060ec:	e008      	b.n	8006100 <_printf_common+0xa8>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4652      	mov	r2, sl
 80060f2:	4649      	mov	r1, r9
 80060f4:	4638      	mov	r0, r7
 80060f6:	47c0      	blx	r8
 80060f8:	3001      	adds	r0, #1
 80060fa:	d103      	bne.n	8006104 <_printf_common+0xac>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	3501      	adds	r5, #1
 8006106:	e7c6      	b.n	8006096 <_printf_common+0x3e>
 8006108:	18e1      	adds	r1, r4, r3
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	2030      	movs	r0, #48	; 0x30
 800610e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006112:	4422      	add	r2, r4
 8006114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611c:	3302      	adds	r3, #2
 800611e:	e7c7      	b.n	80060b0 <_printf_common+0x58>
 8006120:	2301      	movs	r3, #1
 8006122:	4622      	mov	r2, r4
 8006124:	4649      	mov	r1, r9
 8006126:	4638      	mov	r0, r7
 8006128:	47c0      	blx	r8
 800612a:	3001      	adds	r0, #1
 800612c:	d0e6      	beq.n	80060fc <_printf_common+0xa4>
 800612e:	3601      	adds	r6, #1
 8006130:	e7d9      	b.n	80060e6 <_printf_common+0x8e>
	...

08006134 <_printf_i>:
 8006134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	460c      	mov	r4, r1
 800613a:	4691      	mov	r9, r2
 800613c:	7e27      	ldrb	r7, [r4, #24]
 800613e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006140:	2f78      	cmp	r7, #120	; 0x78
 8006142:	4680      	mov	r8, r0
 8006144:	469a      	mov	sl, r3
 8006146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800614a:	d807      	bhi.n	800615c <_printf_i+0x28>
 800614c:	2f62      	cmp	r7, #98	; 0x62
 800614e:	d80a      	bhi.n	8006166 <_printf_i+0x32>
 8006150:	2f00      	cmp	r7, #0
 8006152:	f000 80d8 	beq.w	8006306 <_printf_i+0x1d2>
 8006156:	2f58      	cmp	r7, #88	; 0x58
 8006158:	f000 80a3 	beq.w	80062a2 <_printf_i+0x16e>
 800615c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006164:	e03a      	b.n	80061dc <_printf_i+0xa8>
 8006166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800616a:	2b15      	cmp	r3, #21
 800616c:	d8f6      	bhi.n	800615c <_printf_i+0x28>
 800616e:	a001      	add	r0, pc, #4	; (adr r0, 8006174 <_printf_i+0x40>)
 8006170:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006174:	080061cd 	.word	0x080061cd
 8006178:	080061e1 	.word	0x080061e1
 800617c:	0800615d 	.word	0x0800615d
 8006180:	0800615d 	.word	0x0800615d
 8006184:	0800615d 	.word	0x0800615d
 8006188:	0800615d 	.word	0x0800615d
 800618c:	080061e1 	.word	0x080061e1
 8006190:	0800615d 	.word	0x0800615d
 8006194:	0800615d 	.word	0x0800615d
 8006198:	0800615d 	.word	0x0800615d
 800619c:	0800615d 	.word	0x0800615d
 80061a0:	080062ed 	.word	0x080062ed
 80061a4:	08006211 	.word	0x08006211
 80061a8:	080062cf 	.word	0x080062cf
 80061ac:	0800615d 	.word	0x0800615d
 80061b0:	0800615d 	.word	0x0800615d
 80061b4:	0800630f 	.word	0x0800630f
 80061b8:	0800615d 	.word	0x0800615d
 80061bc:	08006211 	.word	0x08006211
 80061c0:	0800615d 	.word	0x0800615d
 80061c4:	0800615d 	.word	0x0800615d
 80061c8:	080062d7 	.word	0x080062d7
 80061cc:	680b      	ldr	r3, [r1, #0]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	600a      	str	r2, [r1, #0]
 80061d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061dc:	2301      	movs	r3, #1
 80061de:	e0a3      	b.n	8006328 <_printf_i+0x1f4>
 80061e0:	6825      	ldr	r5, [r4, #0]
 80061e2:	6808      	ldr	r0, [r1, #0]
 80061e4:	062e      	lsls	r6, r5, #24
 80061e6:	f100 0304 	add.w	r3, r0, #4
 80061ea:	d50a      	bpl.n	8006202 <_printf_i+0xce>
 80061ec:	6805      	ldr	r5, [r0, #0]
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da03      	bge.n	80061fc <_printf_i+0xc8>
 80061f4:	232d      	movs	r3, #45	; 0x2d
 80061f6:	426d      	negs	r5, r5
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fc:	485e      	ldr	r0, [pc, #376]	; (8006378 <_printf_i+0x244>)
 80061fe:	230a      	movs	r3, #10
 8006200:	e019      	b.n	8006236 <_printf_i+0x102>
 8006202:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006206:	6805      	ldr	r5, [r0, #0]
 8006208:	600b      	str	r3, [r1, #0]
 800620a:	bf18      	it	ne
 800620c:	b22d      	sxthne	r5, r5
 800620e:	e7ef      	b.n	80061f0 <_printf_i+0xbc>
 8006210:	680b      	ldr	r3, [r1, #0]
 8006212:	6825      	ldr	r5, [r4, #0]
 8006214:	1d18      	adds	r0, r3, #4
 8006216:	6008      	str	r0, [r1, #0]
 8006218:	0628      	lsls	r0, r5, #24
 800621a:	d501      	bpl.n	8006220 <_printf_i+0xec>
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	e002      	b.n	8006226 <_printf_i+0xf2>
 8006220:	0669      	lsls	r1, r5, #25
 8006222:	d5fb      	bpl.n	800621c <_printf_i+0xe8>
 8006224:	881d      	ldrh	r5, [r3, #0]
 8006226:	4854      	ldr	r0, [pc, #336]	; (8006378 <_printf_i+0x244>)
 8006228:	2f6f      	cmp	r7, #111	; 0x6f
 800622a:	bf0c      	ite	eq
 800622c:	2308      	moveq	r3, #8
 800622e:	230a      	movne	r3, #10
 8006230:	2100      	movs	r1, #0
 8006232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006236:	6866      	ldr	r6, [r4, #4]
 8006238:	60a6      	str	r6, [r4, #8]
 800623a:	2e00      	cmp	r6, #0
 800623c:	bfa2      	ittt	ge
 800623e:	6821      	ldrge	r1, [r4, #0]
 8006240:	f021 0104 	bicge.w	r1, r1, #4
 8006244:	6021      	strge	r1, [r4, #0]
 8006246:	b90d      	cbnz	r5, 800624c <_printf_i+0x118>
 8006248:	2e00      	cmp	r6, #0
 800624a:	d04d      	beq.n	80062e8 <_printf_i+0x1b4>
 800624c:	4616      	mov	r6, r2
 800624e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006252:	fb03 5711 	mls	r7, r3, r1, r5
 8006256:	5dc7      	ldrb	r7, [r0, r7]
 8006258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800625c:	462f      	mov	r7, r5
 800625e:	42bb      	cmp	r3, r7
 8006260:	460d      	mov	r5, r1
 8006262:	d9f4      	bls.n	800624e <_printf_i+0x11a>
 8006264:	2b08      	cmp	r3, #8
 8006266:	d10b      	bne.n	8006280 <_printf_i+0x14c>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	07df      	lsls	r7, r3, #31
 800626c:	d508      	bpl.n	8006280 <_printf_i+0x14c>
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	6861      	ldr	r1, [r4, #4]
 8006272:	4299      	cmp	r1, r3
 8006274:	bfde      	ittt	le
 8006276:	2330      	movle	r3, #48	; 0x30
 8006278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800627c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006280:	1b92      	subs	r2, r2, r6
 8006282:	6122      	str	r2, [r4, #16]
 8006284:	f8cd a000 	str.w	sl, [sp]
 8006288:	464b      	mov	r3, r9
 800628a:	aa03      	add	r2, sp, #12
 800628c:	4621      	mov	r1, r4
 800628e:	4640      	mov	r0, r8
 8006290:	f7ff fee2 	bl	8006058 <_printf_common>
 8006294:	3001      	adds	r0, #1
 8006296:	d14c      	bne.n	8006332 <_printf_i+0x1fe>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	b004      	add	sp, #16
 800629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a2:	4835      	ldr	r0, [pc, #212]	; (8006378 <_printf_i+0x244>)
 80062a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	680e      	ldr	r6, [r1, #0]
 80062ac:	061f      	lsls	r7, r3, #24
 80062ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80062b2:	600e      	str	r6, [r1, #0]
 80062b4:	d514      	bpl.n	80062e0 <_printf_i+0x1ac>
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	bf44      	itt	mi
 80062ba:	f043 0320 	orrmi.w	r3, r3, #32
 80062be:	6023      	strmi	r3, [r4, #0]
 80062c0:	b91d      	cbnz	r5, 80062ca <_printf_i+0x196>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	f023 0320 	bic.w	r3, r3, #32
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	2310      	movs	r3, #16
 80062cc:	e7b0      	b.n	8006230 <_printf_i+0xfc>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f043 0320 	orr.w	r3, r3, #32
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	2378      	movs	r3, #120	; 0x78
 80062d8:	4828      	ldr	r0, [pc, #160]	; (800637c <_printf_i+0x248>)
 80062da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062de:	e7e3      	b.n	80062a8 <_printf_i+0x174>
 80062e0:	065e      	lsls	r6, r3, #25
 80062e2:	bf48      	it	mi
 80062e4:	b2ad      	uxthmi	r5, r5
 80062e6:	e7e6      	b.n	80062b6 <_printf_i+0x182>
 80062e8:	4616      	mov	r6, r2
 80062ea:	e7bb      	b.n	8006264 <_printf_i+0x130>
 80062ec:	680b      	ldr	r3, [r1, #0]
 80062ee:	6826      	ldr	r6, [r4, #0]
 80062f0:	6960      	ldr	r0, [r4, #20]
 80062f2:	1d1d      	adds	r5, r3, #4
 80062f4:	600d      	str	r5, [r1, #0]
 80062f6:	0635      	lsls	r5, r6, #24
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	d501      	bpl.n	8006300 <_printf_i+0x1cc>
 80062fc:	6018      	str	r0, [r3, #0]
 80062fe:	e002      	b.n	8006306 <_printf_i+0x1d2>
 8006300:	0671      	lsls	r1, r6, #25
 8006302:	d5fb      	bpl.n	80062fc <_printf_i+0x1c8>
 8006304:	8018      	strh	r0, [r3, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	4616      	mov	r6, r2
 800630c:	e7ba      	b.n	8006284 <_printf_i+0x150>
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	600a      	str	r2, [r1, #0]
 8006314:	681e      	ldr	r6, [r3, #0]
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	2100      	movs	r1, #0
 800631a:	4630      	mov	r0, r6
 800631c:	f7f9 ff60 	bl	80001e0 <memchr>
 8006320:	b108      	cbz	r0, 8006326 <_printf_i+0x1f2>
 8006322:	1b80      	subs	r0, r0, r6
 8006324:	6060      	str	r0, [r4, #4]
 8006326:	6863      	ldr	r3, [r4, #4]
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	2300      	movs	r3, #0
 800632c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006330:	e7a8      	b.n	8006284 <_printf_i+0x150>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	4632      	mov	r2, r6
 8006336:	4649      	mov	r1, r9
 8006338:	4640      	mov	r0, r8
 800633a:	47d0      	blx	sl
 800633c:	3001      	adds	r0, #1
 800633e:	d0ab      	beq.n	8006298 <_printf_i+0x164>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	079b      	lsls	r3, r3, #30
 8006344:	d413      	bmi.n	800636e <_printf_i+0x23a>
 8006346:	68e0      	ldr	r0, [r4, #12]
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	4298      	cmp	r0, r3
 800634c:	bfb8      	it	lt
 800634e:	4618      	movlt	r0, r3
 8006350:	e7a4      	b.n	800629c <_printf_i+0x168>
 8006352:	2301      	movs	r3, #1
 8006354:	4632      	mov	r2, r6
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d09b      	beq.n	8006298 <_printf_i+0x164>
 8006360:	3501      	adds	r5, #1
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	9903      	ldr	r1, [sp, #12]
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	42ab      	cmp	r3, r5
 800636a:	dcf2      	bgt.n	8006352 <_printf_i+0x21e>
 800636c:	e7eb      	b.n	8006346 <_printf_i+0x212>
 800636e:	2500      	movs	r5, #0
 8006370:	f104 0619 	add.w	r6, r4, #25
 8006374:	e7f5      	b.n	8006362 <_printf_i+0x22e>
 8006376:	bf00      	nop
 8006378:	08009e46 	.word	0x08009e46
 800637c:	08009e57 	.word	0x08009e57

08006380 <siprintf>:
 8006380:	b40e      	push	{r1, r2, r3}
 8006382:	b500      	push	{lr}
 8006384:	b09c      	sub	sp, #112	; 0x70
 8006386:	ab1d      	add	r3, sp, #116	; 0x74
 8006388:	9002      	str	r0, [sp, #8]
 800638a:	9006      	str	r0, [sp, #24]
 800638c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <siprintf+0x38>)
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	9104      	str	r1, [sp, #16]
 8006396:	4909      	ldr	r1, [pc, #36]	; (80063bc <siprintf+0x3c>)
 8006398:	f853 2b04 	ldr.w	r2, [r3], #4
 800639c:	9105      	str	r1, [sp, #20]
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	f002 fe24 	bl	8008ff0 <_svfiprintf_r>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	b01c      	add	sp, #112	; 0x70
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b003      	add	sp, #12
 80063b6:	4770      	bx	lr
 80063b8:	20000010 	.word	0x20000010
 80063bc:	ffff0208 	.word	0xffff0208

080063c0 <sulp>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4604      	mov	r4, r0
 80063c4:	460d      	mov	r5, r1
 80063c6:	ec45 4b10 	vmov	d0, r4, r5
 80063ca:	4616      	mov	r6, r2
 80063cc:	f002 fbac 	bl	8008b28 <__ulp>
 80063d0:	ec51 0b10 	vmov	r0, r1, d0
 80063d4:	b17e      	cbz	r6, 80063f6 <sulp+0x36>
 80063d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063de:	2b00      	cmp	r3, #0
 80063e0:	dd09      	ble.n	80063f6 <sulp+0x36>
 80063e2:	051b      	lsls	r3, r3, #20
 80063e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80063e8:	2400      	movs	r4, #0
 80063ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80063ee:	4622      	mov	r2, r4
 80063f0:	462b      	mov	r3, r5
 80063f2:	f7fa f901 	bl	80005f8 <__aeabi_dmul>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}

080063f8 <_strtod_l>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	b0a3      	sub	sp, #140	; 0x8c
 80063fe:	461f      	mov	r7, r3
 8006400:	2300      	movs	r3, #0
 8006402:	931e      	str	r3, [sp, #120]	; 0x78
 8006404:	4ba4      	ldr	r3, [pc, #656]	; (8006698 <_strtod_l+0x2a0>)
 8006406:	9219      	str	r2, [sp, #100]	; 0x64
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	4604      	mov	r4, r0
 800640e:	4618      	mov	r0, r3
 8006410:	4688      	mov	r8, r1
 8006412:	f7f9 fedd 	bl	80001d0 <strlen>
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	4605      	mov	r5, r0
 800641c:	f04f 0b00 	mov.w	fp, #0
 8006420:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006426:	781a      	ldrb	r2, [r3, #0]
 8006428:	2a2b      	cmp	r2, #43	; 0x2b
 800642a:	d04c      	beq.n	80064c6 <_strtod_l+0xce>
 800642c:	d839      	bhi.n	80064a2 <_strtod_l+0xaa>
 800642e:	2a0d      	cmp	r2, #13
 8006430:	d832      	bhi.n	8006498 <_strtod_l+0xa0>
 8006432:	2a08      	cmp	r2, #8
 8006434:	d832      	bhi.n	800649c <_strtod_l+0xa4>
 8006436:	2a00      	cmp	r2, #0
 8006438:	d03c      	beq.n	80064b4 <_strtod_l+0xbc>
 800643a:	2300      	movs	r3, #0
 800643c:	930e      	str	r3, [sp, #56]	; 0x38
 800643e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006440:	7833      	ldrb	r3, [r6, #0]
 8006442:	2b30      	cmp	r3, #48	; 0x30
 8006444:	f040 80b4 	bne.w	80065b0 <_strtod_l+0x1b8>
 8006448:	7873      	ldrb	r3, [r6, #1]
 800644a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800644e:	2b58      	cmp	r3, #88	; 0x58
 8006450:	d16c      	bne.n	800652c <_strtod_l+0x134>
 8006452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	ab1e      	add	r3, sp, #120	; 0x78
 8006458:	9702      	str	r7, [sp, #8]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4a8f      	ldr	r2, [pc, #572]	; (800669c <_strtod_l+0x2a4>)
 800645e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006460:	a91d      	add	r1, sp, #116	; 0x74
 8006462:	4620      	mov	r0, r4
 8006464:	f001 fcc0 	bl	8007de8 <__gethex>
 8006468:	f010 0707 	ands.w	r7, r0, #7
 800646c:	4605      	mov	r5, r0
 800646e:	d005      	beq.n	800647c <_strtod_l+0x84>
 8006470:	2f06      	cmp	r7, #6
 8006472:	d12a      	bne.n	80064ca <_strtod_l+0xd2>
 8006474:	3601      	adds	r6, #1
 8006476:	2300      	movs	r3, #0
 8006478:	961d      	str	r6, [sp, #116]	; 0x74
 800647a:	930e      	str	r3, [sp, #56]	; 0x38
 800647c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 8596 	bne.w	8006fb0 <_strtod_l+0xbb8>
 8006484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006486:	b1db      	cbz	r3, 80064c0 <_strtod_l+0xc8>
 8006488:	4652      	mov	r2, sl
 800648a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800648e:	ec43 2b10 	vmov	d0, r2, r3
 8006492:	b023      	add	sp, #140	; 0x8c
 8006494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006498:	2a20      	cmp	r2, #32
 800649a:	d1ce      	bne.n	800643a <_strtod_l+0x42>
 800649c:	3301      	adds	r3, #1
 800649e:	931d      	str	r3, [sp, #116]	; 0x74
 80064a0:	e7c0      	b.n	8006424 <_strtod_l+0x2c>
 80064a2:	2a2d      	cmp	r2, #45	; 0x2d
 80064a4:	d1c9      	bne.n	800643a <_strtod_l+0x42>
 80064a6:	2201      	movs	r2, #1
 80064a8:	920e      	str	r2, [sp, #56]	; 0x38
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	921d      	str	r2, [sp, #116]	; 0x74
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1c4      	bne.n	800643e <_strtod_l+0x46>
 80064b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8576 	bne.w	8006fac <_strtod_l+0xbb4>
 80064c0:	4652      	mov	r2, sl
 80064c2:	465b      	mov	r3, fp
 80064c4:	e7e3      	b.n	800648e <_strtod_l+0x96>
 80064c6:	2200      	movs	r2, #0
 80064c8:	e7ee      	b.n	80064a8 <_strtod_l+0xb0>
 80064ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064cc:	b13a      	cbz	r2, 80064de <_strtod_l+0xe6>
 80064ce:	2135      	movs	r1, #53	; 0x35
 80064d0:	a820      	add	r0, sp, #128	; 0x80
 80064d2:	f002 fc34 	bl	8008d3e <__copybits>
 80064d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80064d8:	4620      	mov	r0, r4
 80064da:	f001 fff9 	bl	80084d0 <_Bfree>
 80064de:	3f01      	subs	r7, #1
 80064e0:	2f05      	cmp	r7, #5
 80064e2:	d807      	bhi.n	80064f4 <_strtod_l+0xfc>
 80064e4:	e8df f007 	tbb	[pc, r7]
 80064e8:	1d180b0e 	.word	0x1d180b0e
 80064ec:	030e      	.short	0x030e
 80064ee:	f04f 0b00 	mov.w	fp, #0
 80064f2:	46da      	mov	sl, fp
 80064f4:	0728      	lsls	r0, r5, #28
 80064f6:	d5c1      	bpl.n	800647c <_strtod_l+0x84>
 80064f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80064fc:	e7be      	b.n	800647c <_strtod_l+0x84>
 80064fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006502:	e7f7      	b.n	80064f4 <_strtod_l+0xfc>
 8006504:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006508:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800650a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800650e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006512:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006516:	e7ed      	b.n	80064f4 <_strtod_l+0xfc>
 8006518:	f8df b184 	ldr.w	fp, [pc, #388]	; 80066a0 <_strtod_l+0x2a8>
 800651c:	f04f 0a00 	mov.w	sl, #0
 8006520:	e7e8      	b.n	80064f4 <_strtod_l+0xfc>
 8006522:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006526:	f04f 3aff 	mov.w	sl, #4294967295
 800652a:	e7e3      	b.n	80064f4 <_strtod_l+0xfc>
 800652c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	921d      	str	r2, [sp, #116]	; 0x74
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d0f9      	beq.n	800652c <_strtod_l+0x134>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d09f      	beq.n	800647c <_strtod_l+0x84>
 800653c:	2301      	movs	r3, #1
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006546:	930a      	str	r3, [sp, #40]	; 0x28
 8006548:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800654c:	464f      	mov	r7, r9
 800654e:	220a      	movs	r2, #10
 8006550:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006552:	7806      	ldrb	r6, [r0, #0]
 8006554:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006558:	b2d9      	uxtb	r1, r3
 800655a:	2909      	cmp	r1, #9
 800655c:	d92a      	bls.n	80065b4 <_strtod_l+0x1bc>
 800655e:	9907      	ldr	r1, [sp, #28]
 8006560:	462a      	mov	r2, r5
 8006562:	f002 fe5d 	bl	8009220 <strncmp>
 8006566:	b398      	cbz	r0, 80065d0 <_strtod_l+0x1d8>
 8006568:	2000      	movs	r0, #0
 800656a:	4633      	mov	r3, r6
 800656c:	463d      	mov	r5, r7
 800656e:	9007      	str	r0, [sp, #28]
 8006570:	4602      	mov	r2, r0
 8006572:	2b65      	cmp	r3, #101	; 0x65
 8006574:	d001      	beq.n	800657a <_strtod_l+0x182>
 8006576:	2b45      	cmp	r3, #69	; 0x45
 8006578:	d118      	bne.n	80065ac <_strtod_l+0x1b4>
 800657a:	b91d      	cbnz	r5, 8006584 <_strtod_l+0x18c>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	4303      	orrs	r3, r0
 8006580:	d098      	beq.n	80064b4 <_strtod_l+0xbc>
 8006582:	2500      	movs	r5, #0
 8006584:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006588:	f108 0301 	add.w	r3, r8, #1
 800658c:	931d      	str	r3, [sp, #116]	; 0x74
 800658e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006592:	2b2b      	cmp	r3, #43	; 0x2b
 8006594:	d075      	beq.n	8006682 <_strtod_l+0x28a>
 8006596:	2b2d      	cmp	r3, #45	; 0x2d
 8006598:	d07b      	beq.n	8006692 <_strtod_l+0x29a>
 800659a:	f04f 0c00 	mov.w	ip, #0
 800659e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80065a2:	2909      	cmp	r1, #9
 80065a4:	f240 8082 	bls.w	80066ac <_strtod_l+0x2b4>
 80065a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80065ac:	2600      	movs	r6, #0
 80065ae:	e09d      	b.n	80066ec <_strtod_l+0x2f4>
 80065b0:	2300      	movs	r3, #0
 80065b2:	e7c4      	b.n	800653e <_strtod_l+0x146>
 80065b4:	2f08      	cmp	r7, #8
 80065b6:	bfd8      	it	le
 80065b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80065ba:	f100 0001 	add.w	r0, r0, #1
 80065be:	bfda      	itte	le
 80065c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80065c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80065c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80065ca:	3701      	adds	r7, #1
 80065cc:	901d      	str	r0, [sp, #116]	; 0x74
 80065ce:	e7bf      	b.n	8006550 <_strtod_l+0x158>
 80065d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065d2:	195a      	adds	r2, r3, r5
 80065d4:	921d      	str	r2, [sp, #116]	; 0x74
 80065d6:	5d5b      	ldrb	r3, [r3, r5]
 80065d8:	2f00      	cmp	r7, #0
 80065da:	d037      	beq.n	800664c <_strtod_l+0x254>
 80065dc:	9007      	str	r0, [sp, #28]
 80065de:	463d      	mov	r5, r7
 80065e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80065e4:	2a09      	cmp	r2, #9
 80065e6:	d912      	bls.n	800660e <_strtod_l+0x216>
 80065e8:	2201      	movs	r2, #1
 80065ea:	e7c2      	b.n	8006572 <_strtod_l+0x17a>
 80065ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	921d      	str	r2, [sp, #116]	; 0x74
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	3001      	adds	r0, #1
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d0f8      	beq.n	80065ec <_strtod_l+0x1f4>
 80065fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80065fe:	2a08      	cmp	r2, #8
 8006600:	f200 84db 	bhi.w	8006fba <_strtod_l+0xbc2>
 8006604:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006606:	9007      	str	r0, [sp, #28]
 8006608:	2000      	movs	r0, #0
 800660a:	920a      	str	r2, [sp, #40]	; 0x28
 800660c:	4605      	mov	r5, r0
 800660e:	3b30      	subs	r3, #48	; 0x30
 8006610:	f100 0201 	add.w	r2, r0, #1
 8006614:	d014      	beq.n	8006640 <_strtod_l+0x248>
 8006616:	9907      	ldr	r1, [sp, #28]
 8006618:	4411      	add	r1, r2
 800661a:	9107      	str	r1, [sp, #28]
 800661c:	462a      	mov	r2, r5
 800661e:	eb00 0e05 	add.w	lr, r0, r5
 8006622:	210a      	movs	r1, #10
 8006624:	4572      	cmp	r2, lr
 8006626:	d113      	bne.n	8006650 <_strtod_l+0x258>
 8006628:	182a      	adds	r2, r5, r0
 800662a:	2a08      	cmp	r2, #8
 800662c:	f105 0501 	add.w	r5, r5, #1
 8006630:	4405      	add	r5, r0
 8006632:	dc1c      	bgt.n	800666e <_strtod_l+0x276>
 8006634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006636:	220a      	movs	r2, #10
 8006638:	fb02 3301 	mla	r3, r2, r1, r3
 800663c:	9309      	str	r3, [sp, #36]	; 0x24
 800663e:	2200      	movs	r2, #0
 8006640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	911d      	str	r1, [sp, #116]	; 0x74
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	4610      	mov	r0, r2
 800664a:	e7c9      	b.n	80065e0 <_strtod_l+0x1e8>
 800664c:	4638      	mov	r0, r7
 800664e:	e7d2      	b.n	80065f6 <_strtod_l+0x1fe>
 8006650:	2a08      	cmp	r2, #8
 8006652:	dc04      	bgt.n	800665e <_strtod_l+0x266>
 8006654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006656:	434e      	muls	r6, r1
 8006658:	9609      	str	r6, [sp, #36]	; 0x24
 800665a:	3201      	adds	r2, #1
 800665c:	e7e2      	b.n	8006624 <_strtod_l+0x22c>
 800665e:	f102 0c01 	add.w	ip, r2, #1
 8006662:	f1bc 0f10 	cmp.w	ip, #16
 8006666:	bfd8      	it	le
 8006668:	fb01 f909 	mulle.w	r9, r1, r9
 800666c:	e7f5      	b.n	800665a <_strtod_l+0x262>
 800666e:	2d10      	cmp	r5, #16
 8006670:	bfdc      	itt	le
 8006672:	220a      	movle	r2, #10
 8006674:	fb02 3909 	mlale	r9, r2, r9, r3
 8006678:	e7e1      	b.n	800663e <_strtod_l+0x246>
 800667a:	2300      	movs	r3, #0
 800667c:	9307      	str	r3, [sp, #28]
 800667e:	2201      	movs	r2, #1
 8006680:	e77c      	b.n	800657c <_strtod_l+0x184>
 8006682:	f04f 0c00 	mov.w	ip, #0
 8006686:	f108 0302 	add.w	r3, r8, #2
 800668a:	931d      	str	r3, [sp, #116]	; 0x74
 800668c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006690:	e785      	b.n	800659e <_strtod_l+0x1a6>
 8006692:	f04f 0c01 	mov.w	ip, #1
 8006696:	e7f6      	b.n	8006686 <_strtod_l+0x28e>
 8006698:	08009fb8 	.word	0x08009fb8
 800669c:	08009e68 	.word	0x08009e68
 80066a0:	7ff00000 	.word	0x7ff00000
 80066a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	911d      	str	r1, [sp, #116]	; 0x74
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d0f9      	beq.n	80066a4 <_strtod_l+0x2ac>
 80066b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80066b4:	2908      	cmp	r1, #8
 80066b6:	f63f af79 	bhi.w	80065ac <_strtod_l+0x1b4>
 80066ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80066be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066c0:	9308      	str	r3, [sp, #32]
 80066c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066c4:	1c59      	adds	r1, r3, #1
 80066c6:	911d      	str	r1, [sp, #116]	; 0x74
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80066ce:	2e09      	cmp	r6, #9
 80066d0:	d937      	bls.n	8006742 <_strtod_l+0x34a>
 80066d2:	9e08      	ldr	r6, [sp, #32]
 80066d4:	1b89      	subs	r1, r1, r6
 80066d6:	2908      	cmp	r1, #8
 80066d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80066dc:	dc02      	bgt.n	80066e4 <_strtod_l+0x2ec>
 80066de:	4576      	cmp	r6, lr
 80066e0:	bfa8      	it	ge
 80066e2:	4676      	movge	r6, lr
 80066e4:	f1bc 0f00 	cmp.w	ip, #0
 80066e8:	d000      	beq.n	80066ec <_strtod_l+0x2f4>
 80066ea:	4276      	negs	r6, r6
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	d14f      	bne.n	8006790 <_strtod_l+0x398>
 80066f0:	9904      	ldr	r1, [sp, #16]
 80066f2:	4301      	orrs	r1, r0
 80066f4:	f47f aec2 	bne.w	800647c <_strtod_l+0x84>
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	f47f aedb 	bne.w	80064b4 <_strtod_l+0xbc>
 80066fe:	2b69      	cmp	r3, #105	; 0x69
 8006700:	d027      	beq.n	8006752 <_strtod_l+0x35a>
 8006702:	dc24      	bgt.n	800674e <_strtod_l+0x356>
 8006704:	2b49      	cmp	r3, #73	; 0x49
 8006706:	d024      	beq.n	8006752 <_strtod_l+0x35a>
 8006708:	2b4e      	cmp	r3, #78	; 0x4e
 800670a:	f47f aed3 	bne.w	80064b4 <_strtod_l+0xbc>
 800670e:	499e      	ldr	r1, [pc, #632]	; (8006988 <_strtod_l+0x590>)
 8006710:	a81d      	add	r0, sp, #116	; 0x74
 8006712:	f001 fdc1 	bl	8008298 <__match>
 8006716:	2800      	cmp	r0, #0
 8006718:	f43f aecc 	beq.w	80064b4 <_strtod_l+0xbc>
 800671c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b28      	cmp	r3, #40	; 0x28
 8006722:	d12d      	bne.n	8006780 <_strtod_l+0x388>
 8006724:	4999      	ldr	r1, [pc, #612]	; (800698c <_strtod_l+0x594>)
 8006726:	aa20      	add	r2, sp, #128	; 0x80
 8006728:	a81d      	add	r0, sp, #116	; 0x74
 800672a:	f001 fdc9 	bl	80082c0 <__hexnan>
 800672e:	2805      	cmp	r0, #5
 8006730:	d126      	bne.n	8006780 <_strtod_l+0x388>
 8006732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006734:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006738:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800673c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006740:	e69c      	b.n	800647c <_strtod_l+0x84>
 8006742:	210a      	movs	r1, #10
 8006744:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006748:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800674c:	e7b9      	b.n	80066c2 <_strtod_l+0x2ca>
 800674e:	2b6e      	cmp	r3, #110	; 0x6e
 8006750:	e7db      	b.n	800670a <_strtod_l+0x312>
 8006752:	498f      	ldr	r1, [pc, #572]	; (8006990 <_strtod_l+0x598>)
 8006754:	a81d      	add	r0, sp, #116	; 0x74
 8006756:	f001 fd9f 	bl	8008298 <__match>
 800675a:	2800      	cmp	r0, #0
 800675c:	f43f aeaa 	beq.w	80064b4 <_strtod_l+0xbc>
 8006760:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006762:	498c      	ldr	r1, [pc, #560]	; (8006994 <_strtod_l+0x59c>)
 8006764:	3b01      	subs	r3, #1
 8006766:	a81d      	add	r0, sp, #116	; 0x74
 8006768:	931d      	str	r3, [sp, #116]	; 0x74
 800676a:	f001 fd95 	bl	8008298 <__match>
 800676e:	b910      	cbnz	r0, 8006776 <_strtod_l+0x37e>
 8006770:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006772:	3301      	adds	r3, #1
 8006774:	931d      	str	r3, [sp, #116]	; 0x74
 8006776:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80069a4 <_strtod_l+0x5ac>
 800677a:	f04f 0a00 	mov.w	sl, #0
 800677e:	e67d      	b.n	800647c <_strtod_l+0x84>
 8006780:	4885      	ldr	r0, [pc, #532]	; (8006998 <_strtod_l+0x5a0>)
 8006782:	f002 fd35 	bl	80091f0 <nan>
 8006786:	ed8d 0b04 	vstr	d0, [sp, #16]
 800678a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800678e:	e675      	b.n	800647c <_strtod_l+0x84>
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006794:	1af3      	subs	r3, r6, r3
 8006796:	2f00      	cmp	r7, #0
 8006798:	bf08      	it	eq
 800679a:	462f      	moveq	r7, r5
 800679c:	2d10      	cmp	r5, #16
 800679e:	9308      	str	r3, [sp, #32]
 80067a0:	46a8      	mov	r8, r5
 80067a2:	bfa8      	it	ge
 80067a4:	f04f 0810 	movge.w	r8, #16
 80067a8:	f7f9 feac 	bl	8000504 <__aeabi_ui2d>
 80067ac:	2d09      	cmp	r5, #9
 80067ae:	4682      	mov	sl, r0
 80067b0:	468b      	mov	fp, r1
 80067b2:	dd13      	ble.n	80067dc <_strtod_l+0x3e4>
 80067b4:	4b79      	ldr	r3, [pc, #484]	; (800699c <_strtod_l+0x5a4>)
 80067b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80067ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80067be:	f7f9 ff1b 	bl	80005f8 <__aeabi_dmul>
 80067c2:	4682      	mov	sl, r0
 80067c4:	4648      	mov	r0, r9
 80067c6:	468b      	mov	fp, r1
 80067c8:	f7f9 fe9c 	bl	8000504 <__aeabi_ui2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4650      	mov	r0, sl
 80067d2:	4659      	mov	r1, fp
 80067d4:	f7f9 fd5a 	bl	800028c <__adddf3>
 80067d8:	4682      	mov	sl, r0
 80067da:	468b      	mov	fp, r1
 80067dc:	2d0f      	cmp	r5, #15
 80067de:	dc38      	bgt.n	8006852 <_strtod_l+0x45a>
 80067e0:	9b08      	ldr	r3, [sp, #32]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f ae4a 	beq.w	800647c <_strtod_l+0x84>
 80067e8:	dd24      	ble.n	8006834 <_strtod_l+0x43c>
 80067ea:	2b16      	cmp	r3, #22
 80067ec:	dc0b      	bgt.n	8006806 <_strtod_l+0x40e>
 80067ee:	4d6b      	ldr	r5, [pc, #428]	; (800699c <_strtod_l+0x5a4>)
 80067f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80067f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80067f8:	4652      	mov	r2, sl
 80067fa:	465b      	mov	r3, fp
 80067fc:	f7f9 fefc 	bl	80005f8 <__aeabi_dmul>
 8006800:	4682      	mov	sl, r0
 8006802:	468b      	mov	fp, r1
 8006804:	e63a      	b.n	800647c <_strtod_l+0x84>
 8006806:	9a08      	ldr	r2, [sp, #32]
 8006808:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800680c:	4293      	cmp	r3, r2
 800680e:	db20      	blt.n	8006852 <_strtod_l+0x45a>
 8006810:	4c62      	ldr	r4, [pc, #392]	; (800699c <_strtod_l+0x5a4>)
 8006812:	f1c5 050f 	rsb	r5, r5, #15
 8006816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800681a:	4652      	mov	r2, sl
 800681c:	465b      	mov	r3, fp
 800681e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006822:	f7f9 fee9 	bl	80005f8 <__aeabi_dmul>
 8006826:	9b08      	ldr	r3, [sp, #32]
 8006828:	1b5d      	subs	r5, r3, r5
 800682a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800682e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006832:	e7e3      	b.n	80067fc <_strtod_l+0x404>
 8006834:	9b08      	ldr	r3, [sp, #32]
 8006836:	3316      	adds	r3, #22
 8006838:	db0b      	blt.n	8006852 <_strtod_l+0x45a>
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	4a57      	ldr	r2, [pc, #348]	; (800699c <_strtod_l+0x5a4>)
 800683e:	1b9e      	subs	r6, r3, r6
 8006840:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7f9 fffe 	bl	800084c <__aeabi_ddiv>
 8006850:	e7d6      	b.n	8006800 <_strtod_l+0x408>
 8006852:	9b08      	ldr	r3, [sp, #32]
 8006854:	eba5 0808 	sub.w	r8, r5, r8
 8006858:	4498      	add	r8, r3
 800685a:	f1b8 0f00 	cmp.w	r8, #0
 800685e:	dd71      	ble.n	8006944 <_strtod_l+0x54c>
 8006860:	f018 030f 	ands.w	r3, r8, #15
 8006864:	d00a      	beq.n	800687c <_strtod_l+0x484>
 8006866:	494d      	ldr	r1, [pc, #308]	; (800699c <_strtod_l+0x5a4>)
 8006868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800686c:	4652      	mov	r2, sl
 800686e:	465b      	mov	r3, fp
 8006870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006874:	f7f9 fec0 	bl	80005f8 <__aeabi_dmul>
 8006878:	4682      	mov	sl, r0
 800687a:	468b      	mov	fp, r1
 800687c:	f038 080f 	bics.w	r8, r8, #15
 8006880:	d04d      	beq.n	800691e <_strtod_l+0x526>
 8006882:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006886:	dd22      	ble.n	80068ce <_strtod_l+0x4d6>
 8006888:	2500      	movs	r5, #0
 800688a:	462e      	mov	r6, r5
 800688c:	9509      	str	r5, [sp, #36]	; 0x24
 800688e:	9507      	str	r5, [sp, #28]
 8006890:	2322      	movs	r3, #34	; 0x22
 8006892:	f8df b110 	ldr.w	fp, [pc, #272]	; 80069a4 <_strtod_l+0x5ac>
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	f04f 0a00 	mov.w	sl, #0
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f43f adec 	beq.w	800647c <_strtod_l+0x84>
 80068a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068a6:	4620      	mov	r0, r4
 80068a8:	f001 fe12 	bl	80084d0 <_Bfree>
 80068ac:	9907      	ldr	r1, [sp, #28]
 80068ae:	4620      	mov	r0, r4
 80068b0:	f001 fe0e 	bl	80084d0 <_Bfree>
 80068b4:	4631      	mov	r1, r6
 80068b6:	4620      	mov	r0, r4
 80068b8:	f001 fe0a 	bl	80084d0 <_Bfree>
 80068bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068be:	4620      	mov	r0, r4
 80068c0:	f001 fe06 	bl	80084d0 <_Bfree>
 80068c4:	4629      	mov	r1, r5
 80068c6:	4620      	mov	r0, r4
 80068c8:	f001 fe02 	bl	80084d0 <_Bfree>
 80068cc:	e5d6      	b.n	800647c <_strtod_l+0x84>
 80068ce:	2300      	movs	r3, #0
 80068d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80068d4:	4650      	mov	r0, sl
 80068d6:	4659      	mov	r1, fp
 80068d8:	4699      	mov	r9, r3
 80068da:	f1b8 0f01 	cmp.w	r8, #1
 80068de:	dc21      	bgt.n	8006924 <_strtod_l+0x52c>
 80068e0:	b10b      	cbz	r3, 80068e6 <_strtod_l+0x4ee>
 80068e2:	4682      	mov	sl, r0
 80068e4:	468b      	mov	fp, r1
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <_strtod_l+0x5a8>)
 80068e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80068ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <_strtod_l+0x5ac>)
 80068fe:	460a      	mov	r2, r1
 8006900:	400b      	ands	r3, r1
 8006902:	4929      	ldr	r1, [pc, #164]	; (80069a8 <_strtod_l+0x5b0>)
 8006904:	428b      	cmp	r3, r1
 8006906:	4682      	mov	sl, r0
 8006908:	d8be      	bhi.n	8006888 <_strtod_l+0x490>
 800690a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800690e:	428b      	cmp	r3, r1
 8006910:	bf86      	itte	hi
 8006912:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80069ac <_strtod_l+0x5b4>
 8006916:	f04f 3aff 	movhi.w	sl, #4294967295
 800691a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800691e:	2300      	movs	r3, #0
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	e081      	b.n	8006a28 <_strtod_l+0x630>
 8006924:	f018 0f01 	tst.w	r8, #1
 8006928:	d007      	beq.n	800693a <_strtod_l+0x542>
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <_strtod_l+0x5a8>)
 800692c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fe60 	bl	80005f8 <__aeabi_dmul>
 8006938:	2301      	movs	r3, #1
 800693a:	f109 0901 	add.w	r9, r9, #1
 800693e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006942:	e7ca      	b.n	80068da <_strtod_l+0x4e2>
 8006944:	d0eb      	beq.n	800691e <_strtod_l+0x526>
 8006946:	f1c8 0800 	rsb	r8, r8, #0
 800694a:	f018 020f 	ands.w	r2, r8, #15
 800694e:	d00a      	beq.n	8006966 <_strtod_l+0x56e>
 8006950:	4b12      	ldr	r3, [pc, #72]	; (800699c <_strtod_l+0x5a4>)
 8006952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006956:	4650      	mov	r0, sl
 8006958:	4659      	mov	r1, fp
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 ff75 	bl	800084c <__aeabi_ddiv>
 8006962:	4682      	mov	sl, r0
 8006964:	468b      	mov	fp, r1
 8006966:	ea5f 1828 	movs.w	r8, r8, asr #4
 800696a:	d0d8      	beq.n	800691e <_strtod_l+0x526>
 800696c:	f1b8 0f1f 	cmp.w	r8, #31
 8006970:	dd1e      	ble.n	80069b0 <_strtod_l+0x5b8>
 8006972:	2500      	movs	r5, #0
 8006974:	462e      	mov	r6, r5
 8006976:	9509      	str	r5, [sp, #36]	; 0x24
 8006978:	9507      	str	r5, [sp, #28]
 800697a:	2322      	movs	r3, #34	; 0x22
 800697c:	f04f 0a00 	mov.w	sl, #0
 8006980:	f04f 0b00 	mov.w	fp, #0
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	e789      	b.n	800689c <_strtod_l+0x4a4>
 8006988:	08009e41 	.word	0x08009e41
 800698c:	08009e7c 	.word	0x08009e7c
 8006990:	08009e39 	.word	0x08009e39
 8006994:	08009ebb 	.word	0x08009ebb
 8006998:	0800a178 	.word	0x0800a178
 800699c:	0800a058 	.word	0x0800a058
 80069a0:	0800a030 	.word	0x0800a030
 80069a4:	7ff00000 	.word	0x7ff00000
 80069a8:	7ca00000 	.word	0x7ca00000
 80069ac:	7fefffff 	.word	0x7fefffff
 80069b0:	f018 0310 	ands.w	r3, r8, #16
 80069b4:	bf18      	it	ne
 80069b6:	236a      	movne	r3, #106	; 0x6a
 80069b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006d70 <_strtod_l+0x978>
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	4650      	mov	r0, sl
 80069c0:	4659      	mov	r1, fp
 80069c2:	2300      	movs	r3, #0
 80069c4:	f018 0f01 	tst.w	r8, #1
 80069c8:	d004      	beq.n	80069d4 <_strtod_l+0x5dc>
 80069ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069ce:	f7f9 fe13 	bl	80005f8 <__aeabi_dmul>
 80069d2:	2301      	movs	r3, #1
 80069d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80069d8:	f109 0908 	add.w	r9, r9, #8
 80069dc:	d1f2      	bne.n	80069c4 <_strtod_l+0x5cc>
 80069de:	b10b      	cbz	r3, 80069e4 <_strtod_l+0x5ec>
 80069e0:	4682      	mov	sl, r0
 80069e2:	468b      	mov	fp, r1
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	b1bb      	cbz	r3, 8006a18 <_strtod_l+0x620>
 80069e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80069ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	4659      	mov	r1, fp
 80069f4:	dd10      	ble.n	8006a18 <_strtod_l+0x620>
 80069f6:	2b1f      	cmp	r3, #31
 80069f8:	f340 8128 	ble.w	8006c4c <_strtod_l+0x854>
 80069fc:	2b34      	cmp	r3, #52	; 0x34
 80069fe:	bfde      	ittt	le
 8006a00:	3b20      	suble	r3, #32
 8006a02:	f04f 32ff 	movle.w	r2, #4294967295
 8006a06:	fa02 f303 	lslle.w	r3, r2, r3
 8006a0a:	f04f 0a00 	mov.w	sl, #0
 8006a0e:	bfcc      	ite	gt
 8006a10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a14:	ea03 0b01 	andle.w	fp, r3, r1
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	4659      	mov	r1, fp
 8006a20:	f7fa f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d1a4      	bne.n	8006972 <_strtod_l+0x57a>
 8006a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a2e:	462b      	mov	r3, r5
 8006a30:	463a      	mov	r2, r7
 8006a32:	4620      	mov	r0, r4
 8006a34:	f001 fdb8 	bl	80085a8 <__s2b>
 8006a38:	9009      	str	r0, [sp, #36]	; 0x24
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f43f af24 	beq.w	8006888 <_strtod_l+0x490>
 8006a40:	9b07      	ldr	r3, [sp, #28]
 8006a42:	1b9e      	subs	r6, r3, r6
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfb4      	ite	lt
 8006a4a:	4633      	movlt	r3, r6
 8006a4c:	2300      	movge	r3, #0
 8006a4e:	9310      	str	r3, [sp, #64]	; 0x40
 8006a50:	9b08      	ldr	r3, [sp, #32]
 8006a52:	2500      	movs	r5, #0
 8006a54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a58:	9318      	str	r3, [sp, #96]	; 0x60
 8006a5a:	462e      	mov	r6, r5
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5e:	4620      	mov	r0, r4
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	f001 fcf5 	bl	8008450 <_Balloc>
 8006a66:	9007      	str	r0, [sp, #28]
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f43f af11 	beq.w	8006890 <_strtod_l+0x498>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	3202      	adds	r2, #2
 8006a74:	f103 010c 	add.w	r1, r3, #12
 8006a78:	0092      	lsls	r2, r2, #2
 8006a7a:	300c      	adds	r0, #12
 8006a7c:	f001 fcda 	bl	8008434 <memcpy>
 8006a80:	ec4b ab10 	vmov	d0, sl, fp
 8006a84:	aa20      	add	r2, sp, #128	; 0x80
 8006a86:	a91f      	add	r1, sp, #124	; 0x7c
 8006a88:	4620      	mov	r0, r4
 8006a8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006a8e:	f002 f8c7 	bl	8008c20 <__d2b>
 8006a92:	901e      	str	r0, [sp, #120]	; 0x78
 8006a94:	2800      	cmp	r0, #0
 8006a96:	f43f aefb 	beq.w	8006890 <_strtod_l+0x498>
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f001 fe1d 	bl	80086dc <__i2b>
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f43f aef3 	beq.w	8006890 <_strtod_l+0x498>
 8006aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006aac:	9904      	ldr	r1, [sp, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bfab      	itete	ge
 8006ab2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006ab4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006ab6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006ab8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006abc:	bfac      	ite	ge
 8006abe:	eb03 0902 	addge.w	r9, r3, r2
 8006ac2:	1ad7      	sublt	r7, r2, r3
 8006ac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ac6:	eba3 0801 	sub.w	r8, r3, r1
 8006aca:	4490      	add	r8, r2
 8006acc:	4ba3      	ldr	r3, [pc, #652]	; (8006d5c <_strtod_l+0x964>)
 8006ace:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ad2:	4598      	cmp	r8, r3
 8006ad4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ad8:	f280 80cc 	bge.w	8006c74 <_strtod_l+0x87c>
 8006adc:	eba3 0308 	sub.w	r3, r3, r8
 8006ae0:	2b1f      	cmp	r3, #31
 8006ae2:	eba2 0203 	sub.w	r2, r2, r3
 8006ae6:	f04f 0101 	mov.w	r1, #1
 8006aea:	f300 80b6 	bgt.w	8006c5a <_strtod_l+0x862>
 8006aee:	fa01 f303 	lsl.w	r3, r1, r3
 8006af2:	9311      	str	r3, [sp, #68]	; 0x44
 8006af4:	2300      	movs	r3, #0
 8006af6:	930c      	str	r3, [sp, #48]	; 0x30
 8006af8:	eb09 0802 	add.w	r8, r9, r2
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	45c1      	cmp	r9, r8
 8006b00:	4417      	add	r7, r2
 8006b02:	441f      	add	r7, r3
 8006b04:	464b      	mov	r3, r9
 8006b06:	bfa8      	it	ge
 8006b08:	4643      	movge	r3, r8
 8006b0a:	42bb      	cmp	r3, r7
 8006b0c:	bfa8      	it	ge
 8006b0e:	463b      	movge	r3, r7
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfc2      	ittt	gt
 8006b14:	eba8 0803 	subgt.w	r8, r8, r3
 8006b18:	1aff      	subgt	r7, r7, r3
 8006b1a:	eba9 0903 	subgt.w	r9, r9, r3
 8006b1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	dd17      	ble.n	8006b54 <_strtod_l+0x75c>
 8006b24:	4631      	mov	r1, r6
 8006b26:	461a      	mov	r2, r3
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f001 fe93 	bl	8008854 <__pow5mult>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f43f aead 	beq.w	8006890 <_strtod_l+0x498>
 8006b36:	4601      	mov	r1, r0
 8006b38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f001 fde4 	bl	8008708 <__multiply>
 8006b40:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f43f aea4 	beq.w	8006890 <_strtod_l+0x498>
 8006b48:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f001 fcc0 	bl	80084d0 <_Bfree>
 8006b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b52:	931e      	str	r3, [sp, #120]	; 0x78
 8006b54:	f1b8 0f00 	cmp.w	r8, #0
 8006b58:	f300 8091 	bgt.w	8006c7e <_strtod_l+0x886>
 8006b5c:	9b08      	ldr	r3, [sp, #32]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd08      	ble.n	8006b74 <_strtod_l+0x77c>
 8006b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b64:	9907      	ldr	r1, [sp, #28]
 8006b66:	4620      	mov	r0, r4
 8006b68:	f001 fe74 	bl	8008854 <__pow5mult>
 8006b6c:	9007      	str	r0, [sp, #28]
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f43f ae8e 	beq.w	8006890 <_strtod_l+0x498>
 8006b74:	2f00      	cmp	r7, #0
 8006b76:	dd08      	ble.n	8006b8a <_strtod_l+0x792>
 8006b78:	9907      	ldr	r1, [sp, #28]
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f001 fec3 	bl	8008908 <__lshift>
 8006b82:	9007      	str	r0, [sp, #28]
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f43f ae83 	beq.w	8006890 <_strtod_l+0x498>
 8006b8a:	f1b9 0f00 	cmp.w	r9, #0
 8006b8e:	dd08      	ble.n	8006ba2 <_strtod_l+0x7aa>
 8006b90:	4631      	mov	r1, r6
 8006b92:	464a      	mov	r2, r9
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 feb7 	bl	8008908 <__lshift>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f43f ae77 	beq.w	8006890 <_strtod_l+0x498>
 8006ba2:	9a07      	ldr	r2, [sp, #28]
 8006ba4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f001 ff36 	bl	8008a18 <__mdiff>
 8006bac:	4605      	mov	r5, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f43f ae6e 	beq.w	8006890 <_strtod_l+0x498>
 8006bb4:	68c3      	ldr	r3, [r0, #12]
 8006bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60c3      	str	r3, [r0, #12]
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	f001 ff0f 	bl	80089e0 <__mcmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	da65      	bge.n	8006c92 <_strtod_l+0x89a>
 8006bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8006bcc:	f040 8087 	bne.w	8006cde <_strtod_l+0x8e6>
 8006bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 8082 	bne.w	8006cde <_strtod_l+0x8e6>
 8006bda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006bde:	0d1b      	lsrs	r3, r3, #20
 8006be0:	051b      	lsls	r3, r3, #20
 8006be2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006be6:	d97a      	bls.n	8006cde <_strtod_l+0x8e6>
 8006be8:	696b      	ldr	r3, [r5, #20]
 8006bea:	b913      	cbnz	r3, 8006bf2 <_strtod_l+0x7fa>
 8006bec:	692b      	ldr	r3, [r5, #16]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	dd75      	ble.n	8006cde <_strtod_l+0x8e6>
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 fe86 	bl	8008908 <__lshift>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4605      	mov	r5, r0
 8006c00:	f001 feee 	bl	80089e0 <__mcmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	dd6a      	ble.n	8006cde <_strtod_l+0x8e6>
 8006c08:	9904      	ldr	r1, [sp, #16]
 8006c0a:	4a55      	ldr	r2, [pc, #340]	; (8006d60 <_strtod_l+0x968>)
 8006c0c:	465b      	mov	r3, fp
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	f000 8085 	beq.w	8006d1e <_strtod_l+0x926>
 8006c14:	ea02 010b 	and.w	r1, r2, fp
 8006c18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c1c:	dc7f      	bgt.n	8006d1e <_strtod_l+0x926>
 8006c1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c22:	f77f aeaa 	ble.w	800697a <_strtod_l+0x582>
 8006c26:	4a4f      	ldr	r2, [pc, #316]	; (8006d64 <_strtod_l+0x96c>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006c2e:	4650      	mov	r0, sl
 8006c30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006c34:	4659      	mov	r1, fp
 8006c36:	f7f9 fcdf 	bl	80005f8 <__aeabi_dmul>
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	bf08      	it	eq
 8006c40:	2322      	moveq	r3, #34	; 0x22
 8006c42:	4682      	mov	sl, r0
 8006c44:	468b      	mov	fp, r1
 8006c46:	bf08      	it	eq
 8006c48:	6023      	streq	r3, [r4, #0]
 8006c4a:	e62b      	b.n	80068a4 <_strtod_l+0x4ac>
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	ea03 0a0a 	and.w	sl, r3, sl
 8006c58:	e6de      	b.n	8006a18 <_strtod_l+0x620>
 8006c5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006c5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006c62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006c66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006c6a:	fa01 f308 	lsl.w	r3, r1, r8
 8006c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c70:	9111      	str	r1, [sp, #68]	; 0x44
 8006c72:	e741      	b.n	8006af8 <_strtod_l+0x700>
 8006c74:	2300      	movs	r3, #0
 8006c76:	930c      	str	r3, [sp, #48]	; 0x30
 8006c78:	2301      	movs	r3, #1
 8006c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8006c7c:	e73c      	b.n	8006af8 <_strtod_l+0x700>
 8006c7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c80:	4642      	mov	r2, r8
 8006c82:	4620      	mov	r0, r4
 8006c84:	f001 fe40 	bl	8008908 <__lshift>
 8006c88:	901e      	str	r0, [sp, #120]	; 0x78
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f47f af66 	bne.w	8006b5c <_strtod_l+0x764>
 8006c90:	e5fe      	b.n	8006890 <_strtod_l+0x498>
 8006c92:	465f      	mov	r7, fp
 8006c94:	d16e      	bne.n	8006d74 <_strtod_l+0x97c>
 8006c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c9c:	b342      	cbz	r2, 8006cf0 <_strtod_l+0x8f8>
 8006c9e:	4a32      	ldr	r2, [pc, #200]	; (8006d68 <_strtod_l+0x970>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d128      	bne.n	8006cf6 <_strtod_l+0x8fe>
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	b1eb      	cbz	r3, 8006ce6 <_strtod_l+0x8ee>
 8006caa:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <_strtod_l+0x968>)
 8006cac:	403a      	ands	r2, r7
 8006cae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb6:	d819      	bhi.n	8006cec <_strtod_l+0x8f4>
 8006cb8:	0d12      	lsrs	r2, r2, #20
 8006cba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	d117      	bne.n	8006cf6 <_strtod_l+0x8fe>
 8006cc6:	4b29      	ldr	r3, [pc, #164]	; (8006d6c <_strtod_l+0x974>)
 8006cc8:	429f      	cmp	r7, r3
 8006cca:	d102      	bne.n	8006cd2 <_strtod_l+0x8da>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f addf 	beq.w	8006890 <_strtod_l+0x498>
 8006cd2:	4b23      	ldr	r3, [pc, #140]	; (8006d60 <_strtod_l+0x968>)
 8006cd4:	403b      	ands	r3, r7
 8006cd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006cda:	f04f 0a00 	mov.w	sl, #0
 8006cde:	9b04      	ldr	r3, [sp, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1a0      	bne.n	8006c26 <_strtod_l+0x82e>
 8006ce4:	e5de      	b.n	80068a4 <_strtod_l+0x4ac>
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cea:	e7ea      	b.n	8006cc2 <_strtod_l+0x8ca>
 8006cec:	460b      	mov	r3, r1
 8006cee:	e7e8      	b.n	8006cc2 <_strtod_l+0x8ca>
 8006cf0:	ea53 030a 	orrs.w	r3, r3, sl
 8006cf4:	d088      	beq.n	8006c08 <_strtod_l+0x810>
 8006cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf8:	b1db      	cbz	r3, 8006d32 <_strtod_l+0x93a>
 8006cfa:	423b      	tst	r3, r7
 8006cfc:	d0ef      	beq.n	8006cde <_strtod_l+0x8e6>
 8006cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d00:	9a04      	ldr	r2, [sp, #16]
 8006d02:	4650      	mov	r0, sl
 8006d04:	4659      	mov	r1, fp
 8006d06:	b1c3      	cbz	r3, 8006d3a <_strtod_l+0x942>
 8006d08:	f7ff fb5a 	bl	80063c0 <sulp>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d14:	f7f9 faba 	bl	800028c <__adddf3>
 8006d18:	4682      	mov	sl, r0
 8006d1a:	468b      	mov	fp, r1
 8006d1c:	e7df      	b.n	8006cde <_strtod_l+0x8e6>
 8006d1e:	4013      	ands	r3, r2
 8006d20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d2c:	f04f 3aff 	mov.w	sl, #4294967295
 8006d30:	e7d5      	b.n	8006cde <_strtod_l+0x8e6>
 8006d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d34:	ea13 0f0a 	tst.w	r3, sl
 8006d38:	e7e0      	b.n	8006cfc <_strtod_l+0x904>
 8006d3a:	f7ff fb41 	bl	80063c0 <sulp>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d46:	f7f9 fa9f 	bl	8000288 <__aeabi_dsub>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4682      	mov	sl, r0
 8006d50:	468b      	mov	fp, r1
 8006d52:	f7f9 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d0c1      	beq.n	8006cde <_strtod_l+0x8e6>
 8006d5a:	e60e      	b.n	800697a <_strtod_l+0x582>
 8006d5c:	fffffc02 	.word	0xfffffc02
 8006d60:	7ff00000 	.word	0x7ff00000
 8006d64:	39500000 	.word	0x39500000
 8006d68:	000fffff 	.word	0x000fffff
 8006d6c:	7fefffff 	.word	0x7fefffff
 8006d70:	08009e90 	.word	0x08009e90
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	f001 ffae 	bl	8008cd8 <__ratio>
 8006d7c:	ec59 8b10 	vmov	r8, r9, d0
 8006d80:	ee10 0a10 	vmov	r0, s0
 8006d84:	2200      	movs	r2, #0
 8006d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 feb0 	bl	8000af0 <__aeabi_dcmple>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d07c      	beq.n	8006e8e <_strtod_l+0xa96>
 8006d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d04c      	beq.n	8006e34 <_strtod_l+0xa3c>
 8006d9a:	4b95      	ldr	r3, [pc, #596]	; (8006ff0 <_strtod_l+0xbf8>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006da2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006ff0 <_strtod_l+0xbf8>
 8006da6:	f04f 0800 	mov.w	r8, #0
 8006daa:	4b92      	ldr	r3, [pc, #584]	; (8006ff4 <_strtod_l+0xbfc>)
 8006dac:	403b      	ands	r3, r7
 8006dae:	9311      	str	r3, [sp, #68]	; 0x44
 8006db0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006db2:	4b91      	ldr	r3, [pc, #580]	; (8006ff8 <_strtod_l+0xc00>)
 8006db4:	429a      	cmp	r2, r3
 8006db6:	f040 80b2 	bne.w	8006f1e <_strtod_l+0xb26>
 8006dba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dc2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006dc6:	ec4b ab10 	vmov	d0, sl, fp
 8006dca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006dce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006dd2:	f001 fea9 	bl	8008b28 <__ulp>
 8006dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dda:	ec53 2b10 	vmov	r2, r3, d0
 8006dde:	f7f9 fc0b 	bl	80005f8 <__aeabi_dmul>
 8006de2:	4652      	mov	r2, sl
 8006de4:	465b      	mov	r3, fp
 8006de6:	f7f9 fa51 	bl	800028c <__adddf3>
 8006dea:	460b      	mov	r3, r1
 8006dec:	4981      	ldr	r1, [pc, #516]	; (8006ff4 <_strtod_l+0xbfc>)
 8006dee:	4a83      	ldr	r2, [pc, #524]	; (8006ffc <_strtod_l+0xc04>)
 8006df0:	4019      	ands	r1, r3
 8006df2:	4291      	cmp	r1, r2
 8006df4:	4682      	mov	sl, r0
 8006df6:	d95e      	bls.n	8006eb6 <_strtod_l+0xabe>
 8006df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d103      	bne.n	8006e0a <_strtod_l+0xa12>
 8006e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e04:	3301      	adds	r3, #1
 8006e06:	f43f ad43 	beq.w	8006890 <_strtod_l+0x498>
 8006e0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007008 <_strtod_l+0xc10>
 8006e0e:	f04f 3aff 	mov.w	sl, #4294967295
 8006e12:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e14:	4620      	mov	r0, r4
 8006e16:	f001 fb5b 	bl	80084d0 <_Bfree>
 8006e1a:	9907      	ldr	r1, [sp, #28]
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f001 fb57 	bl	80084d0 <_Bfree>
 8006e22:	4631      	mov	r1, r6
 8006e24:	4620      	mov	r0, r4
 8006e26:	f001 fb53 	bl	80084d0 <_Bfree>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 fb4f 	bl	80084d0 <_Bfree>
 8006e32:	e613      	b.n	8006a5c <_strtod_l+0x664>
 8006e34:	f1ba 0f00 	cmp.w	sl, #0
 8006e38:	d11b      	bne.n	8006e72 <_strtod_l+0xa7a>
 8006e3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e3e:	b9f3      	cbnz	r3, 8006e7e <_strtod_l+0xa86>
 8006e40:	4b6b      	ldr	r3, [pc, #428]	; (8006ff0 <_strtod_l+0xbf8>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 fe48 	bl	8000adc <__aeabi_dcmplt>
 8006e4c:	b9d0      	cbnz	r0, 8006e84 <_strtod_l+0xa8c>
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4649      	mov	r1, r9
 8006e52:	4b6b      	ldr	r3, [pc, #428]	; (8007000 <_strtod_l+0xc08>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	f7f9 fbcf 	bl	80005f8 <__aeabi_dmul>
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	4689      	mov	r9, r1
 8006e5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006e66:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006e6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e70:	e79b      	b.n	8006daa <_strtod_l+0x9b2>
 8006e72:	f1ba 0f01 	cmp.w	sl, #1
 8006e76:	d102      	bne.n	8006e7e <_strtod_l+0xa86>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	f43f ad7e 	beq.w	800697a <_strtod_l+0x582>
 8006e7e:	4b61      	ldr	r3, [pc, #388]	; (8007004 <_strtod_l+0xc0c>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	e78c      	b.n	8006d9e <_strtod_l+0x9a6>
 8006e84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007000 <_strtod_l+0xc08>
 8006e88:	f04f 0800 	mov.w	r8, #0
 8006e8c:	e7e7      	b.n	8006e5e <_strtod_l+0xa66>
 8006e8e:	4b5c      	ldr	r3, [pc, #368]	; (8007000 <_strtod_l+0xc08>)
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	2200      	movs	r2, #0
 8006e96:	f7f9 fbaf 	bl	80005f8 <__aeabi_dmul>
 8006e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4689      	mov	r9, r1
 8006ea0:	b933      	cbnz	r3, 8006eb0 <_strtod_l+0xab8>
 8006ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea6:	9012      	str	r0, [sp, #72]	; 0x48
 8006ea8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006eae:	e7dd      	b.n	8006e6c <_strtod_l+0xa74>
 8006eb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006eb4:	e7f9      	b.n	8006eaa <_strtod_l+0xab2>
 8006eb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1a8      	bne.n	8006e12 <_strtod_l+0xa1a>
 8006ec0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ec6:	0d1b      	lsrs	r3, r3, #20
 8006ec8:	051b      	lsls	r3, r3, #20
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d1a1      	bne.n	8006e12 <_strtod_l+0xa1a>
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 fef1 	bl	8000cb8 <__aeabi_d2lz>
 8006ed6:	f7f9 fb61 	bl	800059c <__aeabi_l2d>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 f9d1 	bl	8000288 <__aeabi_dsub>
 8006ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ee8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eec:	ea43 030a 	orr.w	r3, r3, sl
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	d053      	beq.n	8006fa0 <_strtod_l+0xba8>
 8006ef8:	a335      	add	r3, pc, #212	; (adr r3, 8006fd0 <_strtod_l+0xbd8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 fded 	bl	8000adc <__aeabi_dcmplt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f47f acce 	bne.w	80068a4 <_strtod_l+0x4ac>
 8006f08:	a333      	add	r3, pc, #204	; (adr r3, 8006fd8 <_strtod_l+0xbe0>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fe01 	bl	8000b18 <__aeabi_dcmpgt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f43f af7b 	beq.w	8006e12 <_strtod_l+0xa1a>
 8006f1c:	e4c2      	b.n	80068a4 <_strtod_l+0x4ac>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	b333      	cbz	r3, 8006f70 <_strtod_l+0xb78>
 8006f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f28:	d822      	bhi.n	8006f70 <_strtod_l+0xb78>
 8006f2a:	a32d      	add	r3, pc, #180	; (adr r3, 8006fe0 <_strtod_l+0xbe8>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 fddc 	bl	8000af0 <__aeabi_dcmple>
 8006f38:	b1a0      	cbz	r0, 8006f64 <_strtod_l+0xb6c>
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	f7f9 fe33 	bl	8000ba8 <__aeabi_d2uiz>
 8006f42:	2801      	cmp	r0, #1
 8006f44:	bf38      	it	cc
 8006f46:	2001      	movcc	r0, #1
 8006f48:	f7f9 fadc 	bl	8000504 <__aeabi_ui2d>
 8006f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f4e:	4680      	mov	r8, r0
 8006f50:	4689      	mov	r9, r1
 8006f52:	bb13      	cbnz	r3, 8006f9a <_strtod_l+0xba2>
 8006f54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f58:	9014      	str	r0, [sp, #80]	; 0x50
 8006f5a:	9315      	str	r3, [sp, #84]	; 0x54
 8006f5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f7c:	f001 fdd4 	bl	8008b28 <__ulp>
 8006f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f84:	ec53 2b10 	vmov	r2, r3, d0
 8006f88:	f7f9 fb36 	bl	80005f8 <__aeabi_dmul>
 8006f8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f90:	f7f9 f97c 	bl	800028c <__adddf3>
 8006f94:	4682      	mov	sl, r0
 8006f96:	468b      	mov	fp, r1
 8006f98:	e78f      	b.n	8006eba <_strtod_l+0xac2>
 8006f9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006f9e:	e7dd      	b.n	8006f5c <_strtod_l+0xb64>
 8006fa0:	a311      	add	r3, pc, #68	; (adr r3, 8006fe8 <_strtod_l+0xbf0>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fd99 	bl	8000adc <__aeabi_dcmplt>
 8006faa:	e7b4      	b.n	8006f16 <_strtod_l+0xb1e>
 8006fac:	2300      	movs	r3, #0
 8006fae:	930e      	str	r3, [sp, #56]	; 0x38
 8006fb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	f7ff ba65 	b.w	8006484 <_strtod_l+0x8c>
 8006fba:	2b65      	cmp	r3, #101	; 0x65
 8006fbc:	f43f ab5d 	beq.w	800667a <_strtod_l+0x282>
 8006fc0:	2b45      	cmp	r3, #69	; 0x45
 8006fc2:	f43f ab5a 	beq.w	800667a <_strtod_l+0x282>
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f7ff bb92 	b.w	80066f0 <_strtod_l+0x2f8>
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	94a03595 	.word	0x94a03595
 8006fd4:	3fdfffff 	.word	0x3fdfffff
 8006fd8:	35afe535 	.word	0x35afe535
 8006fdc:	3fe00000 	.word	0x3fe00000
 8006fe0:	ffc00000 	.word	0xffc00000
 8006fe4:	41dfffff 	.word	0x41dfffff
 8006fe8:	94a03595 	.word	0x94a03595
 8006fec:	3fcfffff 	.word	0x3fcfffff
 8006ff0:	3ff00000 	.word	0x3ff00000
 8006ff4:	7ff00000 	.word	0x7ff00000
 8006ff8:	7fe00000 	.word	0x7fe00000
 8006ffc:	7c9fffff 	.word	0x7c9fffff
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	bff00000 	.word	0xbff00000
 8007008:	7fefffff 	.word	0x7fefffff

0800700c <strtod>:
 800700c:	460a      	mov	r2, r1
 800700e:	4601      	mov	r1, r0
 8007010:	4802      	ldr	r0, [pc, #8]	; (800701c <strtod+0x10>)
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <strtod+0x14>)
 8007014:	6800      	ldr	r0, [r0, #0]
 8007016:	f7ff b9ef 	b.w	80063f8 <_strtod_l>
 800701a:	bf00      	nop
 800701c:	20000010 	.word	0x20000010
 8007020:	20000078 	.word	0x20000078

08007024 <quorem>:
 8007024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	6903      	ldr	r3, [r0, #16]
 800702a:	690c      	ldr	r4, [r1, #16]
 800702c:	42a3      	cmp	r3, r4
 800702e:	4607      	mov	r7, r0
 8007030:	f2c0 8081 	blt.w	8007136 <quorem+0x112>
 8007034:	3c01      	subs	r4, #1
 8007036:	f101 0814 	add.w	r8, r1, #20
 800703a:	f100 0514 	add.w	r5, r0, #20
 800703e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800704c:	3301      	adds	r3, #1
 800704e:	429a      	cmp	r2, r3
 8007050:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007058:	fbb2 f6f3 	udiv	r6, r2, r3
 800705c:	d331      	bcc.n	80070c2 <quorem+0x9e>
 800705e:	f04f 0e00 	mov.w	lr, #0
 8007062:	4640      	mov	r0, r8
 8007064:	46ac      	mov	ip, r5
 8007066:	46f2      	mov	sl, lr
 8007068:	f850 2b04 	ldr.w	r2, [r0], #4
 800706c:	b293      	uxth	r3, r2
 800706e:	fb06 e303 	mla	r3, r6, r3, lr
 8007072:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007076:	b29b      	uxth	r3, r3
 8007078:	ebaa 0303 	sub.w	r3, sl, r3
 800707c:	0c12      	lsrs	r2, r2, #16
 800707e:	f8dc a000 	ldr.w	sl, [ip]
 8007082:	fb06 e202 	mla	r2, r6, r2, lr
 8007086:	fa13 f38a 	uxtah	r3, r3, sl
 800708a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800708e:	fa1f fa82 	uxth.w	sl, r2
 8007092:	f8dc 2000 	ldr.w	r2, [ip]
 8007096:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800709a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a4:	4581      	cmp	r9, r0
 80070a6:	f84c 3b04 	str.w	r3, [ip], #4
 80070aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070ae:	d2db      	bcs.n	8007068 <quorem+0x44>
 80070b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80070b4:	b92b      	cbnz	r3, 80070c2 <quorem+0x9e>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	3b04      	subs	r3, #4
 80070ba:	429d      	cmp	r5, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	d32e      	bcc.n	800711e <quorem+0xfa>
 80070c0:	613c      	str	r4, [r7, #16]
 80070c2:	4638      	mov	r0, r7
 80070c4:	f001 fc8c 	bl	80089e0 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	db24      	blt.n	8007116 <quorem+0xf2>
 80070cc:	3601      	adds	r6, #1
 80070ce:	4628      	mov	r0, r5
 80070d0:	f04f 0c00 	mov.w	ip, #0
 80070d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80070d8:	f8d0 e000 	ldr.w	lr, [r0]
 80070dc:	b293      	uxth	r3, r2
 80070de:	ebac 0303 	sub.w	r3, ip, r3
 80070e2:	0c12      	lsrs	r2, r2, #16
 80070e4:	fa13 f38e 	uxtah	r3, r3, lr
 80070e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f6:	45c1      	cmp	r9, r8
 80070f8:	f840 3b04 	str.w	r3, [r0], #4
 80070fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007100:	d2e8      	bcs.n	80070d4 <quorem+0xb0>
 8007102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800710a:	b922      	cbnz	r2, 8007116 <quorem+0xf2>
 800710c:	3b04      	subs	r3, #4
 800710e:	429d      	cmp	r5, r3
 8007110:	461a      	mov	r2, r3
 8007112:	d30a      	bcc.n	800712a <quorem+0x106>
 8007114:	613c      	str	r4, [r7, #16]
 8007116:	4630      	mov	r0, r6
 8007118:	b003      	add	sp, #12
 800711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	3b04      	subs	r3, #4
 8007122:	2a00      	cmp	r2, #0
 8007124:	d1cc      	bne.n	80070c0 <quorem+0x9c>
 8007126:	3c01      	subs	r4, #1
 8007128:	e7c7      	b.n	80070ba <quorem+0x96>
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	3b04      	subs	r3, #4
 800712e:	2a00      	cmp	r2, #0
 8007130:	d1f0      	bne.n	8007114 <quorem+0xf0>
 8007132:	3c01      	subs	r4, #1
 8007134:	e7eb      	b.n	800710e <quorem+0xea>
 8007136:	2000      	movs	r0, #0
 8007138:	e7ee      	b.n	8007118 <quorem+0xf4>
 800713a:	0000      	movs	r0, r0
 800713c:	0000      	movs	r0, r0
	...

08007140 <_dtoa_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	ec57 6b10 	vmov	r6, r7, d0
 800714c:	b095      	sub	sp, #84	; 0x54
 800714e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800715a:	4604      	mov	r4, r0
 800715c:	9209      	str	r2, [sp, #36]	; 0x24
 800715e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007160:	b975      	cbnz	r5, 8007180 <_dtoa_r+0x40>
 8007162:	2010      	movs	r0, #16
 8007164:	f001 f94c 	bl	8008400 <malloc>
 8007168:	4602      	mov	r2, r0
 800716a:	6260      	str	r0, [r4, #36]	; 0x24
 800716c:	b920      	cbnz	r0, 8007178 <_dtoa_r+0x38>
 800716e:	4bb2      	ldr	r3, [pc, #712]	; (8007438 <_dtoa_r+0x2f8>)
 8007170:	21ea      	movs	r1, #234	; 0xea
 8007172:	48b2      	ldr	r0, [pc, #712]	; (800743c <_dtoa_r+0x2fc>)
 8007174:	f002 f874 	bl	8009260 <__assert_func>
 8007178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800717c:	6005      	str	r5, [r0, #0]
 800717e:	60c5      	str	r5, [r0, #12]
 8007180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	b151      	cbz	r1, 800719c <_dtoa_r+0x5c>
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	604a      	str	r2, [r1, #4]
 800718a:	2301      	movs	r3, #1
 800718c:	4093      	lsls	r3, r2
 800718e:	608b      	str	r3, [r1, #8]
 8007190:	4620      	mov	r0, r4
 8007192:	f001 f99d 	bl	80084d0 <_Bfree>
 8007196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	1e3b      	subs	r3, r7, #0
 800719e:	bfb9      	ittee	lt
 80071a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071a4:	9303      	strlt	r3, [sp, #12]
 80071a6:	2300      	movge	r3, #0
 80071a8:	f8c8 3000 	strge.w	r3, [r8]
 80071ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80071b0:	4ba3      	ldr	r3, [pc, #652]	; (8007440 <_dtoa_r+0x300>)
 80071b2:	bfbc      	itt	lt
 80071b4:	2201      	movlt	r2, #1
 80071b6:	f8c8 2000 	strlt.w	r2, [r8]
 80071ba:	ea33 0309 	bics.w	r3, r3, r9
 80071be:	d11b      	bne.n	80071f8 <_dtoa_r+0xb8>
 80071c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071cc:	4333      	orrs	r3, r6
 80071ce:	f000 857a 	beq.w	8007cc6 <_dtoa_r+0xb86>
 80071d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d4:	b963      	cbnz	r3, 80071f0 <_dtoa_r+0xb0>
 80071d6:	4b9b      	ldr	r3, [pc, #620]	; (8007444 <_dtoa_r+0x304>)
 80071d8:	e024      	b.n	8007224 <_dtoa_r+0xe4>
 80071da:	4b9b      	ldr	r3, [pc, #620]	; (8007448 <_dtoa_r+0x308>)
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	9800      	ldr	r0, [sp, #0]
 80071e6:	b015      	add	sp, #84	; 0x54
 80071e8:	ecbd 8b02 	vpop	{d8}
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	4b94      	ldr	r3, [pc, #592]	; (8007444 <_dtoa_r+0x304>)
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	3303      	adds	r3, #3
 80071f6:	e7f3      	b.n	80071e0 <_dtoa_r+0xa0>
 80071f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	ec51 0b17 	vmov	r0, r1, d7
 8007202:	2300      	movs	r3, #0
 8007204:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007208:	f7f9 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800720c:	4680      	mov	r8, r0
 800720e:	b158      	cbz	r0, 8007228 <_dtoa_r+0xe8>
 8007210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007212:	2301      	movs	r3, #1
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8551 	beq.w	8007cc0 <_dtoa_r+0xb80>
 800721e:	488b      	ldr	r0, [pc, #556]	; (800744c <_dtoa_r+0x30c>)
 8007220:	6018      	str	r0, [r3, #0]
 8007222:	1e43      	subs	r3, r0, #1
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	e7dd      	b.n	80071e4 <_dtoa_r+0xa4>
 8007228:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800722c:	aa12      	add	r2, sp, #72	; 0x48
 800722e:	a913      	add	r1, sp, #76	; 0x4c
 8007230:	4620      	mov	r0, r4
 8007232:	f001 fcf5 	bl	8008c20 <__d2b>
 8007236:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800723a:	4683      	mov	fp, r0
 800723c:	2d00      	cmp	r5, #0
 800723e:	d07c      	beq.n	800733a <_dtoa_r+0x1fa>
 8007240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007242:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800724a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800724e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800725a:	4b7d      	ldr	r3, [pc, #500]	; (8007450 <_dtoa_r+0x310>)
 800725c:	2200      	movs	r2, #0
 800725e:	4630      	mov	r0, r6
 8007260:	4639      	mov	r1, r7
 8007262:	f7f9 f811 	bl	8000288 <__aeabi_dsub>
 8007266:	a36e      	add	r3, pc, #440	; (adr r3, 8007420 <_dtoa_r+0x2e0>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	a36d      	add	r3, pc, #436	; (adr r3, 8007428 <_dtoa_r+0x2e8>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f809 	bl	800028c <__adddf3>
 800727a:	4606      	mov	r6, r0
 800727c:	4628      	mov	r0, r5
 800727e:	460f      	mov	r7, r1
 8007280:	f7f9 f950 	bl	8000524 <__aeabi_i2d>
 8007284:	a36a      	add	r3, pc, #424	; (adr r3, 8007430 <_dtoa_r+0x2f0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f8 fff9 	bl	800028c <__adddf3>
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	f7f9 fc5b 	bl	8000b58 <__aeabi_d2iz>
 80072a2:	2200      	movs	r2, #0
 80072a4:	4682      	mov	sl, r0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fc16 	bl	8000adc <__aeabi_dcmplt>
 80072b0:	b148      	cbz	r0, 80072c6 <_dtoa_r+0x186>
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7f9 f936 	bl	8000524 <__aeabi_i2d>
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f9 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80072c0:	b908      	cbnz	r0, 80072c6 <_dtoa_r+0x186>
 80072c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c6:	f1ba 0f16 	cmp.w	sl, #22
 80072ca:	d854      	bhi.n	8007376 <_dtoa_r+0x236>
 80072cc:	4b61      	ldr	r3, [pc, #388]	; (8007454 <_dtoa_r+0x314>)
 80072ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072da:	f7f9 fbff 	bl	8000adc <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d04b      	beq.n	800737a <_dtoa_r+0x23a>
 80072e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072e6:	2300      	movs	r3, #0
 80072e8:	930e      	str	r3, [sp, #56]	; 0x38
 80072ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ec:	1b5d      	subs	r5, r3, r5
 80072ee:	1e6b      	subs	r3, r5, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	bf43      	ittte	mi
 80072f4:	2300      	movmi	r3, #0
 80072f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80072fa:	9304      	strmi	r3, [sp, #16]
 80072fc:	f04f 0800 	movpl.w	r8, #0
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	db3b      	blt.n	800737e <_dtoa_r+0x23e>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800730c:	4453      	add	r3, sl
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	2300      	movs	r3, #0
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	2b09      	cmp	r3, #9
 8007318:	d869      	bhi.n	80073ee <_dtoa_r+0x2ae>
 800731a:	2b05      	cmp	r3, #5
 800731c:	bfc4      	itt	gt
 800731e:	3b04      	subgt	r3, #4
 8007320:	9305      	strgt	r3, [sp, #20]
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	f1a3 0302 	sub.w	r3, r3, #2
 8007328:	bfcc      	ite	gt
 800732a:	2500      	movgt	r5, #0
 800732c:	2501      	movle	r5, #1
 800732e:	2b03      	cmp	r3, #3
 8007330:	d869      	bhi.n	8007406 <_dtoa_r+0x2c6>
 8007332:	e8df f003 	tbb	[pc, r3]
 8007336:	4e2c      	.short	0x4e2c
 8007338:	5a4c      	.short	0x5a4c
 800733a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800733e:	441d      	add	r5, r3
 8007340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007344:	2b20      	cmp	r3, #32
 8007346:	bfc1      	itttt	gt
 8007348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800734c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007350:	fa09 f303 	lslgt.w	r3, r9, r3
 8007354:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007358:	bfda      	itte	le
 800735a:	f1c3 0320 	rsble	r3, r3, #32
 800735e:	fa06 f003 	lslle.w	r0, r6, r3
 8007362:	4318      	orrgt	r0, r3
 8007364:	f7f9 f8ce 	bl	8000504 <__aeabi_ui2d>
 8007368:	2301      	movs	r3, #1
 800736a:	4606      	mov	r6, r0
 800736c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007370:	3d01      	subs	r5, #1
 8007372:	9310      	str	r3, [sp, #64]	; 0x40
 8007374:	e771      	b.n	800725a <_dtoa_r+0x11a>
 8007376:	2301      	movs	r3, #1
 8007378:	e7b6      	b.n	80072e8 <_dtoa_r+0x1a8>
 800737a:	900e      	str	r0, [sp, #56]	; 0x38
 800737c:	e7b5      	b.n	80072ea <_dtoa_r+0x1aa>
 800737e:	f1ca 0300 	rsb	r3, sl, #0
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	2300      	movs	r3, #0
 8007386:	eba8 080a 	sub.w	r8, r8, sl
 800738a:	930d      	str	r3, [sp, #52]	; 0x34
 800738c:	e7c2      	b.n	8007314 <_dtoa_r+0x1d4>
 800738e:	2300      	movs	r3, #0
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc39      	bgt.n	800740c <_dtoa_r+0x2cc>
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	f8cd 9004 	str.w	r9, [sp, #4]
 80073a0:	464b      	mov	r3, r9
 80073a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80073a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	6042      	str	r2, [r0, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	f102 0614 	add.w	r6, r2, #20
 80073b2:	429e      	cmp	r6, r3
 80073b4:	6841      	ldr	r1, [r0, #4]
 80073b6:	d92f      	bls.n	8007418 <_dtoa_r+0x2d8>
 80073b8:	4620      	mov	r0, r4
 80073ba:	f001 f849 	bl	8008450 <_Balloc>
 80073be:	9000      	str	r0, [sp, #0]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d14b      	bne.n	800745c <_dtoa_r+0x31c>
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <_dtoa_r+0x318>)
 80073c6:	4602      	mov	r2, r0
 80073c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073cc:	e6d1      	b.n	8007172 <_dtoa_r+0x32>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7de      	b.n	8007390 <_dtoa_r+0x250>
 80073d2:	2300      	movs	r3, #0
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	eb0a 0903 	add.w	r9, sl, r3
 80073dc:	f109 0301 	add.w	r3, r9, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	bfb8      	it	lt
 80073e6:	2301      	movlt	r3, #1
 80073e8:	e7dd      	b.n	80073a6 <_dtoa_r+0x266>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f2      	b.n	80073d4 <_dtoa_r+0x294>
 80073ee:	2501      	movs	r5, #1
 80073f0:	2300      	movs	r3, #0
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	9508      	str	r5, [sp, #32]
 80073f6:	f04f 39ff 	mov.w	r9, #4294967295
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007400:	2312      	movs	r3, #18
 8007402:	9209      	str	r2, [sp, #36]	; 0x24
 8007404:	e7cf      	b.n	80073a6 <_dtoa_r+0x266>
 8007406:	2301      	movs	r3, #1
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	e7f4      	b.n	80073f6 <_dtoa_r+0x2b6>
 800740c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007410:	f8cd 9004 	str.w	r9, [sp, #4]
 8007414:	464b      	mov	r3, r9
 8007416:	e7c6      	b.n	80073a6 <_dtoa_r+0x266>
 8007418:	3101      	adds	r1, #1
 800741a:	6041      	str	r1, [r0, #4]
 800741c:	0052      	lsls	r2, r2, #1
 800741e:	e7c6      	b.n	80073ae <_dtoa_r+0x26e>
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	08009ec5 	.word	0x08009ec5
 800743c:	08009edc 	.word	0x08009edc
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	08009ec1 	.word	0x08009ec1
 8007448:	08009eb8 	.word	0x08009eb8
 800744c:	08009e45 	.word	0x08009e45
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	0800a058 	.word	0x0800a058
 8007458:	08009f3b 	.word	0x08009f3b
 800745c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745e:	9a00      	ldr	r2, [sp, #0]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	2b0e      	cmp	r3, #14
 8007466:	f200 80ad 	bhi.w	80075c4 <_dtoa_r+0x484>
 800746a:	2d00      	cmp	r5, #0
 800746c:	f000 80aa 	beq.w	80075c4 <_dtoa_r+0x484>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	dd36      	ble.n	80074e4 <_dtoa_r+0x3a4>
 8007476:	4ac3      	ldr	r2, [pc, #780]	; (8007784 <_dtoa_r+0x644>)
 8007478:	f00a 030f 	and.w	r3, sl, #15
 800747c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007480:	ed93 7b00 	vldr	d7, [r3]
 8007484:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007488:	ea4f 172a 	mov.w	r7, sl, asr #4
 800748c:	eeb0 8a47 	vmov.f32	s16, s14
 8007490:	eef0 8a67 	vmov.f32	s17, s15
 8007494:	d016      	beq.n	80074c4 <_dtoa_r+0x384>
 8007496:	4bbc      	ldr	r3, [pc, #752]	; (8007788 <_dtoa_r+0x648>)
 8007498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800749c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074a0:	f7f9 f9d4 	bl	800084c <__aeabi_ddiv>
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	f007 070f 	and.w	r7, r7, #15
 80074ac:	2503      	movs	r5, #3
 80074ae:	4eb6      	ldr	r6, [pc, #728]	; (8007788 <_dtoa_r+0x648>)
 80074b0:	b957      	cbnz	r7, 80074c8 <_dtoa_r+0x388>
 80074b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b6:	ec53 2b18 	vmov	r2, r3, d8
 80074ba:	f7f9 f9c7 	bl	800084c <__aeabi_ddiv>
 80074be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c2:	e029      	b.n	8007518 <_dtoa_r+0x3d8>
 80074c4:	2502      	movs	r5, #2
 80074c6:	e7f2      	b.n	80074ae <_dtoa_r+0x36e>
 80074c8:	07f9      	lsls	r1, r7, #31
 80074ca:	d508      	bpl.n	80074de <_dtoa_r+0x39e>
 80074cc:	ec51 0b18 	vmov	r0, r1, d8
 80074d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074d4:	f7f9 f890 	bl	80005f8 <__aeabi_dmul>
 80074d8:	ec41 0b18 	vmov	d8, r0, r1
 80074dc:	3501      	adds	r5, #1
 80074de:	107f      	asrs	r7, r7, #1
 80074e0:	3608      	adds	r6, #8
 80074e2:	e7e5      	b.n	80074b0 <_dtoa_r+0x370>
 80074e4:	f000 80a6 	beq.w	8007634 <_dtoa_r+0x4f4>
 80074e8:	f1ca 0600 	rsb	r6, sl, #0
 80074ec:	4ba5      	ldr	r3, [pc, #660]	; (8007784 <_dtoa_r+0x644>)
 80074ee:	4fa6      	ldr	r7, [pc, #664]	; (8007788 <_dtoa_r+0x648>)
 80074f0:	f006 020f 	and.w	r2, r6, #15
 80074f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007500:	f7f9 f87a 	bl	80005f8 <__aeabi_dmul>
 8007504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007508:	1136      	asrs	r6, r6, #4
 800750a:	2300      	movs	r3, #0
 800750c:	2502      	movs	r5, #2
 800750e:	2e00      	cmp	r6, #0
 8007510:	f040 8085 	bne.w	800761e <_dtoa_r+0x4de>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1d2      	bne.n	80074be <_dtoa_r+0x37e>
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 808c 	beq.w	8007638 <_dtoa_r+0x4f8>
 8007520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007524:	4b99      	ldr	r3, [pc, #612]	; (800778c <_dtoa_r+0x64c>)
 8007526:	2200      	movs	r2, #0
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 fad6 	bl	8000adc <__aeabi_dcmplt>
 8007530:	2800      	cmp	r0, #0
 8007532:	f000 8081 	beq.w	8007638 <_dtoa_r+0x4f8>
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d07d      	beq.n	8007638 <_dtoa_r+0x4f8>
 800753c:	f1b9 0f00 	cmp.w	r9, #0
 8007540:	dd3c      	ble.n	80075bc <_dtoa_r+0x47c>
 8007542:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	2200      	movs	r2, #0
 800754a:	4b91      	ldr	r3, [pc, #580]	; (8007790 <_dtoa_r+0x650>)
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 f852 	bl	80005f8 <__aeabi_dmul>
 8007554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007558:	3501      	adds	r5, #1
 800755a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800755e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007562:	4628      	mov	r0, r5
 8007564:	f7f8 ffde 	bl	8000524 <__aeabi_i2d>
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	f7f9 f844 	bl	80005f8 <__aeabi_dmul>
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <_dtoa_r+0x654>)
 8007572:	2200      	movs	r2, #0
 8007574:	f7f8 fe8a 	bl	800028c <__adddf3>
 8007578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800757c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d15c      	bne.n	8007642 <_dtoa_r+0x502>
 8007588:	4b83      	ldr	r3, [pc, #524]	; (8007798 <_dtoa_r+0x658>)
 800758a:	2200      	movs	r2, #0
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f8 fe7a 	bl	8000288 <__aeabi_dsub>
 8007594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007598:	4606      	mov	r6, r0
 800759a:	460f      	mov	r7, r1
 800759c:	f7f9 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 8296 	bne.w	8007ad2 <_dtoa_r+0x992>
 80075a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075aa:	4630      	mov	r0, r6
 80075ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f9 fa93 	bl	8000adc <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8288 	bne.w	8007acc <_dtoa_r+0x98c>
 80075bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f2c0 8158 	blt.w	800787c <_dtoa_r+0x73c>
 80075cc:	f1ba 0f0e 	cmp.w	sl, #14
 80075d0:	f300 8154 	bgt.w	800787c <_dtoa_r+0x73c>
 80075d4:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <_dtoa_r+0x644>)
 80075d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f280 80e3 	bge.w	80077ac <_dtoa_r+0x66c>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f300 80df 	bgt.w	80077ac <_dtoa_r+0x66c>
 80075ee:	f040 826d 	bne.w	8007acc <_dtoa_r+0x98c>
 80075f2:	4b69      	ldr	r3, [pc, #420]	; (8007798 <_dtoa_r+0x658>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007602:	f7f9 fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8007606:	9e01      	ldr	r6, [sp, #4]
 8007608:	4637      	mov	r7, r6
 800760a:	2800      	cmp	r0, #0
 800760c:	f040 8243 	bne.w	8007a96 <_dtoa_r+0x956>
 8007610:	9d00      	ldr	r5, [sp, #0]
 8007612:	2331      	movs	r3, #49	; 0x31
 8007614:	f805 3b01 	strb.w	r3, [r5], #1
 8007618:	f10a 0a01 	add.w	sl, sl, #1
 800761c:	e23f      	b.n	8007a9e <_dtoa_r+0x95e>
 800761e:	07f2      	lsls	r2, r6, #31
 8007620:	d505      	bpl.n	800762e <_dtoa_r+0x4ee>
 8007622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007626:	f7f8 ffe7 	bl	80005f8 <__aeabi_dmul>
 800762a:	3501      	adds	r5, #1
 800762c:	2301      	movs	r3, #1
 800762e:	1076      	asrs	r6, r6, #1
 8007630:	3708      	adds	r7, #8
 8007632:	e76c      	b.n	800750e <_dtoa_r+0x3ce>
 8007634:	2502      	movs	r5, #2
 8007636:	e76f      	b.n	8007518 <_dtoa_r+0x3d8>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	f8cd a01c 	str.w	sl, [sp, #28]
 800763e:	930c      	str	r3, [sp, #48]	; 0x30
 8007640:	e78d      	b.n	800755e <_dtoa_r+0x41e>
 8007642:	9900      	ldr	r1, [sp, #0]
 8007644:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007648:	4b4e      	ldr	r3, [pc, #312]	; (8007784 <_dtoa_r+0x644>)
 800764a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800764e:	4401      	add	r1, r0
 8007650:	9102      	str	r1, [sp, #8]
 8007652:	9908      	ldr	r1, [sp, #32]
 8007654:	eeb0 8a47 	vmov.f32	s16, s14
 8007658:	eef0 8a67 	vmov.f32	s17, s15
 800765c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007664:	2900      	cmp	r1, #0
 8007666:	d045      	beq.n	80076f4 <_dtoa_r+0x5b4>
 8007668:	494c      	ldr	r1, [pc, #304]	; (800779c <_dtoa_r+0x65c>)
 800766a:	2000      	movs	r0, #0
 800766c:	f7f9 f8ee 	bl	800084c <__aeabi_ddiv>
 8007670:	ec53 2b18 	vmov	r2, r3, d8
 8007674:	f7f8 fe08 	bl	8000288 <__aeabi_dsub>
 8007678:	9d00      	ldr	r5, [sp, #0]
 800767a:	ec41 0b18 	vmov	d8, r0, r1
 800767e:	4639      	mov	r1, r7
 8007680:	4630      	mov	r0, r6
 8007682:	f7f9 fa69 	bl	8000b58 <__aeabi_d2iz>
 8007686:	900c      	str	r0, [sp, #48]	; 0x30
 8007688:	f7f8 ff4c 	bl	8000524 <__aeabi_i2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f8 fdf8 	bl	8000288 <__aeabi_dsub>
 8007698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769a:	3330      	adds	r3, #48	; 0x30
 800769c:	f805 3b01 	strb.w	r3, [r5], #1
 80076a0:	ec53 2b18 	vmov	r2, r3, d8
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	f7f9 fa18 	bl	8000adc <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d165      	bne.n	800777c <_dtoa_r+0x63c>
 80076b0:	4632      	mov	r2, r6
 80076b2:	463b      	mov	r3, r7
 80076b4:	4935      	ldr	r1, [pc, #212]	; (800778c <_dtoa_r+0x64c>)
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7f8 fde6 	bl	8000288 <__aeabi_dsub>
 80076bc:	ec53 2b18 	vmov	r2, r3, d8
 80076c0:	f7f9 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 80b9 	bne.w	800783c <_dtoa_r+0x6fc>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	429d      	cmp	r5, r3
 80076ce:	f43f af75 	beq.w	80075bc <_dtoa_r+0x47c>
 80076d2:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <_dtoa_r+0x650>)
 80076d4:	ec51 0b18 	vmov	r0, r1, d8
 80076d8:	2200      	movs	r2, #0
 80076da:	f7f8 ff8d 	bl	80005f8 <__aeabi_dmul>
 80076de:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <_dtoa_r+0x650>)
 80076e0:	ec41 0b18 	vmov	d8, r0, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	4630      	mov	r0, r6
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f8 ff85 	bl	80005f8 <__aeabi_dmul>
 80076ee:	4606      	mov	r6, r0
 80076f0:	460f      	mov	r7, r1
 80076f2:	e7c4      	b.n	800767e <_dtoa_r+0x53e>
 80076f4:	ec51 0b17 	vmov	r0, r1, d7
 80076f8:	f7f8 ff7e 	bl	80005f8 <__aeabi_dmul>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	9d00      	ldr	r5, [sp, #0]
 8007700:	930c      	str	r3, [sp, #48]	; 0x30
 8007702:	ec41 0b18 	vmov	d8, r0, r1
 8007706:	4639      	mov	r1, r7
 8007708:	4630      	mov	r0, r6
 800770a:	f7f9 fa25 	bl	8000b58 <__aeabi_d2iz>
 800770e:	9011      	str	r0, [sp, #68]	; 0x44
 8007710:	f7f8 ff08 	bl	8000524 <__aeabi_i2d>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f8 fdb4 	bl	8000288 <__aeabi_dsub>
 8007720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007722:	3330      	adds	r3, #48	; 0x30
 8007724:	f805 3b01 	strb.w	r3, [r5], #1
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	429d      	cmp	r5, r3
 800772c:	4606      	mov	r6, r0
 800772e:	460f      	mov	r7, r1
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	d134      	bne.n	80077a0 <_dtoa_r+0x660>
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <_dtoa_r+0x65c>)
 8007738:	ec51 0b18 	vmov	r0, r1, d8
 800773c:	f7f8 fda6 	bl	800028c <__adddf3>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f9 f9e6 	bl	8000b18 <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	d175      	bne.n	800783c <_dtoa_r+0x6fc>
 8007750:	ec53 2b18 	vmov	r2, r3, d8
 8007754:	4911      	ldr	r1, [pc, #68]	; (800779c <_dtoa_r+0x65c>)
 8007756:	2000      	movs	r0, #0
 8007758:	f7f8 fd96 	bl	8000288 <__aeabi_dsub>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f9 f9ba 	bl	8000adc <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	f43f af27 	beq.w	80075bc <_dtoa_r+0x47c>
 800776e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007770:	1e6b      	subs	r3, r5, #1
 8007772:	930c      	str	r3, [sp, #48]	; 0x30
 8007774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007778:	2b30      	cmp	r3, #48	; 0x30
 800777a:	d0f8      	beq.n	800776e <_dtoa_r+0x62e>
 800777c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007780:	e04a      	b.n	8007818 <_dtoa_r+0x6d8>
 8007782:	bf00      	nop
 8007784:	0800a058 	.word	0x0800a058
 8007788:	0800a030 	.word	0x0800a030
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	40240000 	.word	0x40240000
 8007794:	401c0000 	.word	0x401c0000
 8007798:	40140000 	.word	0x40140000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	4baf      	ldr	r3, [pc, #700]	; (8007a60 <_dtoa_r+0x920>)
 80077a2:	f7f8 ff29 	bl	80005f8 <__aeabi_dmul>
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	e7ac      	b.n	8007706 <_dtoa_r+0x5c6>
 80077ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077b0:	9d00      	ldr	r5, [sp, #0]
 80077b2:	4642      	mov	r2, r8
 80077b4:	464b      	mov	r3, r9
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f847 	bl	800084c <__aeabi_ddiv>
 80077be:	f7f9 f9cb 	bl	8000b58 <__aeabi_d2iz>
 80077c2:	9002      	str	r0, [sp, #8]
 80077c4:	f7f8 feae 	bl	8000524 <__aeabi_i2d>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	f7f8 ff14 	bl	80005f8 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f8 fd56 	bl	8000288 <__aeabi_dsub>
 80077dc:	9e02      	ldr	r6, [sp, #8]
 80077de:	9f01      	ldr	r7, [sp, #4]
 80077e0:	3630      	adds	r6, #48	; 0x30
 80077e2:	f805 6b01 	strb.w	r6, [r5], #1
 80077e6:	9e00      	ldr	r6, [sp, #0]
 80077e8:	1bae      	subs	r6, r5, r6
 80077ea:	42b7      	cmp	r7, r6
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	d137      	bne.n	8007862 <_dtoa_r+0x722>
 80077f2:	f7f8 fd4b 	bl	800028c <__adddf3>
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	f7f9 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8007802:	b9c8      	cbnz	r0, 8007838 <_dtoa_r+0x6f8>
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f9 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007810:	b110      	cbz	r0, 8007818 <_dtoa_r+0x6d8>
 8007812:	9b02      	ldr	r3, [sp, #8]
 8007814:	07d9      	lsls	r1, r3, #31
 8007816:	d40f      	bmi.n	8007838 <_dtoa_r+0x6f8>
 8007818:	4620      	mov	r0, r4
 800781a:	4659      	mov	r1, fp
 800781c:	f000 fe58 	bl	80084d0 <_Bfree>
 8007820:	2300      	movs	r3, #0
 8007822:	702b      	strb	r3, [r5, #0]
 8007824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007826:	f10a 0001 	add.w	r0, sl, #1
 800782a:	6018      	str	r0, [r3, #0]
 800782c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800782e:	2b00      	cmp	r3, #0
 8007830:	f43f acd8 	beq.w	80071e4 <_dtoa_r+0xa4>
 8007834:	601d      	str	r5, [r3, #0]
 8007836:	e4d5      	b.n	80071e4 <_dtoa_r+0xa4>
 8007838:	f8cd a01c 	str.w	sl, [sp, #28]
 800783c:	462b      	mov	r3, r5
 800783e:	461d      	mov	r5, r3
 8007840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007844:	2a39      	cmp	r2, #57	; 0x39
 8007846:	d108      	bne.n	800785a <_dtoa_r+0x71a>
 8007848:	9a00      	ldr	r2, [sp, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d1f7      	bne.n	800783e <_dtoa_r+0x6fe>
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	3201      	adds	r2, #1
 8007854:	9207      	str	r2, [sp, #28]
 8007856:	2230      	movs	r2, #48	; 0x30
 8007858:	700a      	strb	r2, [r1, #0]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	3201      	adds	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e78c      	b.n	800777c <_dtoa_r+0x63c>
 8007862:	4b7f      	ldr	r3, [pc, #508]	; (8007a60 <_dtoa_r+0x920>)
 8007864:	2200      	movs	r2, #0
 8007866:	f7f8 fec7 	bl	80005f8 <__aeabi_dmul>
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	4606      	mov	r6, r0
 8007870:	460f      	mov	r7, r1
 8007872:	f7f9 f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8007876:	2800      	cmp	r0, #0
 8007878:	d09b      	beq.n	80077b2 <_dtoa_r+0x672>
 800787a:	e7cd      	b.n	8007818 <_dtoa_r+0x6d8>
 800787c:	9a08      	ldr	r2, [sp, #32]
 800787e:	2a00      	cmp	r2, #0
 8007880:	f000 80c4 	beq.w	8007a0c <_dtoa_r+0x8cc>
 8007884:	9a05      	ldr	r2, [sp, #20]
 8007886:	2a01      	cmp	r2, #1
 8007888:	f300 80a8 	bgt.w	80079dc <_dtoa_r+0x89c>
 800788c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800788e:	2a00      	cmp	r2, #0
 8007890:	f000 80a0 	beq.w	80079d4 <_dtoa_r+0x894>
 8007894:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007898:	9e06      	ldr	r6, [sp, #24]
 800789a:	4645      	mov	r5, r8
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	2101      	movs	r1, #1
 80078a0:	441a      	add	r2, r3
 80078a2:	4620      	mov	r0, r4
 80078a4:	4498      	add	r8, r3
 80078a6:	9204      	str	r2, [sp, #16]
 80078a8:	f000 ff18 	bl	80086dc <__i2b>
 80078ac:	4607      	mov	r7, r0
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	dd0b      	ble.n	80078ca <_dtoa_r+0x78a>
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dd08      	ble.n	80078ca <_dtoa_r+0x78a>
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	9a04      	ldr	r2, [sp, #16]
 80078bc:	bfa8      	it	ge
 80078be:	462b      	movge	r3, r5
 80078c0:	eba8 0803 	sub.w	r8, r8, r3
 80078c4:	1aed      	subs	r5, r5, r3
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	b1fb      	cbz	r3, 800790e <_dtoa_r+0x7ce>
 80078ce:	9b08      	ldr	r3, [sp, #32]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 809f 	beq.w	8007a14 <_dtoa_r+0x8d4>
 80078d6:	2e00      	cmp	r6, #0
 80078d8:	dd11      	ble.n	80078fe <_dtoa_r+0x7be>
 80078da:	4639      	mov	r1, r7
 80078dc:	4632      	mov	r2, r6
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 ffb8 	bl	8008854 <__pow5mult>
 80078e4:	465a      	mov	r2, fp
 80078e6:	4601      	mov	r1, r0
 80078e8:	4607      	mov	r7, r0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 ff0c 	bl	8008708 <__multiply>
 80078f0:	4659      	mov	r1, fp
 80078f2:	9007      	str	r0, [sp, #28]
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fdeb 	bl	80084d0 <_Bfree>
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	469b      	mov	fp, r3
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	1b9a      	subs	r2, r3, r6
 8007902:	d004      	beq.n	800790e <_dtoa_r+0x7ce>
 8007904:	4659      	mov	r1, fp
 8007906:	4620      	mov	r0, r4
 8007908:	f000 ffa4 	bl	8008854 <__pow5mult>
 800790c:	4683      	mov	fp, r0
 800790e:	2101      	movs	r1, #1
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fee3 	bl	80086dc <__i2b>
 8007916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007918:	2b00      	cmp	r3, #0
 800791a:	4606      	mov	r6, r0
 800791c:	dd7c      	ble.n	8007a18 <_dtoa_r+0x8d8>
 800791e:	461a      	mov	r2, r3
 8007920:	4601      	mov	r1, r0
 8007922:	4620      	mov	r0, r4
 8007924:	f000 ff96 	bl	8008854 <__pow5mult>
 8007928:	9b05      	ldr	r3, [sp, #20]
 800792a:	2b01      	cmp	r3, #1
 800792c:	4606      	mov	r6, r0
 800792e:	dd76      	ble.n	8007a1e <_dtoa_r+0x8de>
 8007930:	2300      	movs	r3, #0
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	6933      	ldr	r3, [r6, #16]
 8007936:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800793a:	6918      	ldr	r0, [r3, #16]
 800793c:	f000 fe7e 	bl	800863c <__hi0bits>
 8007940:	f1c0 0020 	rsb	r0, r0, #32
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	4418      	add	r0, r3
 8007948:	f010 001f 	ands.w	r0, r0, #31
 800794c:	f000 8086 	beq.w	8007a5c <_dtoa_r+0x91c>
 8007950:	f1c0 0320 	rsb	r3, r0, #32
 8007954:	2b04      	cmp	r3, #4
 8007956:	dd7f      	ble.n	8007a58 <_dtoa_r+0x918>
 8007958:	f1c0 001c 	rsb	r0, r0, #28
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	4403      	add	r3, r0
 8007960:	4480      	add	r8, r0
 8007962:	4405      	add	r5, r0
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	dd05      	ble.n	8007978 <_dtoa_r+0x838>
 800796c:	4659      	mov	r1, fp
 800796e:	4642      	mov	r2, r8
 8007970:	4620      	mov	r0, r4
 8007972:	f000 ffc9 	bl	8008908 <__lshift>
 8007976:	4683      	mov	fp, r0
 8007978:	9b04      	ldr	r3, [sp, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd05      	ble.n	800798a <_dtoa_r+0x84a>
 800797e:	4631      	mov	r1, r6
 8007980:	461a      	mov	r2, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f000 ffc0 	bl	8008908 <__lshift>
 8007988:	4606      	mov	r6, r0
 800798a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d069      	beq.n	8007a64 <_dtoa_r+0x924>
 8007990:	4631      	mov	r1, r6
 8007992:	4658      	mov	r0, fp
 8007994:	f001 f824 	bl	80089e0 <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	da63      	bge.n	8007a64 <_dtoa_r+0x924>
 800799c:	2300      	movs	r3, #0
 800799e:	4659      	mov	r1, fp
 80079a0:	220a      	movs	r2, #10
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fdb6 	bl	8008514 <__multadd>
 80079a8:	9b08      	ldr	r3, [sp, #32]
 80079aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ae:	4683      	mov	fp, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 818f 	beq.w	8007cd4 <_dtoa_r+0xb94>
 80079b6:	4639      	mov	r1, r7
 80079b8:	2300      	movs	r3, #0
 80079ba:	220a      	movs	r2, #10
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fda9 	bl	8008514 <__multadd>
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	4607      	mov	r7, r0
 80079c8:	f300 808e 	bgt.w	8007ae8 <_dtoa_r+0x9a8>
 80079cc:	9b05      	ldr	r3, [sp, #20]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	dc50      	bgt.n	8007a74 <_dtoa_r+0x934>
 80079d2:	e089      	b.n	8007ae8 <_dtoa_r+0x9a8>
 80079d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079da:	e75d      	b.n	8007898 <_dtoa_r+0x758>
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	1e5e      	subs	r6, r3, #1
 80079e0:	9b06      	ldr	r3, [sp, #24]
 80079e2:	42b3      	cmp	r3, r6
 80079e4:	bfbf      	itttt	lt
 80079e6:	9b06      	ldrlt	r3, [sp, #24]
 80079e8:	9606      	strlt	r6, [sp, #24]
 80079ea:	1af2      	sublt	r2, r6, r3
 80079ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80079ee:	bfb6      	itet	lt
 80079f0:	189b      	addlt	r3, r3, r2
 80079f2:	1b9e      	subge	r6, r3, r6
 80079f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	bfb8      	it	lt
 80079fa:	2600      	movlt	r6, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bfb5      	itete	lt
 8007a00:	eba8 0503 	sublt.w	r5, r8, r3
 8007a04:	9b01      	ldrge	r3, [sp, #4]
 8007a06:	2300      	movlt	r3, #0
 8007a08:	4645      	movge	r5, r8
 8007a0a:	e747      	b.n	800789c <_dtoa_r+0x75c>
 8007a0c:	9e06      	ldr	r6, [sp, #24]
 8007a0e:	9f08      	ldr	r7, [sp, #32]
 8007a10:	4645      	mov	r5, r8
 8007a12:	e74c      	b.n	80078ae <_dtoa_r+0x76e>
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	e775      	b.n	8007904 <_dtoa_r+0x7c4>
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	dc18      	bgt.n	8007a50 <_dtoa_r+0x910>
 8007a1e:	9b02      	ldr	r3, [sp, #8]
 8007a20:	b9b3      	cbnz	r3, 8007a50 <_dtoa_r+0x910>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	b9a3      	cbnz	r3, 8007a54 <_dtoa_r+0x914>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a30:	0d1b      	lsrs	r3, r3, #20
 8007a32:	051b      	lsls	r3, r3, #20
 8007a34:	b12b      	cbz	r3, 8007a42 <_dtoa_r+0x902>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	f108 0801 	add.w	r8, r8, #1
 8007a40:	2301      	movs	r3, #1
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f47f af74 	bne.w	8007934 <_dtoa_r+0x7f4>
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	e779      	b.n	8007944 <_dtoa_r+0x804>
 8007a50:	2300      	movs	r3, #0
 8007a52:	e7f6      	b.n	8007a42 <_dtoa_r+0x902>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	e7f4      	b.n	8007a42 <_dtoa_r+0x902>
 8007a58:	d085      	beq.n	8007966 <_dtoa_r+0x826>
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	301c      	adds	r0, #28
 8007a5e:	e77d      	b.n	800795c <_dtoa_r+0x81c>
 8007a60:	40240000 	.word	0x40240000
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dc38      	bgt.n	8007adc <_dtoa_r+0x99c>
 8007a6a:	9b05      	ldr	r3, [sp, #20]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	dd35      	ble.n	8007adc <_dtoa_r+0x99c>
 8007a70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a74:	f1b9 0f00 	cmp.w	r9, #0
 8007a78:	d10d      	bne.n	8007a96 <_dtoa_r+0x956>
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	2205      	movs	r2, #5
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fd47 	bl	8008514 <__multadd>
 8007a86:	4601      	mov	r1, r0
 8007a88:	4606      	mov	r6, r0
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 ffa8 	bl	80089e0 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f73f adbd 	bgt.w	8007610 <_dtoa_r+0x4d0>
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	9d00      	ldr	r5, [sp, #0]
 8007a9a:	ea6f 0a03 	mvn.w	sl, r3
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fd13 	bl	80084d0 <_Bfree>
 8007aaa:	2f00      	cmp	r7, #0
 8007aac:	f43f aeb4 	beq.w	8007818 <_dtoa_r+0x6d8>
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	d005      	beq.n	8007ac2 <_dtoa_r+0x982>
 8007ab6:	45b8      	cmp	r8, r7
 8007ab8:	d003      	beq.n	8007ac2 <_dtoa_r+0x982>
 8007aba:	4641      	mov	r1, r8
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fd07 	bl	80084d0 <_Bfree>
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fd03 	bl	80084d0 <_Bfree>
 8007aca:	e6a5      	b.n	8007818 <_dtoa_r+0x6d8>
 8007acc:	2600      	movs	r6, #0
 8007ace:	4637      	mov	r7, r6
 8007ad0:	e7e1      	b.n	8007a96 <_dtoa_r+0x956>
 8007ad2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ad8:	4637      	mov	r7, r6
 8007ada:	e599      	b.n	8007610 <_dtoa_r+0x4d0>
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80fd 	beq.w	8007ce2 <_dtoa_r+0xba2>
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	dd05      	ble.n	8007af8 <_dtoa_r+0x9b8>
 8007aec:	4639      	mov	r1, r7
 8007aee:	462a      	mov	r2, r5
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 ff09 	bl	8008908 <__lshift>
 8007af6:	4607      	mov	r7, r0
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d05c      	beq.n	8007bb8 <_dtoa_r+0xa78>
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fca5 	bl	8008450 <_Balloc>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <_dtoa_r+0x9d6>
 8007b0a:	4b80      	ldr	r3, [pc, #512]	; (8007d0c <_dtoa_r+0xbcc>)
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b12:	f7ff bb2e 	b.w	8007172 <_dtoa_r+0x32>
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	3202      	adds	r2, #2
 8007b1a:	0092      	lsls	r2, r2, #2
 8007b1c:	f107 010c 	add.w	r1, r7, #12
 8007b20:	300c      	adds	r0, #12
 8007b22:	f000 fc87 	bl	8008434 <memcpy>
 8007b26:	2201      	movs	r2, #1
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 feec 	bl	8008908 <__lshift>
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	444b      	add	r3, r9
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	46b8      	mov	r8, r7
 8007b44:	9306      	str	r3, [sp, #24]
 8007b46:	4607      	mov	r7, r0
 8007b48:	9b01      	ldr	r3, [sp, #4]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	4658      	mov	r0, fp
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	f7ff fa67 	bl	8007024 <quorem>
 8007b56:	4603      	mov	r3, r0
 8007b58:	3330      	adds	r3, #48	; 0x30
 8007b5a:	9004      	str	r0, [sp, #16]
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	4658      	mov	r0, fp
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	f000 ff3d 	bl	80089e0 <__mcmp>
 8007b66:	463a      	mov	r2, r7
 8007b68:	4681      	mov	r9, r0
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 ff53 	bl	8008a18 <__mdiff>
 8007b72:	68c2      	ldr	r2, [r0, #12]
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	4605      	mov	r5, r0
 8007b78:	bb02      	cbnz	r2, 8007bbc <_dtoa_r+0xa7c>
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f000 ff2f 	bl	80089e0 <__mcmp>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	4602      	mov	r2, r0
 8007b86:	4629      	mov	r1, r5
 8007b88:	4620      	mov	r0, r4
 8007b8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007b8e:	f000 fc9f 	bl	80084d0 <_Bfree>
 8007b92:	9b05      	ldr	r3, [sp, #20]
 8007b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b96:	9d01      	ldr	r5, [sp, #4]
 8007b98:	ea43 0102 	orr.w	r1, r3, r2
 8007b9c:	9b06      	ldr	r3, [sp, #24]
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	d10d      	bne.n	8007bc0 <_dtoa_r+0xa80>
 8007ba4:	2b39      	cmp	r3, #57	; 0x39
 8007ba6:	d029      	beq.n	8007bfc <_dtoa_r+0xabc>
 8007ba8:	f1b9 0f00 	cmp.w	r9, #0
 8007bac:	dd01      	ble.n	8007bb2 <_dtoa_r+0xa72>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	3331      	adds	r3, #49	; 0x31
 8007bb2:	9a02      	ldr	r2, [sp, #8]
 8007bb4:	7013      	strb	r3, [r2, #0]
 8007bb6:	e774      	b.n	8007aa2 <_dtoa_r+0x962>
 8007bb8:	4638      	mov	r0, r7
 8007bba:	e7b9      	b.n	8007b30 <_dtoa_r+0x9f0>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	e7e2      	b.n	8007b86 <_dtoa_r+0xa46>
 8007bc0:	f1b9 0f00 	cmp.w	r9, #0
 8007bc4:	db06      	blt.n	8007bd4 <_dtoa_r+0xa94>
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	ea41 0909 	orr.w	r9, r1, r9
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	ea59 0101 	orrs.w	r1, r9, r1
 8007bd2:	d120      	bne.n	8007c16 <_dtoa_r+0xad6>
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	ddec      	ble.n	8007bb2 <_dtoa_r+0xa72>
 8007bd8:	4659      	mov	r1, fp
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	f000 fe92 	bl	8008908 <__lshift>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4683      	mov	fp, r0
 8007be8:	f000 fefa 	bl	80089e0 <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	dc02      	bgt.n	8007bf8 <_dtoa_r+0xab8>
 8007bf2:	d1de      	bne.n	8007bb2 <_dtoa_r+0xa72>
 8007bf4:	07da      	lsls	r2, r3, #31
 8007bf6:	d5dc      	bpl.n	8007bb2 <_dtoa_r+0xa72>
 8007bf8:	2b39      	cmp	r3, #57	; 0x39
 8007bfa:	d1d8      	bne.n	8007bae <_dtoa_r+0xa6e>
 8007bfc:	9a02      	ldr	r2, [sp, #8]
 8007bfe:	2339      	movs	r3, #57	; 0x39
 8007c00:	7013      	strb	r3, [r2, #0]
 8007c02:	462b      	mov	r3, r5
 8007c04:	461d      	mov	r5, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c0c:	2a39      	cmp	r2, #57	; 0x39
 8007c0e:	d050      	beq.n	8007cb2 <_dtoa_r+0xb72>
 8007c10:	3201      	adds	r2, #1
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e745      	b.n	8007aa2 <_dtoa_r+0x962>
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	dd03      	ble.n	8007c22 <_dtoa_r+0xae2>
 8007c1a:	2b39      	cmp	r3, #57	; 0x39
 8007c1c:	d0ee      	beq.n	8007bfc <_dtoa_r+0xabc>
 8007c1e:	3301      	adds	r3, #1
 8007c20:	e7c7      	b.n	8007bb2 <_dtoa_r+0xa72>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	9907      	ldr	r1, [sp, #28]
 8007c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c2a:	428a      	cmp	r2, r1
 8007c2c:	d02a      	beq.n	8007c84 <_dtoa_r+0xb44>
 8007c2e:	4659      	mov	r1, fp
 8007c30:	2300      	movs	r3, #0
 8007c32:	220a      	movs	r2, #10
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fc6d 	bl	8008514 <__multadd>
 8007c3a:	45b8      	cmp	r8, r7
 8007c3c:	4683      	mov	fp, r0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	f04f 020a 	mov.w	r2, #10
 8007c46:	4641      	mov	r1, r8
 8007c48:	4620      	mov	r0, r4
 8007c4a:	d107      	bne.n	8007c5c <_dtoa_r+0xb1c>
 8007c4c:	f000 fc62 	bl	8008514 <__multadd>
 8007c50:	4680      	mov	r8, r0
 8007c52:	4607      	mov	r7, r0
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	e775      	b.n	8007b48 <_dtoa_r+0xa08>
 8007c5c:	f000 fc5a 	bl	8008514 <__multadd>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4680      	mov	r8, r0
 8007c64:	2300      	movs	r3, #0
 8007c66:	220a      	movs	r2, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fc53 	bl	8008514 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	e7f0      	b.n	8007c54 <_dtoa_r+0xb14>
 8007c72:	f1b9 0f00 	cmp.w	r9, #0
 8007c76:	9a00      	ldr	r2, [sp, #0]
 8007c78:	bfcc      	ite	gt
 8007c7a:	464d      	movgt	r5, r9
 8007c7c:	2501      	movle	r5, #1
 8007c7e:	4415      	add	r5, r2
 8007c80:	f04f 0800 	mov.w	r8, #0
 8007c84:	4659      	mov	r1, fp
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f000 fe3c 	bl	8008908 <__lshift>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4683      	mov	fp, r0
 8007c94:	f000 fea4 	bl	80089e0 <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dcb2      	bgt.n	8007c02 <_dtoa_r+0xac2>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb64>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d4ae      	bmi.n	8007c02 <_dtoa_r+0xac2>
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	; 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb66>
 8007cb0:	e6f7      	b.n	8007aa2 <_dtoa_r+0x962>
 8007cb2:	9a00      	ldr	r2, [sp, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1a5      	bne.n	8007c04 <_dtoa_r+0xac4>
 8007cb8:	f10a 0a01 	add.w	sl, sl, #1
 8007cbc:	2331      	movs	r3, #49	; 0x31
 8007cbe:	e779      	b.n	8007bb4 <_dtoa_r+0xa74>
 8007cc0:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <_dtoa_r+0xbd0>)
 8007cc2:	f7ff baaf 	b.w	8007224 <_dtoa_r+0xe4>
 8007cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f47f aa86 	bne.w	80071da <_dtoa_r+0x9a>
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <_dtoa_r+0xbd4>)
 8007cd0:	f7ff baa8 	b.w	8007224 <_dtoa_r+0xe4>
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	dc03      	bgt.n	8007ce2 <_dtoa_r+0xba2>
 8007cda:	9b05      	ldr	r3, [sp, #20]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f73f aec9 	bgt.w	8007a74 <_dtoa_r+0x934>
 8007ce2:	9d00      	ldr	r5, [sp, #0]
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f7ff f99c 	bl	8007024 <quorem>
 8007cec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf4:	9a00      	ldr	r2, [sp, #0]
 8007cf6:	1aaa      	subs	r2, r5, r2
 8007cf8:	4591      	cmp	r9, r2
 8007cfa:	ddba      	ble.n	8007c72 <_dtoa_r+0xb32>
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	2300      	movs	r3, #0
 8007d00:	220a      	movs	r2, #10
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fc06 	bl	8008514 <__multadd>
 8007d08:	4683      	mov	fp, r0
 8007d0a:	e7eb      	b.n	8007ce4 <_dtoa_r+0xba4>
 8007d0c:	08009f3b 	.word	0x08009f3b
 8007d10:	08009e44 	.word	0x08009e44
 8007d14:	08009eb8 	.word	0x08009eb8

08007d18 <rshift>:
 8007d18:	6903      	ldr	r3, [r0, #16]
 8007d1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d26:	f100 0414 	add.w	r4, r0, #20
 8007d2a:	dd45      	ble.n	8007db8 <rshift+0xa0>
 8007d2c:	f011 011f 	ands.w	r1, r1, #31
 8007d30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d38:	d10c      	bne.n	8007d54 <rshift+0x3c>
 8007d3a:	f100 0710 	add.w	r7, r0, #16
 8007d3e:	4629      	mov	r1, r5
 8007d40:	42b1      	cmp	r1, r6
 8007d42:	d334      	bcc.n	8007dae <rshift+0x96>
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	1eea      	subs	r2, r5, #3
 8007d4a:	4296      	cmp	r6, r2
 8007d4c:	bf38      	it	cc
 8007d4e:	2300      	movcc	r3, #0
 8007d50:	4423      	add	r3, r4
 8007d52:	e015      	b.n	8007d80 <rshift+0x68>
 8007d54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d58:	f1c1 0820 	rsb	r8, r1, #32
 8007d5c:	40cf      	lsrs	r7, r1
 8007d5e:	f105 0e04 	add.w	lr, r5, #4
 8007d62:	46a1      	mov	r9, r4
 8007d64:	4576      	cmp	r6, lr
 8007d66:	46f4      	mov	ip, lr
 8007d68:	d815      	bhi.n	8007d96 <rshift+0x7e>
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	009a      	lsls	r2, r3, #2
 8007d6e:	3a04      	subs	r2, #4
 8007d70:	3501      	adds	r5, #1
 8007d72:	42ae      	cmp	r6, r5
 8007d74:	bf38      	it	cc
 8007d76:	2200      	movcc	r2, #0
 8007d78:	18a3      	adds	r3, r4, r2
 8007d7a:	50a7      	str	r7, [r4, r2]
 8007d7c:	b107      	cbz	r7, 8007d80 <rshift+0x68>
 8007d7e:	3304      	adds	r3, #4
 8007d80:	1b1a      	subs	r2, r3, r4
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d88:	bf08      	it	eq
 8007d8a:	2300      	moveq	r3, #0
 8007d8c:	6102      	str	r2, [r0, #16]
 8007d8e:	bf08      	it	eq
 8007d90:	6143      	streq	r3, [r0, #20]
 8007d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d96:	f8dc c000 	ldr.w	ip, [ip]
 8007d9a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d9e:	ea4c 0707 	orr.w	r7, ip, r7
 8007da2:	f849 7b04 	str.w	r7, [r9], #4
 8007da6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007daa:	40cf      	lsrs	r7, r1
 8007dac:	e7da      	b.n	8007d64 <rshift+0x4c>
 8007dae:	f851 cb04 	ldr.w	ip, [r1], #4
 8007db2:	f847 cf04 	str.w	ip, [r7, #4]!
 8007db6:	e7c3      	b.n	8007d40 <rshift+0x28>
 8007db8:	4623      	mov	r3, r4
 8007dba:	e7e1      	b.n	8007d80 <rshift+0x68>

08007dbc <__hexdig_fun>:
 8007dbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	d802      	bhi.n	8007dca <__hexdig_fun+0xe>
 8007dc4:	3820      	subs	r0, #32
 8007dc6:	b2c0      	uxtb	r0, r0
 8007dc8:	4770      	bx	lr
 8007dca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d801      	bhi.n	8007dd6 <__hexdig_fun+0x1a>
 8007dd2:	3847      	subs	r0, #71	; 0x47
 8007dd4:	e7f7      	b.n	8007dc6 <__hexdig_fun+0xa>
 8007dd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	d801      	bhi.n	8007de2 <__hexdig_fun+0x26>
 8007dde:	3827      	subs	r0, #39	; 0x27
 8007de0:	e7f1      	b.n	8007dc6 <__hexdig_fun+0xa>
 8007de2:	2000      	movs	r0, #0
 8007de4:	4770      	bx	lr
	...

08007de8 <__gethex>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	ed2d 8b02 	vpush	{d8}
 8007df0:	b089      	sub	sp, #36	; 0x24
 8007df2:	ee08 0a10 	vmov	s16, r0
 8007df6:	9304      	str	r3, [sp, #16]
 8007df8:	4bbc      	ldr	r3, [pc, #752]	; (80080ec <__gethex+0x304>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	468b      	mov	fp, r1
 8007e02:	4690      	mov	r8, r2
 8007e04:	f7f8 f9e4 	bl	80001d0 <strlen>
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	f8db 2000 	ldr.w	r2, [fp]
 8007e0e:	4403      	add	r3, r0
 8007e10:	4682      	mov	sl, r0
 8007e12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e16:	9305      	str	r3, [sp, #20]
 8007e18:	1c93      	adds	r3, r2, #2
 8007e1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e22:	32fe      	adds	r2, #254	; 0xfe
 8007e24:	18d1      	adds	r1, r2, r3
 8007e26:	461f      	mov	r7, r3
 8007e28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e2c:	9100      	str	r1, [sp, #0]
 8007e2e:	2830      	cmp	r0, #48	; 0x30
 8007e30:	d0f8      	beq.n	8007e24 <__gethex+0x3c>
 8007e32:	f7ff ffc3 	bl	8007dbc <__hexdig_fun>
 8007e36:	4604      	mov	r4, r0
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d13a      	bne.n	8007eb2 <__gethex+0xca>
 8007e3c:	9901      	ldr	r1, [sp, #4]
 8007e3e:	4652      	mov	r2, sl
 8007e40:	4638      	mov	r0, r7
 8007e42:	f001 f9ed 	bl	8009220 <strncmp>
 8007e46:	4605      	mov	r5, r0
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d168      	bne.n	8007f1e <__gethex+0x136>
 8007e4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e50:	eb07 060a 	add.w	r6, r7, sl
 8007e54:	f7ff ffb2 	bl	8007dbc <__hexdig_fun>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d062      	beq.n	8007f22 <__gethex+0x13a>
 8007e5c:	4633      	mov	r3, r6
 8007e5e:	7818      	ldrb	r0, [r3, #0]
 8007e60:	2830      	cmp	r0, #48	; 0x30
 8007e62:	461f      	mov	r7, r3
 8007e64:	f103 0301 	add.w	r3, r3, #1
 8007e68:	d0f9      	beq.n	8007e5e <__gethex+0x76>
 8007e6a:	f7ff ffa7 	bl	8007dbc <__hexdig_fun>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	fab0 f480 	clz	r4, r0
 8007e74:	0964      	lsrs	r4, r4, #5
 8007e76:	4635      	mov	r5, r6
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	4616      	mov	r6, r2
 8007e7e:	3201      	adds	r2, #1
 8007e80:	7830      	ldrb	r0, [r6, #0]
 8007e82:	f7ff ff9b 	bl	8007dbc <__hexdig_fun>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d1f8      	bne.n	8007e7c <__gethex+0x94>
 8007e8a:	9901      	ldr	r1, [sp, #4]
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f001 f9c6 	bl	8009220 <strncmp>
 8007e94:	b980      	cbnz	r0, 8007eb8 <__gethex+0xd0>
 8007e96:	b94d      	cbnz	r5, 8007eac <__gethex+0xc4>
 8007e98:	eb06 050a 	add.w	r5, r6, sl
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4616      	mov	r6, r2
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	7830      	ldrb	r0, [r6, #0]
 8007ea4:	f7ff ff8a 	bl	8007dbc <__hexdig_fun>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1f8      	bne.n	8007e9e <__gethex+0xb6>
 8007eac:	1bad      	subs	r5, r5, r6
 8007eae:	00ad      	lsls	r5, r5, #2
 8007eb0:	e004      	b.n	8007ebc <__gethex+0xd4>
 8007eb2:	2400      	movs	r4, #0
 8007eb4:	4625      	mov	r5, r4
 8007eb6:	e7e0      	b.n	8007e7a <__gethex+0x92>
 8007eb8:	2d00      	cmp	r5, #0
 8007eba:	d1f7      	bne.n	8007eac <__gethex+0xc4>
 8007ebc:	7833      	ldrb	r3, [r6, #0]
 8007ebe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ec2:	2b50      	cmp	r3, #80	; 0x50
 8007ec4:	d13b      	bne.n	8007f3e <__gethex+0x156>
 8007ec6:	7873      	ldrb	r3, [r6, #1]
 8007ec8:	2b2b      	cmp	r3, #43	; 0x2b
 8007eca:	d02c      	beq.n	8007f26 <__gethex+0x13e>
 8007ecc:	2b2d      	cmp	r3, #45	; 0x2d
 8007ece:	d02e      	beq.n	8007f2e <__gethex+0x146>
 8007ed0:	1c71      	adds	r1, r6, #1
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	7808      	ldrb	r0, [r1, #0]
 8007ed8:	f7ff ff70 	bl	8007dbc <__hexdig_fun>
 8007edc:	1e43      	subs	r3, r0, #1
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b18      	cmp	r3, #24
 8007ee2:	d82c      	bhi.n	8007f3e <__gethex+0x156>
 8007ee4:	f1a0 0210 	sub.w	r2, r0, #16
 8007ee8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007eec:	f7ff ff66 	bl	8007dbc <__hexdig_fun>
 8007ef0:	1e43      	subs	r3, r0, #1
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b18      	cmp	r3, #24
 8007ef6:	d91d      	bls.n	8007f34 <__gethex+0x14c>
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	d000      	beq.n	8007f00 <__gethex+0x118>
 8007efe:	4252      	negs	r2, r2
 8007f00:	4415      	add	r5, r2
 8007f02:	f8cb 1000 	str.w	r1, [fp]
 8007f06:	b1e4      	cbz	r4, 8007f42 <__gethex+0x15a>
 8007f08:	9b00      	ldr	r3, [sp, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bf14      	ite	ne
 8007f0e:	2700      	movne	r7, #0
 8007f10:	2706      	moveq	r7, #6
 8007f12:	4638      	mov	r0, r7
 8007f14:	b009      	add	sp, #36	; 0x24
 8007f16:	ecbd 8b02 	vpop	{d8}
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1e:	463e      	mov	r6, r7
 8007f20:	4625      	mov	r5, r4
 8007f22:	2401      	movs	r4, #1
 8007f24:	e7ca      	b.n	8007ebc <__gethex+0xd4>
 8007f26:	f04f 0900 	mov.w	r9, #0
 8007f2a:	1cb1      	adds	r1, r6, #2
 8007f2c:	e7d3      	b.n	8007ed6 <__gethex+0xee>
 8007f2e:	f04f 0901 	mov.w	r9, #1
 8007f32:	e7fa      	b.n	8007f2a <__gethex+0x142>
 8007f34:	230a      	movs	r3, #10
 8007f36:	fb03 0202 	mla	r2, r3, r2, r0
 8007f3a:	3a10      	subs	r2, #16
 8007f3c:	e7d4      	b.n	8007ee8 <__gethex+0x100>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	e7df      	b.n	8007f02 <__gethex+0x11a>
 8007f42:	1bf3      	subs	r3, r6, r7
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4621      	mov	r1, r4
 8007f48:	2b07      	cmp	r3, #7
 8007f4a:	dc0b      	bgt.n	8007f64 <__gethex+0x17c>
 8007f4c:	ee18 0a10 	vmov	r0, s16
 8007f50:	f000 fa7e 	bl	8008450 <_Balloc>
 8007f54:	4604      	mov	r4, r0
 8007f56:	b940      	cbnz	r0, 8007f6a <__gethex+0x182>
 8007f58:	4b65      	ldr	r3, [pc, #404]	; (80080f0 <__gethex+0x308>)
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	21de      	movs	r1, #222	; 0xde
 8007f5e:	4865      	ldr	r0, [pc, #404]	; (80080f4 <__gethex+0x30c>)
 8007f60:	f001 f97e 	bl	8009260 <__assert_func>
 8007f64:	3101      	adds	r1, #1
 8007f66:	105b      	asrs	r3, r3, #1
 8007f68:	e7ee      	b.n	8007f48 <__gethex+0x160>
 8007f6a:	f100 0914 	add.w	r9, r0, #20
 8007f6e:	f04f 0b00 	mov.w	fp, #0
 8007f72:	f1ca 0301 	rsb	r3, sl, #1
 8007f76:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f7a:	f8cd b000 	str.w	fp, [sp]
 8007f7e:	9306      	str	r3, [sp, #24]
 8007f80:	42b7      	cmp	r7, r6
 8007f82:	d340      	bcc.n	8008006 <__gethex+0x21e>
 8007f84:	9802      	ldr	r0, [sp, #8]
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	f840 3b04 	str.w	r3, [r0], #4
 8007f8c:	eba0 0009 	sub.w	r0, r0, r9
 8007f90:	1080      	asrs	r0, r0, #2
 8007f92:	0146      	lsls	r6, r0, #5
 8007f94:	6120      	str	r0, [r4, #16]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fb50 	bl	800863c <__hi0bits>
 8007f9c:	1a30      	subs	r0, r6, r0
 8007f9e:	f8d8 6000 	ldr.w	r6, [r8]
 8007fa2:	42b0      	cmp	r0, r6
 8007fa4:	dd63      	ble.n	800806e <__gethex+0x286>
 8007fa6:	1b87      	subs	r7, r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 feea 	bl	8008d84 <__any_on>
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	b1a8      	cbz	r0, 8007fe0 <__gethex+0x1f8>
 8007fb4:	1e7b      	subs	r3, r7, #1
 8007fb6:	1159      	asrs	r1, r3, #5
 8007fb8:	f003 021f 	and.w	r2, r3, #31
 8007fbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007fc0:	f04f 0a01 	mov.w	sl, #1
 8007fc4:	fa0a f202 	lsl.w	r2, sl, r2
 8007fc8:	420a      	tst	r2, r1
 8007fca:	d009      	beq.n	8007fe0 <__gethex+0x1f8>
 8007fcc:	4553      	cmp	r3, sl
 8007fce:	dd05      	ble.n	8007fdc <__gethex+0x1f4>
 8007fd0:	1eb9      	subs	r1, r7, #2
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fed6 	bl	8008d84 <__any_on>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d145      	bne.n	8008068 <__gethex+0x280>
 8007fdc:	f04f 0a02 	mov.w	sl, #2
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff fe98 	bl	8007d18 <rshift>
 8007fe8:	443d      	add	r5, r7
 8007fea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fee:	42ab      	cmp	r3, r5
 8007ff0:	da4c      	bge.n	800808c <__gethex+0x2a4>
 8007ff2:	ee18 0a10 	vmov	r0, s16
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f000 fa6a 	bl	80084d0 <_Bfree>
 8007ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ffe:	2300      	movs	r3, #0
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	27a3      	movs	r7, #163	; 0xa3
 8008004:	e785      	b.n	8007f12 <__gethex+0x12a>
 8008006:	1e73      	subs	r3, r6, #1
 8008008:	9a05      	ldr	r2, [sp, #20]
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008010:	4293      	cmp	r3, r2
 8008012:	d019      	beq.n	8008048 <__gethex+0x260>
 8008014:	f1bb 0f20 	cmp.w	fp, #32
 8008018:	d107      	bne.n	800802a <__gethex+0x242>
 800801a:	9b02      	ldr	r3, [sp, #8]
 800801c:	9a00      	ldr	r2, [sp, #0]
 800801e:	f843 2b04 	str.w	r2, [r3], #4
 8008022:	9302      	str	r3, [sp, #8]
 8008024:	2300      	movs	r3, #0
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	469b      	mov	fp, r3
 800802a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800802e:	f7ff fec5 	bl	8007dbc <__hexdig_fun>
 8008032:	9b00      	ldr	r3, [sp, #0]
 8008034:	f000 000f 	and.w	r0, r0, #15
 8008038:	fa00 f00b 	lsl.w	r0, r0, fp
 800803c:	4303      	orrs	r3, r0
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	f10b 0b04 	add.w	fp, fp, #4
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	e00d      	b.n	8008064 <__gethex+0x27c>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	9a06      	ldr	r2, [sp, #24]
 800804c:	4413      	add	r3, r2
 800804e:	42bb      	cmp	r3, r7
 8008050:	d3e0      	bcc.n	8008014 <__gethex+0x22c>
 8008052:	4618      	mov	r0, r3
 8008054:	9901      	ldr	r1, [sp, #4]
 8008056:	9307      	str	r3, [sp, #28]
 8008058:	4652      	mov	r2, sl
 800805a:	f001 f8e1 	bl	8009220 <strncmp>
 800805e:	9b07      	ldr	r3, [sp, #28]
 8008060:	2800      	cmp	r0, #0
 8008062:	d1d7      	bne.n	8008014 <__gethex+0x22c>
 8008064:	461e      	mov	r6, r3
 8008066:	e78b      	b.n	8007f80 <__gethex+0x198>
 8008068:	f04f 0a03 	mov.w	sl, #3
 800806c:	e7b8      	b.n	8007fe0 <__gethex+0x1f8>
 800806e:	da0a      	bge.n	8008086 <__gethex+0x29e>
 8008070:	1a37      	subs	r7, r6, r0
 8008072:	4621      	mov	r1, r4
 8008074:	ee18 0a10 	vmov	r0, s16
 8008078:	463a      	mov	r2, r7
 800807a:	f000 fc45 	bl	8008908 <__lshift>
 800807e:	1bed      	subs	r5, r5, r7
 8008080:	4604      	mov	r4, r0
 8008082:	f100 0914 	add.w	r9, r0, #20
 8008086:	f04f 0a00 	mov.w	sl, #0
 800808a:	e7ae      	b.n	8007fea <__gethex+0x202>
 800808c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008090:	42a8      	cmp	r0, r5
 8008092:	dd72      	ble.n	800817a <__gethex+0x392>
 8008094:	1b45      	subs	r5, r0, r5
 8008096:	42ae      	cmp	r6, r5
 8008098:	dc36      	bgt.n	8008108 <__gethex+0x320>
 800809a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d02a      	beq.n	80080f8 <__gethex+0x310>
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d02c      	beq.n	8008100 <__gethex+0x318>
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d115      	bne.n	80080d6 <__gethex+0x2ee>
 80080aa:	42ae      	cmp	r6, r5
 80080ac:	d113      	bne.n	80080d6 <__gethex+0x2ee>
 80080ae:	2e01      	cmp	r6, #1
 80080b0:	d10b      	bne.n	80080ca <__gethex+0x2e2>
 80080b2:	9a04      	ldr	r2, [sp, #16]
 80080b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	2301      	movs	r3, #1
 80080bc:	6123      	str	r3, [r4, #16]
 80080be:	f8c9 3000 	str.w	r3, [r9]
 80080c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c4:	2762      	movs	r7, #98	; 0x62
 80080c6:	601c      	str	r4, [r3, #0]
 80080c8:	e723      	b.n	8007f12 <__gethex+0x12a>
 80080ca:	1e71      	subs	r1, r6, #1
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fe59 	bl	8008d84 <__any_on>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d1ed      	bne.n	80080b2 <__gethex+0x2ca>
 80080d6:	ee18 0a10 	vmov	r0, s16
 80080da:	4621      	mov	r1, r4
 80080dc:	f000 f9f8 	bl	80084d0 <_Bfree>
 80080e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080e2:	2300      	movs	r3, #0
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	2750      	movs	r7, #80	; 0x50
 80080e8:	e713      	b.n	8007f12 <__gethex+0x12a>
 80080ea:	bf00      	nop
 80080ec:	08009fb8 	.word	0x08009fb8
 80080f0:	08009f3b 	.word	0x08009f3b
 80080f4:	08009f4c 	.word	0x08009f4c
 80080f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1eb      	bne.n	80080d6 <__gethex+0x2ee>
 80080fe:	e7d8      	b.n	80080b2 <__gethex+0x2ca>
 8008100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1d5      	bne.n	80080b2 <__gethex+0x2ca>
 8008106:	e7e6      	b.n	80080d6 <__gethex+0x2ee>
 8008108:	1e6f      	subs	r7, r5, #1
 800810a:	f1ba 0f00 	cmp.w	sl, #0
 800810e:	d131      	bne.n	8008174 <__gethex+0x38c>
 8008110:	b127      	cbz	r7, 800811c <__gethex+0x334>
 8008112:	4639      	mov	r1, r7
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fe35 	bl	8008d84 <__any_on>
 800811a:	4682      	mov	sl, r0
 800811c:	117b      	asrs	r3, r7, #5
 800811e:	2101      	movs	r1, #1
 8008120:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008124:	f007 071f 	and.w	r7, r7, #31
 8008128:	fa01 f707 	lsl.w	r7, r1, r7
 800812c:	421f      	tst	r7, r3
 800812e:	4629      	mov	r1, r5
 8008130:	4620      	mov	r0, r4
 8008132:	bf18      	it	ne
 8008134:	f04a 0a02 	orrne.w	sl, sl, #2
 8008138:	1b76      	subs	r6, r6, r5
 800813a:	f7ff fded 	bl	8007d18 <rshift>
 800813e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008142:	2702      	movs	r7, #2
 8008144:	f1ba 0f00 	cmp.w	sl, #0
 8008148:	d048      	beq.n	80081dc <__gethex+0x3f4>
 800814a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d015      	beq.n	800817e <__gethex+0x396>
 8008152:	2b03      	cmp	r3, #3
 8008154:	d017      	beq.n	8008186 <__gethex+0x39e>
 8008156:	2b01      	cmp	r3, #1
 8008158:	d109      	bne.n	800816e <__gethex+0x386>
 800815a:	f01a 0f02 	tst.w	sl, #2
 800815e:	d006      	beq.n	800816e <__gethex+0x386>
 8008160:	f8d9 0000 	ldr.w	r0, [r9]
 8008164:	ea4a 0a00 	orr.w	sl, sl, r0
 8008168:	f01a 0f01 	tst.w	sl, #1
 800816c:	d10e      	bne.n	800818c <__gethex+0x3a4>
 800816e:	f047 0710 	orr.w	r7, r7, #16
 8008172:	e033      	b.n	80081dc <__gethex+0x3f4>
 8008174:	f04f 0a01 	mov.w	sl, #1
 8008178:	e7d0      	b.n	800811c <__gethex+0x334>
 800817a:	2701      	movs	r7, #1
 800817c:	e7e2      	b.n	8008144 <__gethex+0x35c>
 800817e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008180:	f1c3 0301 	rsb	r3, r3, #1
 8008184:	9315      	str	r3, [sp, #84]	; 0x54
 8008186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f0      	beq.n	800816e <__gethex+0x386>
 800818c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008190:	f104 0314 	add.w	r3, r4, #20
 8008194:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008198:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800819c:	f04f 0c00 	mov.w	ip, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80081aa:	d01c      	beq.n	80081e6 <__gethex+0x3fe>
 80081ac:	3201      	adds	r2, #1
 80081ae:	6002      	str	r2, [r0, #0]
 80081b0:	2f02      	cmp	r7, #2
 80081b2:	f104 0314 	add.w	r3, r4, #20
 80081b6:	d13f      	bne.n	8008238 <__gethex+0x450>
 80081b8:	f8d8 2000 	ldr.w	r2, [r8]
 80081bc:	3a01      	subs	r2, #1
 80081be:	42b2      	cmp	r2, r6
 80081c0:	d10a      	bne.n	80081d8 <__gethex+0x3f0>
 80081c2:	1171      	asrs	r1, r6, #5
 80081c4:	2201      	movs	r2, #1
 80081c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081ca:	f006 061f 	and.w	r6, r6, #31
 80081ce:	fa02 f606 	lsl.w	r6, r2, r6
 80081d2:	421e      	tst	r6, r3
 80081d4:	bf18      	it	ne
 80081d6:	4617      	movne	r7, r2
 80081d8:	f047 0720 	orr.w	r7, r7, #32
 80081dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081de:	601c      	str	r4, [r3, #0]
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	601d      	str	r5, [r3, #0]
 80081e4:	e695      	b.n	8007f12 <__gethex+0x12a>
 80081e6:	4299      	cmp	r1, r3
 80081e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80081ec:	d8d8      	bhi.n	80081a0 <__gethex+0x3b8>
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	459b      	cmp	fp, r3
 80081f2:	db19      	blt.n	8008228 <__gethex+0x440>
 80081f4:	6861      	ldr	r1, [r4, #4]
 80081f6:	ee18 0a10 	vmov	r0, s16
 80081fa:	3101      	adds	r1, #1
 80081fc:	f000 f928 	bl	8008450 <_Balloc>
 8008200:	4681      	mov	r9, r0
 8008202:	b918      	cbnz	r0, 800820c <__gethex+0x424>
 8008204:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <__gethex+0x488>)
 8008206:	4602      	mov	r2, r0
 8008208:	2184      	movs	r1, #132	; 0x84
 800820a:	e6a8      	b.n	8007f5e <__gethex+0x176>
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	3202      	adds	r2, #2
 8008210:	f104 010c 	add.w	r1, r4, #12
 8008214:	0092      	lsls	r2, r2, #2
 8008216:	300c      	adds	r0, #12
 8008218:	f000 f90c 	bl	8008434 <memcpy>
 800821c:	4621      	mov	r1, r4
 800821e:	ee18 0a10 	vmov	r0, s16
 8008222:	f000 f955 	bl	80084d0 <_Bfree>
 8008226:	464c      	mov	r4, r9
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008230:	6122      	str	r2, [r4, #16]
 8008232:	2201      	movs	r2, #1
 8008234:	615a      	str	r2, [r3, #20]
 8008236:	e7bb      	b.n	80081b0 <__gethex+0x3c8>
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	455a      	cmp	r2, fp
 800823c:	dd0b      	ble.n	8008256 <__gethex+0x46e>
 800823e:	2101      	movs	r1, #1
 8008240:	4620      	mov	r0, r4
 8008242:	f7ff fd69 	bl	8007d18 <rshift>
 8008246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800824a:	3501      	adds	r5, #1
 800824c:	42ab      	cmp	r3, r5
 800824e:	f6ff aed0 	blt.w	8007ff2 <__gethex+0x20a>
 8008252:	2701      	movs	r7, #1
 8008254:	e7c0      	b.n	80081d8 <__gethex+0x3f0>
 8008256:	f016 061f 	ands.w	r6, r6, #31
 800825a:	d0fa      	beq.n	8008252 <__gethex+0x46a>
 800825c:	449a      	add	sl, r3
 800825e:	f1c6 0620 	rsb	r6, r6, #32
 8008262:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008266:	f000 f9e9 	bl	800863c <__hi0bits>
 800826a:	42b0      	cmp	r0, r6
 800826c:	dbe7      	blt.n	800823e <__gethex+0x456>
 800826e:	e7f0      	b.n	8008252 <__gethex+0x46a>
 8008270:	08009f3b 	.word	0x08009f3b

08008274 <L_shift>:
 8008274:	f1c2 0208 	rsb	r2, r2, #8
 8008278:	0092      	lsls	r2, r2, #2
 800827a:	b570      	push	{r4, r5, r6, lr}
 800827c:	f1c2 0620 	rsb	r6, r2, #32
 8008280:	6843      	ldr	r3, [r0, #4]
 8008282:	6804      	ldr	r4, [r0, #0]
 8008284:	fa03 f506 	lsl.w	r5, r3, r6
 8008288:	432c      	orrs	r4, r5
 800828a:	40d3      	lsrs	r3, r2
 800828c:	6004      	str	r4, [r0, #0]
 800828e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008292:	4288      	cmp	r0, r1
 8008294:	d3f4      	bcc.n	8008280 <L_shift+0xc>
 8008296:	bd70      	pop	{r4, r5, r6, pc}

08008298 <__match>:
 8008298:	b530      	push	{r4, r5, lr}
 800829a:	6803      	ldr	r3, [r0, #0]
 800829c:	3301      	adds	r3, #1
 800829e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a2:	b914      	cbnz	r4, 80082aa <__match+0x12>
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	2001      	movs	r0, #1
 80082a8:	bd30      	pop	{r4, r5, pc}
 80082aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80082b2:	2d19      	cmp	r5, #25
 80082b4:	bf98      	it	ls
 80082b6:	3220      	addls	r2, #32
 80082b8:	42a2      	cmp	r2, r4
 80082ba:	d0f0      	beq.n	800829e <__match+0x6>
 80082bc:	2000      	movs	r0, #0
 80082be:	e7f3      	b.n	80082a8 <__match+0x10>

080082c0 <__hexnan>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	680b      	ldr	r3, [r1, #0]
 80082c6:	6801      	ldr	r1, [r0, #0]
 80082c8:	115e      	asrs	r6, r3, #5
 80082ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082ce:	f013 031f 	ands.w	r3, r3, #31
 80082d2:	b087      	sub	sp, #28
 80082d4:	bf18      	it	ne
 80082d6:	3604      	addne	r6, #4
 80082d8:	2500      	movs	r5, #0
 80082da:	1f37      	subs	r7, r6, #4
 80082dc:	4682      	mov	sl, r0
 80082de:	4690      	mov	r8, r2
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80082e6:	46b9      	mov	r9, r7
 80082e8:	463c      	mov	r4, r7
 80082ea:	9502      	str	r5, [sp, #8]
 80082ec:	46ab      	mov	fp, r5
 80082ee:	784a      	ldrb	r2, [r1, #1]
 80082f0:	1c4b      	adds	r3, r1, #1
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	b342      	cbz	r2, 8008348 <__hexnan+0x88>
 80082f6:	4610      	mov	r0, r2
 80082f8:	9105      	str	r1, [sp, #20]
 80082fa:	9204      	str	r2, [sp, #16]
 80082fc:	f7ff fd5e 	bl	8007dbc <__hexdig_fun>
 8008300:	2800      	cmp	r0, #0
 8008302:	d14f      	bne.n	80083a4 <__hexnan+0xe4>
 8008304:	9a04      	ldr	r2, [sp, #16]
 8008306:	9905      	ldr	r1, [sp, #20]
 8008308:	2a20      	cmp	r2, #32
 800830a:	d818      	bhi.n	800833e <__hexnan+0x7e>
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	459b      	cmp	fp, r3
 8008310:	dd13      	ble.n	800833a <__hexnan+0x7a>
 8008312:	454c      	cmp	r4, r9
 8008314:	d206      	bcs.n	8008324 <__hexnan+0x64>
 8008316:	2d07      	cmp	r5, #7
 8008318:	dc04      	bgt.n	8008324 <__hexnan+0x64>
 800831a:	462a      	mov	r2, r5
 800831c:	4649      	mov	r1, r9
 800831e:	4620      	mov	r0, r4
 8008320:	f7ff ffa8 	bl	8008274 <L_shift>
 8008324:	4544      	cmp	r4, r8
 8008326:	d950      	bls.n	80083ca <__hexnan+0x10a>
 8008328:	2300      	movs	r3, #0
 800832a:	f1a4 0904 	sub.w	r9, r4, #4
 800832e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008332:	f8cd b008 	str.w	fp, [sp, #8]
 8008336:	464c      	mov	r4, r9
 8008338:	461d      	mov	r5, r3
 800833a:	9903      	ldr	r1, [sp, #12]
 800833c:	e7d7      	b.n	80082ee <__hexnan+0x2e>
 800833e:	2a29      	cmp	r2, #41	; 0x29
 8008340:	d156      	bne.n	80083f0 <__hexnan+0x130>
 8008342:	3102      	adds	r1, #2
 8008344:	f8ca 1000 	str.w	r1, [sl]
 8008348:	f1bb 0f00 	cmp.w	fp, #0
 800834c:	d050      	beq.n	80083f0 <__hexnan+0x130>
 800834e:	454c      	cmp	r4, r9
 8008350:	d206      	bcs.n	8008360 <__hexnan+0xa0>
 8008352:	2d07      	cmp	r5, #7
 8008354:	dc04      	bgt.n	8008360 <__hexnan+0xa0>
 8008356:	462a      	mov	r2, r5
 8008358:	4649      	mov	r1, r9
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff ff8a 	bl	8008274 <L_shift>
 8008360:	4544      	cmp	r4, r8
 8008362:	d934      	bls.n	80083ce <__hexnan+0x10e>
 8008364:	f1a8 0204 	sub.w	r2, r8, #4
 8008368:	4623      	mov	r3, r4
 800836a:	f853 1b04 	ldr.w	r1, [r3], #4
 800836e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008372:	429f      	cmp	r7, r3
 8008374:	d2f9      	bcs.n	800836a <__hexnan+0xaa>
 8008376:	1b3b      	subs	r3, r7, r4
 8008378:	f023 0303 	bic.w	r3, r3, #3
 800837c:	3304      	adds	r3, #4
 800837e:	3401      	adds	r4, #1
 8008380:	3e03      	subs	r6, #3
 8008382:	42b4      	cmp	r4, r6
 8008384:	bf88      	it	hi
 8008386:	2304      	movhi	r3, #4
 8008388:	4443      	add	r3, r8
 800838a:	2200      	movs	r2, #0
 800838c:	f843 2b04 	str.w	r2, [r3], #4
 8008390:	429f      	cmp	r7, r3
 8008392:	d2fb      	bcs.n	800838c <__hexnan+0xcc>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	b91b      	cbnz	r3, 80083a0 <__hexnan+0xe0>
 8008398:	4547      	cmp	r7, r8
 800839a:	d127      	bne.n	80083ec <__hexnan+0x12c>
 800839c:	2301      	movs	r3, #1
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	2005      	movs	r0, #5
 80083a2:	e026      	b.n	80083f2 <__hexnan+0x132>
 80083a4:	3501      	adds	r5, #1
 80083a6:	2d08      	cmp	r5, #8
 80083a8:	f10b 0b01 	add.w	fp, fp, #1
 80083ac:	dd06      	ble.n	80083bc <__hexnan+0xfc>
 80083ae:	4544      	cmp	r4, r8
 80083b0:	d9c3      	bls.n	800833a <__hexnan+0x7a>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80083b8:	2501      	movs	r5, #1
 80083ba:	3c04      	subs	r4, #4
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	f000 000f 	and.w	r0, r0, #15
 80083c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80083c6:	6022      	str	r2, [r4, #0]
 80083c8:	e7b7      	b.n	800833a <__hexnan+0x7a>
 80083ca:	2508      	movs	r5, #8
 80083cc:	e7b5      	b.n	800833a <__hexnan+0x7a>
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0df      	beq.n	8008394 <__hexnan+0xd4>
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	f1c3 0320 	rsb	r3, r3, #32
 80083dc:	fa22 f303 	lsr.w	r3, r2, r3
 80083e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80083e4:	401a      	ands	r2, r3
 80083e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80083ea:	e7d3      	b.n	8008394 <__hexnan+0xd4>
 80083ec:	3f04      	subs	r7, #4
 80083ee:	e7d1      	b.n	8008394 <__hexnan+0xd4>
 80083f0:	2004      	movs	r0, #4
 80083f2:	b007      	add	sp, #28
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083f8 <_localeconv_r>:
 80083f8:	4800      	ldr	r0, [pc, #0]	; (80083fc <_localeconv_r+0x4>)
 80083fa:	4770      	bx	lr
 80083fc:	20000168 	.word	0x20000168

08008400 <malloc>:
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <malloc+0xc>)
 8008402:	4601      	mov	r1, r0
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f000 bd3d 	b.w	8008e84 <_malloc_r>
 800840a:	bf00      	nop
 800840c:	20000010 	.word	0x20000010

08008410 <__ascii_mbtowc>:
 8008410:	b082      	sub	sp, #8
 8008412:	b901      	cbnz	r1, 8008416 <__ascii_mbtowc+0x6>
 8008414:	a901      	add	r1, sp, #4
 8008416:	b142      	cbz	r2, 800842a <__ascii_mbtowc+0x1a>
 8008418:	b14b      	cbz	r3, 800842e <__ascii_mbtowc+0x1e>
 800841a:	7813      	ldrb	r3, [r2, #0]
 800841c:	600b      	str	r3, [r1, #0]
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	1e10      	subs	r0, r2, #0
 8008422:	bf18      	it	ne
 8008424:	2001      	movne	r0, #1
 8008426:	b002      	add	sp, #8
 8008428:	4770      	bx	lr
 800842a:	4610      	mov	r0, r2
 800842c:	e7fb      	b.n	8008426 <__ascii_mbtowc+0x16>
 800842e:	f06f 0001 	mvn.w	r0, #1
 8008432:	e7f8      	b.n	8008426 <__ascii_mbtowc+0x16>

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844a:	4291      	cmp	r1, r2
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <_Balloc>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	b976      	cbnz	r6, 8008478 <_Balloc+0x28>
 800845a:	2010      	movs	r0, #16
 800845c:	f7ff ffd0 	bl	8008400 <malloc>
 8008460:	4602      	mov	r2, r0
 8008462:	6260      	str	r0, [r4, #36]	; 0x24
 8008464:	b920      	cbnz	r0, 8008470 <_Balloc+0x20>
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <_Balloc+0x78>)
 8008468:	4818      	ldr	r0, [pc, #96]	; (80084cc <_Balloc+0x7c>)
 800846a:	2166      	movs	r1, #102	; 0x66
 800846c:	f000 fef8 	bl	8009260 <__assert_func>
 8008470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008474:	6006      	str	r6, [r0, #0]
 8008476:	60c6      	str	r6, [r0, #12]
 8008478:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800847a:	68f3      	ldr	r3, [r6, #12]
 800847c:	b183      	cbz	r3, 80084a0 <_Balloc+0x50>
 800847e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008486:	b9b8      	cbnz	r0, 80084b8 <_Balloc+0x68>
 8008488:	2101      	movs	r1, #1
 800848a:	fa01 f605 	lsl.w	r6, r1, r5
 800848e:	1d72      	adds	r2, r6, #5
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fc97 	bl	8008dc6 <_calloc_r>
 8008498:	b160      	cbz	r0, 80084b4 <_Balloc+0x64>
 800849a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800849e:	e00e      	b.n	80084be <_Balloc+0x6e>
 80084a0:	2221      	movs	r2, #33	; 0x21
 80084a2:	2104      	movs	r1, #4
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fc8e 	bl	8008dc6 <_calloc_r>
 80084aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ac:	60f0      	str	r0, [r6, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e4      	bne.n	800847e <_Balloc+0x2e>
 80084b4:	2000      	movs	r0, #0
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	6802      	ldr	r2, [r0, #0]
 80084ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084be:	2300      	movs	r3, #0
 80084c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084c4:	e7f7      	b.n	80084b6 <_Balloc+0x66>
 80084c6:	bf00      	nop
 80084c8:	08009ec5 	.word	0x08009ec5
 80084cc:	08009fcc 	.word	0x08009fcc

080084d0 <_Bfree>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084d4:	4605      	mov	r5, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b976      	cbnz	r6, 80084f8 <_Bfree+0x28>
 80084da:	2010      	movs	r0, #16
 80084dc:	f7ff ff90 	bl	8008400 <malloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	6268      	str	r0, [r5, #36]	; 0x24
 80084e4:	b920      	cbnz	r0, 80084f0 <_Bfree+0x20>
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <_Bfree+0x3c>)
 80084e8:	4809      	ldr	r0, [pc, #36]	; (8008510 <_Bfree+0x40>)
 80084ea:	218a      	movs	r1, #138	; 0x8a
 80084ec:	f000 feb8 	bl	8009260 <__assert_func>
 80084f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f4:	6006      	str	r6, [r0, #0]
 80084f6:	60c6      	str	r6, [r0, #12]
 80084f8:	b13c      	cbz	r4, 800850a <_Bfree+0x3a>
 80084fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084fc:	6862      	ldr	r2, [r4, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008504:	6021      	str	r1, [r4, #0]
 8008506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	08009ec5 	.word	0x08009ec5
 8008510:	08009fcc 	.word	0x08009fcc

08008514 <__multadd>:
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	690e      	ldr	r6, [r1, #16]
 800851a:	4607      	mov	r7, r0
 800851c:	4698      	mov	r8, r3
 800851e:	460c      	mov	r4, r1
 8008520:	f101 0014 	add.w	r0, r1, #20
 8008524:	2300      	movs	r3, #0
 8008526:	6805      	ldr	r5, [r0, #0]
 8008528:	b2a9      	uxth	r1, r5
 800852a:	fb02 8101 	mla	r1, r2, r1, r8
 800852e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008532:	0c2d      	lsrs	r5, r5, #16
 8008534:	fb02 c505 	mla	r5, r2, r5, ip
 8008538:	b289      	uxth	r1, r1
 800853a:	3301      	adds	r3, #1
 800853c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008540:	429e      	cmp	r6, r3
 8008542:	f840 1b04 	str.w	r1, [r0], #4
 8008546:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800854a:	dcec      	bgt.n	8008526 <__multadd+0x12>
 800854c:	f1b8 0f00 	cmp.w	r8, #0
 8008550:	d022      	beq.n	8008598 <__multadd+0x84>
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	42b3      	cmp	r3, r6
 8008556:	dc19      	bgt.n	800858c <__multadd+0x78>
 8008558:	6861      	ldr	r1, [r4, #4]
 800855a:	4638      	mov	r0, r7
 800855c:	3101      	adds	r1, #1
 800855e:	f7ff ff77 	bl	8008450 <_Balloc>
 8008562:	4605      	mov	r5, r0
 8008564:	b928      	cbnz	r0, 8008572 <__multadd+0x5e>
 8008566:	4602      	mov	r2, r0
 8008568:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <__multadd+0x8c>)
 800856a:	480e      	ldr	r0, [pc, #56]	; (80085a4 <__multadd+0x90>)
 800856c:	21b5      	movs	r1, #181	; 0xb5
 800856e:	f000 fe77 	bl	8009260 <__assert_func>
 8008572:	6922      	ldr	r2, [r4, #16]
 8008574:	3202      	adds	r2, #2
 8008576:	f104 010c 	add.w	r1, r4, #12
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	300c      	adds	r0, #12
 800857e:	f7ff ff59 	bl	8008434 <memcpy>
 8008582:	4621      	mov	r1, r4
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff ffa3 	bl	80084d0 <_Bfree>
 800858a:	462c      	mov	r4, r5
 800858c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008590:	3601      	adds	r6, #1
 8008592:	f8c3 8014 	str.w	r8, [r3, #20]
 8008596:	6126      	str	r6, [r4, #16]
 8008598:	4620      	mov	r0, r4
 800859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859e:	bf00      	nop
 80085a0:	08009f3b 	.word	0x08009f3b
 80085a4:	08009fcc 	.word	0x08009fcc

080085a8 <__s2b>:
 80085a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ac:	460c      	mov	r4, r1
 80085ae:	4615      	mov	r5, r2
 80085b0:	461f      	mov	r7, r3
 80085b2:	2209      	movs	r2, #9
 80085b4:	3308      	adds	r3, #8
 80085b6:	4606      	mov	r6, r0
 80085b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085bc:	2100      	movs	r1, #0
 80085be:	2201      	movs	r2, #1
 80085c0:	429a      	cmp	r2, r3
 80085c2:	db09      	blt.n	80085d8 <__s2b+0x30>
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff ff43 	bl	8008450 <_Balloc>
 80085ca:	b940      	cbnz	r0, 80085de <__s2b+0x36>
 80085cc:	4602      	mov	r2, r0
 80085ce:	4b19      	ldr	r3, [pc, #100]	; (8008634 <__s2b+0x8c>)
 80085d0:	4819      	ldr	r0, [pc, #100]	; (8008638 <__s2b+0x90>)
 80085d2:	21ce      	movs	r1, #206	; 0xce
 80085d4:	f000 fe44 	bl	8009260 <__assert_func>
 80085d8:	0052      	lsls	r2, r2, #1
 80085da:	3101      	adds	r1, #1
 80085dc:	e7f0      	b.n	80085c0 <__s2b+0x18>
 80085de:	9b08      	ldr	r3, [sp, #32]
 80085e0:	6143      	str	r3, [r0, #20]
 80085e2:	2d09      	cmp	r5, #9
 80085e4:	f04f 0301 	mov.w	r3, #1
 80085e8:	6103      	str	r3, [r0, #16]
 80085ea:	dd16      	ble.n	800861a <__s2b+0x72>
 80085ec:	f104 0909 	add.w	r9, r4, #9
 80085f0:	46c8      	mov	r8, r9
 80085f2:	442c      	add	r4, r5
 80085f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085f8:	4601      	mov	r1, r0
 80085fa:	3b30      	subs	r3, #48	; 0x30
 80085fc:	220a      	movs	r2, #10
 80085fe:	4630      	mov	r0, r6
 8008600:	f7ff ff88 	bl	8008514 <__multadd>
 8008604:	45a0      	cmp	r8, r4
 8008606:	d1f5      	bne.n	80085f4 <__s2b+0x4c>
 8008608:	f1a5 0408 	sub.w	r4, r5, #8
 800860c:	444c      	add	r4, r9
 800860e:	1b2d      	subs	r5, r5, r4
 8008610:	1963      	adds	r3, r4, r5
 8008612:	42bb      	cmp	r3, r7
 8008614:	db04      	blt.n	8008620 <__s2b+0x78>
 8008616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861a:	340a      	adds	r4, #10
 800861c:	2509      	movs	r5, #9
 800861e:	e7f6      	b.n	800860e <__s2b+0x66>
 8008620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008624:	4601      	mov	r1, r0
 8008626:	3b30      	subs	r3, #48	; 0x30
 8008628:	220a      	movs	r2, #10
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff ff72 	bl	8008514 <__multadd>
 8008630:	e7ee      	b.n	8008610 <__s2b+0x68>
 8008632:	bf00      	nop
 8008634:	08009f3b 	.word	0x08009f3b
 8008638:	08009fcc 	.word	0x08009fcc

0800863c <__hi0bits>:
 800863c:	0c03      	lsrs	r3, r0, #16
 800863e:	041b      	lsls	r3, r3, #16
 8008640:	b9d3      	cbnz	r3, 8008678 <__hi0bits+0x3c>
 8008642:	0400      	lsls	r0, r0, #16
 8008644:	2310      	movs	r3, #16
 8008646:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800864a:	bf04      	itt	eq
 800864c:	0200      	lsleq	r0, r0, #8
 800864e:	3308      	addeq	r3, #8
 8008650:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008654:	bf04      	itt	eq
 8008656:	0100      	lsleq	r0, r0, #4
 8008658:	3304      	addeq	r3, #4
 800865a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800865e:	bf04      	itt	eq
 8008660:	0080      	lsleq	r0, r0, #2
 8008662:	3302      	addeq	r3, #2
 8008664:	2800      	cmp	r0, #0
 8008666:	db05      	blt.n	8008674 <__hi0bits+0x38>
 8008668:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800866c:	f103 0301 	add.w	r3, r3, #1
 8008670:	bf08      	it	eq
 8008672:	2320      	moveq	r3, #32
 8008674:	4618      	mov	r0, r3
 8008676:	4770      	bx	lr
 8008678:	2300      	movs	r3, #0
 800867a:	e7e4      	b.n	8008646 <__hi0bits+0xa>

0800867c <__lo0bits>:
 800867c:	6803      	ldr	r3, [r0, #0]
 800867e:	f013 0207 	ands.w	r2, r3, #7
 8008682:	4601      	mov	r1, r0
 8008684:	d00b      	beq.n	800869e <__lo0bits+0x22>
 8008686:	07da      	lsls	r2, r3, #31
 8008688:	d424      	bmi.n	80086d4 <__lo0bits+0x58>
 800868a:	0798      	lsls	r0, r3, #30
 800868c:	bf49      	itett	mi
 800868e:	085b      	lsrmi	r3, r3, #1
 8008690:	089b      	lsrpl	r3, r3, #2
 8008692:	2001      	movmi	r0, #1
 8008694:	600b      	strmi	r3, [r1, #0]
 8008696:	bf5c      	itt	pl
 8008698:	600b      	strpl	r3, [r1, #0]
 800869a:	2002      	movpl	r0, #2
 800869c:	4770      	bx	lr
 800869e:	b298      	uxth	r0, r3
 80086a0:	b9b0      	cbnz	r0, 80086d0 <__lo0bits+0x54>
 80086a2:	0c1b      	lsrs	r3, r3, #16
 80086a4:	2010      	movs	r0, #16
 80086a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086aa:	bf04      	itt	eq
 80086ac:	0a1b      	lsreq	r3, r3, #8
 80086ae:	3008      	addeq	r0, #8
 80086b0:	071a      	lsls	r2, r3, #28
 80086b2:	bf04      	itt	eq
 80086b4:	091b      	lsreq	r3, r3, #4
 80086b6:	3004      	addeq	r0, #4
 80086b8:	079a      	lsls	r2, r3, #30
 80086ba:	bf04      	itt	eq
 80086bc:	089b      	lsreq	r3, r3, #2
 80086be:	3002      	addeq	r0, #2
 80086c0:	07da      	lsls	r2, r3, #31
 80086c2:	d403      	bmi.n	80086cc <__lo0bits+0x50>
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	f100 0001 	add.w	r0, r0, #1
 80086ca:	d005      	beq.n	80086d8 <__lo0bits+0x5c>
 80086cc:	600b      	str	r3, [r1, #0]
 80086ce:	4770      	bx	lr
 80086d0:	4610      	mov	r0, r2
 80086d2:	e7e8      	b.n	80086a6 <__lo0bits+0x2a>
 80086d4:	2000      	movs	r0, #0
 80086d6:	4770      	bx	lr
 80086d8:	2020      	movs	r0, #32
 80086da:	4770      	bx	lr

080086dc <__i2b>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	460c      	mov	r4, r1
 80086e0:	2101      	movs	r1, #1
 80086e2:	f7ff feb5 	bl	8008450 <_Balloc>
 80086e6:	4602      	mov	r2, r0
 80086e8:	b928      	cbnz	r0, 80086f6 <__i2b+0x1a>
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <__i2b+0x24>)
 80086ec:	4805      	ldr	r0, [pc, #20]	; (8008704 <__i2b+0x28>)
 80086ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086f2:	f000 fdb5 	bl	8009260 <__assert_func>
 80086f6:	2301      	movs	r3, #1
 80086f8:	6144      	str	r4, [r0, #20]
 80086fa:	6103      	str	r3, [r0, #16]
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	bf00      	nop
 8008700:	08009f3b 	.word	0x08009f3b
 8008704:	08009fcc 	.word	0x08009fcc

08008708 <__multiply>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	4614      	mov	r4, r2
 800870e:	690a      	ldr	r2, [r1, #16]
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	429a      	cmp	r2, r3
 8008714:	bfb8      	it	lt
 8008716:	460b      	movlt	r3, r1
 8008718:	460d      	mov	r5, r1
 800871a:	bfbc      	itt	lt
 800871c:	4625      	movlt	r5, r4
 800871e:	461c      	movlt	r4, r3
 8008720:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008724:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008728:	68ab      	ldr	r3, [r5, #8]
 800872a:	6869      	ldr	r1, [r5, #4]
 800872c:	eb0a 0709 	add.w	r7, sl, r9
 8008730:	42bb      	cmp	r3, r7
 8008732:	b085      	sub	sp, #20
 8008734:	bfb8      	it	lt
 8008736:	3101      	addlt	r1, #1
 8008738:	f7ff fe8a 	bl	8008450 <_Balloc>
 800873c:	b930      	cbnz	r0, 800874c <__multiply+0x44>
 800873e:	4602      	mov	r2, r0
 8008740:	4b42      	ldr	r3, [pc, #264]	; (800884c <__multiply+0x144>)
 8008742:	4843      	ldr	r0, [pc, #268]	; (8008850 <__multiply+0x148>)
 8008744:	f240 115d 	movw	r1, #349	; 0x15d
 8008748:	f000 fd8a 	bl	8009260 <__assert_func>
 800874c:	f100 0614 	add.w	r6, r0, #20
 8008750:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008754:	4633      	mov	r3, r6
 8008756:	2200      	movs	r2, #0
 8008758:	4543      	cmp	r3, r8
 800875a:	d31e      	bcc.n	800879a <__multiply+0x92>
 800875c:	f105 0c14 	add.w	ip, r5, #20
 8008760:	f104 0314 	add.w	r3, r4, #20
 8008764:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008768:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800876c:	9202      	str	r2, [sp, #8]
 800876e:	ebac 0205 	sub.w	r2, ip, r5
 8008772:	3a15      	subs	r2, #21
 8008774:	f022 0203 	bic.w	r2, r2, #3
 8008778:	3204      	adds	r2, #4
 800877a:	f105 0115 	add.w	r1, r5, #21
 800877e:	458c      	cmp	ip, r1
 8008780:	bf38      	it	cc
 8008782:	2204      	movcc	r2, #4
 8008784:	9201      	str	r2, [sp, #4]
 8008786:	9a02      	ldr	r2, [sp, #8]
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	429a      	cmp	r2, r3
 800878c:	d808      	bhi.n	80087a0 <__multiply+0x98>
 800878e:	2f00      	cmp	r7, #0
 8008790:	dc55      	bgt.n	800883e <__multiply+0x136>
 8008792:	6107      	str	r7, [r0, #16]
 8008794:	b005      	add	sp, #20
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	f843 2b04 	str.w	r2, [r3], #4
 800879e:	e7db      	b.n	8008758 <__multiply+0x50>
 80087a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80087a4:	f1ba 0f00 	cmp.w	sl, #0
 80087a8:	d020      	beq.n	80087ec <__multiply+0xe4>
 80087aa:	f105 0e14 	add.w	lr, r5, #20
 80087ae:	46b1      	mov	r9, r6
 80087b0:	2200      	movs	r2, #0
 80087b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80087b6:	f8d9 b000 	ldr.w	fp, [r9]
 80087ba:	b2a1      	uxth	r1, r4
 80087bc:	fa1f fb8b 	uxth.w	fp, fp
 80087c0:	fb0a b101 	mla	r1, sl, r1, fp
 80087c4:	4411      	add	r1, r2
 80087c6:	f8d9 2000 	ldr.w	r2, [r9]
 80087ca:	0c24      	lsrs	r4, r4, #16
 80087cc:	0c12      	lsrs	r2, r2, #16
 80087ce:	fb0a 2404 	mla	r4, sl, r4, r2
 80087d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80087d6:	b289      	uxth	r1, r1
 80087d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80087dc:	45f4      	cmp	ip, lr
 80087de:	f849 1b04 	str.w	r1, [r9], #4
 80087e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80087e6:	d8e4      	bhi.n	80087b2 <__multiply+0xaa>
 80087e8:	9901      	ldr	r1, [sp, #4]
 80087ea:	5072      	str	r2, [r6, r1]
 80087ec:	9a03      	ldr	r2, [sp, #12]
 80087ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087f2:	3304      	adds	r3, #4
 80087f4:	f1b9 0f00 	cmp.w	r9, #0
 80087f8:	d01f      	beq.n	800883a <__multiply+0x132>
 80087fa:	6834      	ldr	r4, [r6, #0]
 80087fc:	f105 0114 	add.w	r1, r5, #20
 8008800:	46b6      	mov	lr, r6
 8008802:	f04f 0a00 	mov.w	sl, #0
 8008806:	880a      	ldrh	r2, [r1, #0]
 8008808:	f8be b002 	ldrh.w	fp, [lr, #2]
 800880c:	fb09 b202 	mla	r2, r9, r2, fp
 8008810:	4492      	add	sl, r2
 8008812:	b2a4      	uxth	r4, r4
 8008814:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008818:	f84e 4b04 	str.w	r4, [lr], #4
 800881c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008820:	f8be 2000 	ldrh.w	r2, [lr]
 8008824:	0c24      	lsrs	r4, r4, #16
 8008826:	fb09 2404 	mla	r4, r9, r4, r2
 800882a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800882e:	458c      	cmp	ip, r1
 8008830:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008834:	d8e7      	bhi.n	8008806 <__multiply+0xfe>
 8008836:	9a01      	ldr	r2, [sp, #4]
 8008838:	50b4      	str	r4, [r6, r2]
 800883a:	3604      	adds	r6, #4
 800883c:	e7a3      	b.n	8008786 <__multiply+0x7e>
 800883e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1a5      	bne.n	8008792 <__multiply+0x8a>
 8008846:	3f01      	subs	r7, #1
 8008848:	e7a1      	b.n	800878e <__multiply+0x86>
 800884a:	bf00      	nop
 800884c:	08009f3b 	.word	0x08009f3b
 8008850:	08009fcc 	.word	0x08009fcc

08008854 <__pow5mult>:
 8008854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008858:	4615      	mov	r5, r2
 800885a:	f012 0203 	ands.w	r2, r2, #3
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	d007      	beq.n	8008874 <__pow5mult+0x20>
 8008864:	4c25      	ldr	r4, [pc, #148]	; (80088fc <__pow5mult+0xa8>)
 8008866:	3a01      	subs	r2, #1
 8008868:	2300      	movs	r3, #0
 800886a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800886e:	f7ff fe51 	bl	8008514 <__multadd>
 8008872:	4607      	mov	r7, r0
 8008874:	10ad      	asrs	r5, r5, #2
 8008876:	d03d      	beq.n	80088f4 <__pow5mult+0xa0>
 8008878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800887a:	b97c      	cbnz	r4, 800889c <__pow5mult+0x48>
 800887c:	2010      	movs	r0, #16
 800887e:	f7ff fdbf 	bl	8008400 <malloc>
 8008882:	4602      	mov	r2, r0
 8008884:	6270      	str	r0, [r6, #36]	; 0x24
 8008886:	b928      	cbnz	r0, 8008894 <__pow5mult+0x40>
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <__pow5mult+0xac>)
 800888a:	481e      	ldr	r0, [pc, #120]	; (8008904 <__pow5mult+0xb0>)
 800888c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008890:	f000 fce6 	bl	8009260 <__assert_func>
 8008894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008898:	6004      	str	r4, [r0, #0]
 800889a:	60c4      	str	r4, [r0, #12]
 800889c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a4:	b94c      	cbnz	r4, 80088ba <__pow5mult+0x66>
 80088a6:	f240 2171 	movw	r1, #625	; 0x271
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff16 	bl	80086dc <__i2b>
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b6:	4604      	mov	r4, r0
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	f04f 0900 	mov.w	r9, #0
 80088be:	07eb      	lsls	r3, r5, #31
 80088c0:	d50a      	bpl.n	80088d8 <__pow5mult+0x84>
 80088c2:	4639      	mov	r1, r7
 80088c4:	4622      	mov	r2, r4
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7ff ff1e 	bl	8008708 <__multiply>
 80088cc:	4639      	mov	r1, r7
 80088ce:	4680      	mov	r8, r0
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff fdfd 	bl	80084d0 <_Bfree>
 80088d6:	4647      	mov	r7, r8
 80088d8:	106d      	asrs	r5, r5, #1
 80088da:	d00b      	beq.n	80088f4 <__pow5mult+0xa0>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	b938      	cbnz	r0, 80088f0 <__pow5mult+0x9c>
 80088e0:	4622      	mov	r2, r4
 80088e2:	4621      	mov	r1, r4
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ff0f 	bl	8008708 <__multiply>
 80088ea:	6020      	str	r0, [r4, #0]
 80088ec:	f8c0 9000 	str.w	r9, [r0]
 80088f0:	4604      	mov	r4, r0
 80088f2:	e7e4      	b.n	80088be <__pow5mult+0x6a>
 80088f4:	4638      	mov	r0, r7
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a120 	.word	0x0800a120
 8008900:	08009ec5 	.word	0x08009ec5
 8008904:	08009fcc 	.word	0x08009fcc

08008908 <__lshift>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	6849      	ldr	r1, [r1, #4]
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	4607      	mov	r7, r0
 800891a:	4691      	mov	r9, r2
 800891c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008920:	f108 0601 	add.w	r6, r8, #1
 8008924:	42b3      	cmp	r3, r6
 8008926:	db0b      	blt.n	8008940 <__lshift+0x38>
 8008928:	4638      	mov	r0, r7
 800892a:	f7ff fd91 	bl	8008450 <_Balloc>
 800892e:	4605      	mov	r5, r0
 8008930:	b948      	cbnz	r0, 8008946 <__lshift+0x3e>
 8008932:	4602      	mov	r2, r0
 8008934:	4b28      	ldr	r3, [pc, #160]	; (80089d8 <__lshift+0xd0>)
 8008936:	4829      	ldr	r0, [pc, #164]	; (80089dc <__lshift+0xd4>)
 8008938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800893c:	f000 fc90 	bl	8009260 <__assert_func>
 8008940:	3101      	adds	r1, #1
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	e7ee      	b.n	8008924 <__lshift+0x1c>
 8008946:	2300      	movs	r3, #0
 8008948:	f100 0114 	add.w	r1, r0, #20
 800894c:	f100 0210 	add.w	r2, r0, #16
 8008950:	4618      	mov	r0, r3
 8008952:	4553      	cmp	r3, sl
 8008954:	db33      	blt.n	80089be <__lshift+0xb6>
 8008956:	6920      	ldr	r0, [r4, #16]
 8008958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800895c:	f104 0314 	add.w	r3, r4, #20
 8008960:	f019 091f 	ands.w	r9, r9, #31
 8008964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800896c:	d02b      	beq.n	80089c6 <__lshift+0xbe>
 800896e:	f1c9 0e20 	rsb	lr, r9, #32
 8008972:	468a      	mov	sl, r1
 8008974:	2200      	movs	r2, #0
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	fa00 f009 	lsl.w	r0, r0, r9
 800897c:	4302      	orrs	r2, r0
 800897e:	f84a 2b04 	str.w	r2, [sl], #4
 8008982:	f853 2b04 	ldr.w	r2, [r3], #4
 8008986:	459c      	cmp	ip, r3
 8008988:	fa22 f20e 	lsr.w	r2, r2, lr
 800898c:	d8f3      	bhi.n	8008976 <__lshift+0x6e>
 800898e:	ebac 0304 	sub.w	r3, ip, r4
 8008992:	3b15      	subs	r3, #21
 8008994:	f023 0303 	bic.w	r3, r3, #3
 8008998:	3304      	adds	r3, #4
 800899a:	f104 0015 	add.w	r0, r4, #21
 800899e:	4584      	cmp	ip, r0
 80089a0:	bf38      	it	cc
 80089a2:	2304      	movcc	r3, #4
 80089a4:	50ca      	str	r2, [r1, r3]
 80089a6:	b10a      	cbz	r2, 80089ac <__lshift+0xa4>
 80089a8:	f108 0602 	add.w	r6, r8, #2
 80089ac:	3e01      	subs	r6, #1
 80089ae:	4638      	mov	r0, r7
 80089b0:	612e      	str	r6, [r5, #16]
 80089b2:	4621      	mov	r1, r4
 80089b4:	f7ff fd8c 	bl	80084d0 <_Bfree>
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089be:	f842 0f04 	str.w	r0, [r2, #4]!
 80089c2:	3301      	adds	r3, #1
 80089c4:	e7c5      	b.n	8008952 <__lshift+0x4a>
 80089c6:	3904      	subs	r1, #4
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80089d0:	459c      	cmp	ip, r3
 80089d2:	d8f9      	bhi.n	80089c8 <__lshift+0xc0>
 80089d4:	e7ea      	b.n	80089ac <__lshift+0xa4>
 80089d6:	bf00      	nop
 80089d8:	08009f3b 	.word	0x08009f3b
 80089dc:	08009fcc 	.word	0x08009fcc

080089e0 <__mcmp>:
 80089e0:	b530      	push	{r4, r5, lr}
 80089e2:	6902      	ldr	r2, [r0, #16]
 80089e4:	690c      	ldr	r4, [r1, #16]
 80089e6:	1b12      	subs	r2, r2, r4
 80089e8:	d10e      	bne.n	8008a08 <__mcmp+0x28>
 80089ea:	f100 0314 	add.w	r3, r0, #20
 80089ee:	3114      	adds	r1, #20
 80089f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a00:	42a5      	cmp	r5, r4
 8008a02:	d003      	beq.n	8008a0c <__mcmp+0x2c>
 8008a04:	d305      	bcc.n	8008a12 <__mcmp+0x32>
 8008a06:	2201      	movs	r2, #1
 8008a08:	4610      	mov	r0, r2
 8008a0a:	bd30      	pop	{r4, r5, pc}
 8008a0c:	4283      	cmp	r3, r0
 8008a0e:	d3f3      	bcc.n	80089f8 <__mcmp+0x18>
 8008a10:	e7fa      	b.n	8008a08 <__mcmp+0x28>
 8008a12:	f04f 32ff 	mov.w	r2, #4294967295
 8008a16:	e7f7      	b.n	8008a08 <__mcmp+0x28>

08008a18 <__mdiff>:
 8008a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	4606      	mov	r6, r0
 8008a20:	4611      	mov	r1, r2
 8008a22:	4620      	mov	r0, r4
 8008a24:	4617      	mov	r7, r2
 8008a26:	f7ff ffdb 	bl	80089e0 <__mcmp>
 8008a2a:	1e05      	subs	r5, r0, #0
 8008a2c:	d110      	bne.n	8008a50 <__mdiff+0x38>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff fd0d 	bl	8008450 <_Balloc>
 8008a36:	b930      	cbnz	r0, 8008a46 <__mdiff+0x2e>
 8008a38:	4b39      	ldr	r3, [pc, #228]	; (8008b20 <__mdiff+0x108>)
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	f240 2132 	movw	r1, #562	; 0x232
 8008a40:	4838      	ldr	r0, [pc, #224]	; (8008b24 <__mdiff+0x10c>)
 8008a42:	f000 fc0d 	bl	8009260 <__assert_func>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	bfa4      	itt	ge
 8008a52:	463b      	movge	r3, r7
 8008a54:	4627      	movge	r7, r4
 8008a56:	4630      	mov	r0, r6
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	bfa6      	itte	ge
 8008a5c:	461c      	movge	r4, r3
 8008a5e:	2500      	movge	r5, #0
 8008a60:	2501      	movlt	r5, #1
 8008a62:	f7ff fcf5 	bl	8008450 <_Balloc>
 8008a66:	b920      	cbnz	r0, 8008a72 <__mdiff+0x5a>
 8008a68:	4b2d      	ldr	r3, [pc, #180]	; (8008b20 <__mdiff+0x108>)
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a70:	e7e6      	b.n	8008a40 <__mdiff+0x28>
 8008a72:	693e      	ldr	r6, [r7, #16]
 8008a74:	60c5      	str	r5, [r0, #12]
 8008a76:	6925      	ldr	r5, [r4, #16]
 8008a78:	f107 0114 	add.w	r1, r7, #20
 8008a7c:	f104 0914 	add.w	r9, r4, #20
 8008a80:	f100 0e14 	add.w	lr, r0, #20
 8008a84:	f107 0210 	add.w	r2, r7, #16
 8008a88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008a8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008a90:	46f2      	mov	sl, lr
 8008a92:	2700      	movs	r7, #0
 8008a94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a9c:	fa1f f883 	uxth.w	r8, r3
 8008aa0:	fa17 f78b 	uxtah	r7, r7, fp
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	eba7 0808 	sub.w	r8, r7, r8
 8008aaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ab2:	fa1f f888 	uxth.w	r8, r8
 8008ab6:	141f      	asrs	r7, r3, #16
 8008ab8:	454d      	cmp	r5, r9
 8008aba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008abe:	f84a 3b04 	str.w	r3, [sl], #4
 8008ac2:	d8e7      	bhi.n	8008a94 <__mdiff+0x7c>
 8008ac4:	1b2b      	subs	r3, r5, r4
 8008ac6:	3b15      	subs	r3, #21
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	3304      	adds	r3, #4
 8008ace:	3415      	adds	r4, #21
 8008ad0:	42a5      	cmp	r5, r4
 8008ad2:	bf38      	it	cc
 8008ad4:	2304      	movcc	r3, #4
 8008ad6:	4419      	add	r1, r3
 8008ad8:	4473      	add	r3, lr
 8008ada:	469e      	mov	lr, r3
 8008adc:	460d      	mov	r5, r1
 8008ade:	4565      	cmp	r5, ip
 8008ae0:	d30e      	bcc.n	8008b00 <__mdiff+0xe8>
 8008ae2:	f10c 0203 	add.w	r2, ip, #3
 8008ae6:	1a52      	subs	r2, r2, r1
 8008ae8:	f022 0203 	bic.w	r2, r2, #3
 8008aec:	3903      	subs	r1, #3
 8008aee:	458c      	cmp	ip, r1
 8008af0:	bf38      	it	cc
 8008af2:	2200      	movcc	r2, #0
 8008af4:	441a      	add	r2, r3
 8008af6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008afa:	b17b      	cbz	r3, 8008b1c <__mdiff+0x104>
 8008afc:	6106      	str	r6, [r0, #16]
 8008afe:	e7a5      	b.n	8008a4c <__mdiff+0x34>
 8008b00:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b04:	fa17 f488 	uxtah	r4, r7, r8
 8008b08:	1422      	asrs	r2, r4, #16
 8008b0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008b0e:	b2a4      	uxth	r4, r4
 8008b10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b14:	f84e 4b04 	str.w	r4, [lr], #4
 8008b18:	1417      	asrs	r7, r2, #16
 8008b1a:	e7e0      	b.n	8008ade <__mdiff+0xc6>
 8008b1c:	3e01      	subs	r6, #1
 8008b1e:	e7ea      	b.n	8008af6 <__mdiff+0xde>
 8008b20:	08009f3b 	.word	0x08009f3b
 8008b24:	08009fcc 	.word	0x08009fcc

08008b28 <__ulp>:
 8008b28:	b082      	sub	sp, #8
 8008b2a:	ed8d 0b00 	vstr	d0, [sp]
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	4912      	ldr	r1, [pc, #72]	; (8008b7c <__ulp+0x54>)
 8008b32:	4019      	ands	r1, r3
 8008b34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	dd05      	ble.n	8008b48 <__ulp+0x20>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	ec43 2b10 	vmov	d0, r2, r3
 8008b44:	b002      	add	sp, #8
 8008b46:	4770      	bx	lr
 8008b48:	4249      	negs	r1, r1
 8008b4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b52:	f04f 0200 	mov.w	r2, #0
 8008b56:	f04f 0300 	mov.w	r3, #0
 8008b5a:	da04      	bge.n	8008b66 <__ulp+0x3e>
 8008b5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b60:	fa41 f300 	asr.w	r3, r1, r0
 8008b64:	e7ec      	b.n	8008b40 <__ulp+0x18>
 8008b66:	f1a0 0114 	sub.w	r1, r0, #20
 8008b6a:	291e      	cmp	r1, #30
 8008b6c:	bfda      	itte	le
 8008b6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008b72:	fa20 f101 	lsrle.w	r1, r0, r1
 8008b76:	2101      	movgt	r1, #1
 8008b78:	460a      	mov	r2, r1
 8008b7a:	e7e1      	b.n	8008b40 <__ulp+0x18>
 8008b7c:	7ff00000 	.word	0x7ff00000

08008b80 <__b2d>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	6905      	ldr	r5, [r0, #16]
 8008b84:	f100 0714 	add.w	r7, r0, #20
 8008b88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b8c:	1f2e      	subs	r6, r5, #4
 8008b8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff fd52 	bl	800863c <__hi0bits>
 8008b98:	f1c0 0320 	rsb	r3, r0, #32
 8008b9c:	280a      	cmp	r0, #10
 8008b9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c1c <__b2d+0x9c>
 8008ba2:	600b      	str	r3, [r1, #0]
 8008ba4:	dc14      	bgt.n	8008bd0 <__b2d+0x50>
 8008ba6:	f1c0 0e0b 	rsb	lr, r0, #11
 8008baa:	fa24 f10e 	lsr.w	r1, r4, lr
 8008bae:	42b7      	cmp	r7, r6
 8008bb0:	ea41 030c 	orr.w	r3, r1, ip
 8008bb4:	bf34      	ite	cc
 8008bb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bba:	2100      	movcs	r1, #0
 8008bbc:	3015      	adds	r0, #21
 8008bbe:	fa04 f000 	lsl.w	r0, r4, r0
 8008bc2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008bc6:	ea40 0201 	orr.w	r2, r0, r1
 8008bca:	ec43 2b10 	vmov	d0, r2, r3
 8008bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd0:	42b7      	cmp	r7, r6
 8008bd2:	bf3a      	itte	cc
 8008bd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bd8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008bdc:	2100      	movcs	r1, #0
 8008bde:	380b      	subs	r0, #11
 8008be0:	d017      	beq.n	8008c12 <__b2d+0x92>
 8008be2:	f1c0 0c20 	rsb	ip, r0, #32
 8008be6:	fa04 f500 	lsl.w	r5, r4, r0
 8008bea:	42be      	cmp	r6, r7
 8008bec:	fa21 f40c 	lsr.w	r4, r1, ip
 8008bf0:	ea45 0504 	orr.w	r5, r5, r4
 8008bf4:	bf8c      	ite	hi
 8008bf6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008bfa:	2400      	movls	r4, #0
 8008bfc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c00:	fa01 f000 	lsl.w	r0, r1, r0
 8008c04:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c0c:	ea40 0204 	orr.w	r2, r0, r4
 8008c10:	e7db      	b.n	8008bca <__b2d+0x4a>
 8008c12:	ea44 030c 	orr.w	r3, r4, ip
 8008c16:	460a      	mov	r2, r1
 8008c18:	e7d7      	b.n	8008bca <__b2d+0x4a>
 8008c1a:	bf00      	nop
 8008c1c:	3ff00000 	.word	0x3ff00000

08008c20 <__d2b>:
 8008c20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c24:	4689      	mov	r9, r1
 8008c26:	2101      	movs	r1, #1
 8008c28:	ec57 6b10 	vmov	r6, r7, d0
 8008c2c:	4690      	mov	r8, r2
 8008c2e:	f7ff fc0f 	bl	8008450 <_Balloc>
 8008c32:	4604      	mov	r4, r0
 8008c34:	b930      	cbnz	r0, 8008c44 <__d2b+0x24>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <__d2b+0xb0>)
 8008c3a:	4826      	ldr	r0, [pc, #152]	; (8008cd4 <__d2b+0xb4>)
 8008c3c:	f240 310a 	movw	r1, #778	; 0x30a
 8008c40:	f000 fb0e 	bl	8009260 <__assert_func>
 8008c44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c4c:	bb35      	cbnz	r5, 8008c9c <__d2b+0x7c>
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	d028      	beq.n	8008ca6 <__d2b+0x86>
 8008c54:	4668      	mov	r0, sp
 8008c56:	9600      	str	r6, [sp, #0]
 8008c58:	f7ff fd10 	bl	800867c <__lo0bits>
 8008c5c:	9900      	ldr	r1, [sp, #0]
 8008c5e:	b300      	cbz	r0, 8008ca2 <__d2b+0x82>
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	f1c0 0320 	rsb	r3, r0, #32
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	40c2      	lsrs	r2, r0
 8008c6e:	6163      	str	r3, [r4, #20]
 8008c70:	9201      	str	r2, [sp, #4]
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	61a3      	str	r3, [r4, #24]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bf14      	ite	ne
 8008c7a:	2202      	movne	r2, #2
 8008c7c:	2201      	moveq	r2, #1
 8008c7e:	6122      	str	r2, [r4, #16]
 8008c80:	b1d5      	cbz	r5, 8008cb8 <__d2b+0x98>
 8008c82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c86:	4405      	add	r5, r0
 8008c88:	f8c9 5000 	str.w	r5, [r9]
 8008c8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c90:	f8c8 0000 	str.w	r0, [r8]
 8008c94:	4620      	mov	r0, r4
 8008c96:	b003      	add	sp, #12
 8008c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ca0:	e7d5      	b.n	8008c4e <__d2b+0x2e>
 8008ca2:	6161      	str	r1, [r4, #20]
 8008ca4:	e7e5      	b.n	8008c72 <__d2b+0x52>
 8008ca6:	a801      	add	r0, sp, #4
 8008ca8:	f7ff fce8 	bl	800867c <__lo0bits>
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	6163      	str	r3, [r4, #20]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	6122      	str	r2, [r4, #16]
 8008cb4:	3020      	adds	r0, #32
 8008cb6:	e7e3      	b.n	8008c80 <__d2b+0x60>
 8008cb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cc0:	f8c9 0000 	str.w	r0, [r9]
 8008cc4:	6918      	ldr	r0, [r3, #16]
 8008cc6:	f7ff fcb9 	bl	800863c <__hi0bits>
 8008cca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cce:	e7df      	b.n	8008c90 <__d2b+0x70>
 8008cd0:	08009f3b 	.word	0x08009f3b
 8008cd4:	08009fcc 	.word	0x08009fcc

08008cd8 <__ratio>:
 8008cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	4688      	mov	r8, r1
 8008cde:	4669      	mov	r1, sp
 8008ce0:	4681      	mov	r9, r0
 8008ce2:	f7ff ff4d 	bl	8008b80 <__b2d>
 8008ce6:	a901      	add	r1, sp, #4
 8008ce8:	4640      	mov	r0, r8
 8008cea:	ec55 4b10 	vmov	r4, r5, d0
 8008cee:	f7ff ff47 	bl	8008b80 <__b2d>
 8008cf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cfa:	eba3 0c02 	sub.w	ip, r3, r2
 8008cfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d08:	ec51 0b10 	vmov	r0, r1, d0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfd6      	itet	le
 8008d10:	460a      	movle	r2, r1
 8008d12:	462a      	movgt	r2, r5
 8008d14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d18:	468b      	mov	fp, r1
 8008d1a:	462f      	mov	r7, r5
 8008d1c:	bfd4      	ite	le
 8008d1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d26:	4620      	mov	r0, r4
 8008d28:	ee10 2a10 	vmov	r2, s0
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f7f7 fd8c 	bl	800084c <__aeabi_ddiv>
 8008d34:	ec41 0b10 	vmov	d0, r0, r1
 8008d38:	b003      	add	sp, #12
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d3e <__copybits>:
 8008d3e:	3901      	subs	r1, #1
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	1149      	asrs	r1, r1, #5
 8008d44:	6914      	ldr	r4, [r2, #16]
 8008d46:	3101      	adds	r1, #1
 8008d48:	f102 0314 	add.w	r3, r2, #20
 8008d4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d54:	1f05      	subs	r5, r0, #4
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	d30c      	bcc.n	8008d74 <__copybits+0x36>
 8008d5a:	1aa3      	subs	r3, r4, r2
 8008d5c:	3b11      	subs	r3, #17
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	3211      	adds	r2, #17
 8008d64:	42a2      	cmp	r2, r4
 8008d66:	bf88      	it	hi
 8008d68:	2300      	movhi	r3, #0
 8008d6a:	4418      	add	r0, r3
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4288      	cmp	r0, r1
 8008d70:	d305      	bcc.n	8008d7e <__copybits+0x40>
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d78:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d7c:	e7eb      	b.n	8008d56 <__copybits+0x18>
 8008d7e:	f840 3b04 	str.w	r3, [r0], #4
 8008d82:	e7f4      	b.n	8008d6e <__copybits+0x30>

08008d84 <__any_on>:
 8008d84:	f100 0214 	add.w	r2, r0, #20
 8008d88:	6900      	ldr	r0, [r0, #16]
 8008d8a:	114b      	asrs	r3, r1, #5
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	db11      	blt.n	8008db6 <__any_on+0x32>
 8008d92:	dd0a      	ble.n	8008daa <__any_on+0x26>
 8008d94:	f011 011f 	ands.w	r1, r1, #31
 8008d98:	d007      	beq.n	8008daa <__any_on+0x26>
 8008d9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d9e:	fa24 f001 	lsr.w	r0, r4, r1
 8008da2:	fa00 f101 	lsl.w	r1, r0, r1
 8008da6:	428c      	cmp	r4, r1
 8008da8:	d10b      	bne.n	8008dc2 <__any_on+0x3e>
 8008daa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d803      	bhi.n	8008dba <__any_on+0x36>
 8008db2:	2000      	movs	r0, #0
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	4603      	mov	r3, r0
 8008db8:	e7f7      	b.n	8008daa <__any_on+0x26>
 8008dba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d0f5      	beq.n	8008dae <__any_on+0x2a>
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7f6      	b.n	8008db4 <__any_on+0x30>

08008dc6 <_calloc_r>:
 8008dc6:	b513      	push	{r0, r1, r4, lr}
 8008dc8:	434a      	muls	r2, r1
 8008dca:	4611      	mov	r1, r2
 8008dcc:	9201      	str	r2, [sp, #4]
 8008dce:	f000 f859 	bl	8008e84 <_malloc_r>
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	b118      	cbz	r0, 8008dde <_calloc_r+0x18>
 8008dd6:	9a01      	ldr	r2, [sp, #4]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	f7fc fe5f 	bl	8005a9c <memset>
 8008dde:	4620      	mov	r0, r4
 8008de0:	b002      	add	sp, #8
 8008de2:	bd10      	pop	{r4, pc}

08008de4 <_free_r>:
 8008de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de6:	2900      	cmp	r1, #0
 8008de8:	d048      	beq.n	8008e7c <_free_r+0x98>
 8008dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dee:	9001      	str	r0, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f1a1 0404 	sub.w	r4, r1, #4
 8008df6:	bfb8      	it	lt
 8008df8:	18e4      	addlt	r4, r4, r3
 8008dfa:	f000 fa7b 	bl	80092f4 <__malloc_lock>
 8008dfe:	4a20      	ldr	r2, [pc, #128]	; (8008e80 <_free_r+0x9c>)
 8008e00:	9801      	ldr	r0, [sp, #4]
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	4615      	mov	r5, r2
 8008e06:	b933      	cbnz	r3, 8008e16 <_free_r+0x32>
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	6014      	str	r4, [r2, #0]
 8008e0c:	b003      	add	sp, #12
 8008e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e12:	f000 ba75 	b.w	8009300 <__malloc_unlock>
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	d90b      	bls.n	8008e32 <_free_r+0x4e>
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	1862      	adds	r2, r4, r1
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bf04      	itt	eq
 8008e22:	681a      	ldreq	r2, [r3, #0]
 8008e24:	685b      	ldreq	r3, [r3, #4]
 8008e26:	6063      	str	r3, [r4, #4]
 8008e28:	bf04      	itt	eq
 8008e2a:	1852      	addeq	r2, r2, r1
 8008e2c:	6022      	streq	r2, [r4, #0]
 8008e2e:	602c      	str	r4, [r5, #0]
 8008e30:	e7ec      	b.n	8008e0c <_free_r+0x28>
 8008e32:	461a      	mov	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b10b      	cbz	r3, 8008e3c <_free_r+0x58>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x4e>
 8008e3c:	6811      	ldr	r1, [r2, #0]
 8008e3e:	1855      	adds	r5, r2, r1
 8008e40:	42a5      	cmp	r5, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x78>
 8008e44:	6824      	ldr	r4, [r4, #0]
 8008e46:	4421      	add	r1, r4
 8008e48:	1854      	adds	r4, r2, r1
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	d1dd      	bne.n	8008e0c <_free_r+0x28>
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	6053      	str	r3, [r2, #4]
 8008e56:	4421      	add	r1, r4
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	e7d7      	b.n	8008e0c <_free_r+0x28>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x80>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	e7d3      	b.n	8008e0c <_free_r+0x28>
 8008e64:	6825      	ldr	r5, [r4, #0]
 8008e66:	1961      	adds	r1, r4, r5
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf04      	itt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	bf04      	itt	eq
 8008e74:	1949      	addeq	r1, r1, r5
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	6054      	str	r4, [r2, #4]
 8008e7a:	e7c7      	b.n	8008e0c <_free_r+0x28>
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bd30      	pop	{r4, r5, pc}
 8008e80:	20000204 	.word	0x20000204

08008e84 <_malloc_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	1ccd      	adds	r5, r1, #3
 8008e88:	f025 0503 	bic.w	r5, r5, #3
 8008e8c:	3508      	adds	r5, #8
 8008e8e:	2d0c      	cmp	r5, #12
 8008e90:	bf38      	it	cc
 8008e92:	250c      	movcc	r5, #12
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	4606      	mov	r6, r0
 8008e98:	db01      	blt.n	8008e9e <_malloc_r+0x1a>
 8008e9a:	42a9      	cmp	r1, r5
 8008e9c:	d903      	bls.n	8008ea6 <_malloc_r+0x22>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	6033      	str	r3, [r6, #0]
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea6:	f000 fa25 	bl	80092f4 <__malloc_lock>
 8008eaa:	4921      	ldr	r1, [pc, #132]	; (8008f30 <_malloc_r+0xac>)
 8008eac:	680a      	ldr	r2, [r1, #0]
 8008eae:	4614      	mov	r4, r2
 8008eb0:	b99c      	cbnz	r4, 8008eda <_malloc_r+0x56>
 8008eb2:	4f20      	ldr	r7, [pc, #128]	; (8008f34 <_malloc_r+0xb0>)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	b923      	cbnz	r3, 8008ec2 <_malloc_r+0x3e>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 f9a0 	bl	8009200 <_sbrk_r>
 8008ec0:	6038      	str	r0, [r7, #0]
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 f99b 	bl	8009200 <_sbrk_r>
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	d123      	bne.n	8008f16 <_malloc_r+0x92>
 8008ece:	230c      	movs	r3, #12
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 fa14 	bl	8009300 <__malloc_unlock>
 8008ed8:	e7e3      	b.n	8008ea2 <_malloc_r+0x1e>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	1b5b      	subs	r3, r3, r5
 8008ede:	d417      	bmi.n	8008f10 <_malloc_r+0x8c>
 8008ee0:	2b0b      	cmp	r3, #11
 8008ee2:	d903      	bls.n	8008eec <_malloc_r+0x68>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	441c      	add	r4, r3
 8008ee8:	6025      	str	r5, [r4, #0]
 8008eea:	e004      	b.n	8008ef6 <_malloc_r+0x72>
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	42a2      	cmp	r2, r4
 8008ef0:	bf0c      	ite	eq
 8008ef2:	600b      	streq	r3, [r1, #0]
 8008ef4:	6053      	strne	r3, [r2, #4]
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 fa02 	bl	8009300 <__malloc_unlock>
 8008efc:	f104 000b 	add.w	r0, r4, #11
 8008f00:	1d23      	adds	r3, r4, #4
 8008f02:	f020 0007 	bic.w	r0, r0, #7
 8008f06:	1ac2      	subs	r2, r0, r3
 8008f08:	d0cc      	beq.n	8008ea4 <_malloc_r+0x20>
 8008f0a:	1a1b      	subs	r3, r3, r0
 8008f0c:	50a3      	str	r3, [r4, r2]
 8008f0e:	e7c9      	b.n	8008ea4 <_malloc_r+0x20>
 8008f10:	4622      	mov	r2, r4
 8008f12:	6864      	ldr	r4, [r4, #4]
 8008f14:	e7cc      	b.n	8008eb0 <_malloc_r+0x2c>
 8008f16:	1cc4      	adds	r4, r0, #3
 8008f18:	f024 0403 	bic.w	r4, r4, #3
 8008f1c:	42a0      	cmp	r0, r4
 8008f1e:	d0e3      	beq.n	8008ee8 <_malloc_r+0x64>
 8008f20:	1a21      	subs	r1, r4, r0
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f96c 	bl	8009200 <_sbrk_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d1dd      	bne.n	8008ee8 <_malloc_r+0x64>
 8008f2c:	e7cf      	b.n	8008ece <_malloc_r+0x4a>
 8008f2e:	bf00      	nop
 8008f30:	20000204 	.word	0x20000204
 8008f34:	20000208 	.word	0x20000208

08008f38 <__ssputs_r>:
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	688e      	ldr	r6, [r1, #8]
 8008f3e:	429e      	cmp	r6, r3
 8008f40:	4682      	mov	sl, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	4690      	mov	r8, r2
 8008f46:	461f      	mov	r7, r3
 8008f48:	d838      	bhi.n	8008fbc <__ssputs_r+0x84>
 8008f4a:	898a      	ldrh	r2, [r1, #12]
 8008f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f50:	d032      	beq.n	8008fb8 <__ssputs_r+0x80>
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	6909      	ldr	r1, [r1, #16]
 8008f56:	eba5 0901 	sub.w	r9, r5, r1
 8008f5a:	6965      	ldr	r5, [r4, #20]
 8008f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f64:	3301      	adds	r3, #1
 8008f66:	444b      	add	r3, r9
 8008f68:	106d      	asrs	r5, r5, #1
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	bf38      	it	cc
 8008f6e:	461d      	movcc	r5, r3
 8008f70:	0553      	lsls	r3, r2, #21
 8008f72:	d531      	bpl.n	8008fd8 <__ssputs_r+0xa0>
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7ff ff85 	bl	8008e84 <_malloc_r>
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	b950      	cbnz	r0, 8008f94 <__ssputs_r+0x5c>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	f8ca 3000 	str.w	r3, [sl]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f94:	6921      	ldr	r1, [r4, #16]
 8008f96:	464a      	mov	r2, r9
 8008f98:	f7ff fa4c 	bl	8008434 <memcpy>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	6126      	str	r6, [r4, #16]
 8008faa:	6165      	str	r5, [r4, #20]
 8008fac:	444e      	add	r6, r9
 8008fae:	eba5 0509 	sub.w	r5, r5, r9
 8008fb2:	6026      	str	r6, [r4, #0]
 8008fb4:	60a5      	str	r5, [r4, #8]
 8008fb6:	463e      	mov	r6, r7
 8008fb8:	42be      	cmp	r6, r7
 8008fba:	d900      	bls.n	8008fbe <__ssputs_r+0x86>
 8008fbc:	463e      	mov	r6, r7
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	f000 f97c 	bl	80092c0 <memmove>
 8008fc8:	68a3      	ldr	r3, [r4, #8]
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	1b9b      	subs	r3, r3, r6
 8008fce:	4432      	add	r2, r6
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	6022      	str	r2, [r4, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e7db      	b.n	8008f90 <__ssputs_r+0x58>
 8008fd8:	462a      	mov	r2, r5
 8008fda:	f000 f997 	bl	800930c <_realloc_r>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d1e1      	bne.n	8008fa8 <__ssputs_r+0x70>
 8008fe4:	6921      	ldr	r1, [r4, #16]
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	f7ff fefc 	bl	8008de4 <_free_r>
 8008fec:	e7c7      	b.n	8008f7e <__ssputs_r+0x46>
	...

08008ff0 <_svfiprintf_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	4698      	mov	r8, r3
 8008ff6:	898b      	ldrh	r3, [r1, #12]
 8008ff8:	061b      	lsls	r3, r3, #24
 8008ffa:	b09d      	sub	sp, #116	; 0x74
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	460d      	mov	r5, r1
 8009000:	4614      	mov	r4, r2
 8009002:	d50e      	bpl.n	8009022 <_svfiprintf_r+0x32>
 8009004:	690b      	ldr	r3, [r1, #16]
 8009006:	b963      	cbnz	r3, 8009022 <_svfiprintf_r+0x32>
 8009008:	2140      	movs	r1, #64	; 0x40
 800900a:	f7ff ff3b 	bl	8008e84 <_malloc_r>
 800900e:	6028      	str	r0, [r5, #0]
 8009010:	6128      	str	r0, [r5, #16]
 8009012:	b920      	cbnz	r0, 800901e <_svfiprintf_r+0x2e>
 8009014:	230c      	movs	r3, #12
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	e0d1      	b.n	80091c2 <_svfiprintf_r+0x1d2>
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	616b      	str	r3, [r5, #20]
 8009022:	2300      	movs	r3, #0
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	2320      	movs	r3, #32
 8009028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009030:	2330      	movs	r3, #48	; 0x30
 8009032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091dc <_svfiprintf_r+0x1ec>
 8009036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800903a:	f04f 0901 	mov.w	r9, #1
 800903e:	4623      	mov	r3, r4
 8009040:	469a      	mov	sl, r3
 8009042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009046:	b10a      	cbz	r2, 800904c <_svfiprintf_r+0x5c>
 8009048:	2a25      	cmp	r2, #37	; 0x25
 800904a:	d1f9      	bne.n	8009040 <_svfiprintf_r+0x50>
 800904c:	ebba 0b04 	subs.w	fp, sl, r4
 8009050:	d00b      	beq.n	800906a <_svfiprintf_r+0x7a>
 8009052:	465b      	mov	r3, fp
 8009054:	4622      	mov	r2, r4
 8009056:	4629      	mov	r1, r5
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff6d 	bl	8008f38 <__ssputs_r>
 800905e:	3001      	adds	r0, #1
 8009060:	f000 80aa 	beq.w	80091b8 <_svfiprintf_r+0x1c8>
 8009064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009066:	445a      	add	r2, fp
 8009068:	9209      	str	r2, [sp, #36]	; 0x24
 800906a:	f89a 3000 	ldrb.w	r3, [sl]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80a2 	beq.w	80091b8 <_svfiprintf_r+0x1c8>
 8009074:	2300      	movs	r3, #0
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800907e:	f10a 0a01 	add.w	sl, sl, #1
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	9307      	str	r3, [sp, #28]
 8009086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800908a:	931a      	str	r3, [sp, #104]	; 0x68
 800908c:	4654      	mov	r4, sl
 800908e:	2205      	movs	r2, #5
 8009090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009094:	4851      	ldr	r0, [pc, #324]	; (80091dc <_svfiprintf_r+0x1ec>)
 8009096:	f7f7 f8a3 	bl	80001e0 <memchr>
 800909a:	9a04      	ldr	r2, [sp, #16]
 800909c:	b9d8      	cbnz	r0, 80090d6 <_svfiprintf_r+0xe6>
 800909e:	06d0      	lsls	r0, r2, #27
 80090a0:	bf44      	itt	mi
 80090a2:	2320      	movmi	r3, #32
 80090a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a8:	0711      	lsls	r1, r2, #28
 80090aa:	bf44      	itt	mi
 80090ac:	232b      	movmi	r3, #43	; 0x2b
 80090ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b2:	f89a 3000 	ldrb.w	r3, [sl]
 80090b6:	2b2a      	cmp	r3, #42	; 0x2a
 80090b8:	d015      	beq.n	80090e6 <_svfiprintf_r+0xf6>
 80090ba:	9a07      	ldr	r2, [sp, #28]
 80090bc:	4654      	mov	r4, sl
 80090be:	2000      	movs	r0, #0
 80090c0:	f04f 0c0a 	mov.w	ip, #10
 80090c4:	4621      	mov	r1, r4
 80090c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ca:	3b30      	subs	r3, #48	; 0x30
 80090cc:	2b09      	cmp	r3, #9
 80090ce:	d94e      	bls.n	800916e <_svfiprintf_r+0x17e>
 80090d0:	b1b0      	cbz	r0, 8009100 <_svfiprintf_r+0x110>
 80090d2:	9207      	str	r2, [sp, #28]
 80090d4:	e014      	b.n	8009100 <_svfiprintf_r+0x110>
 80090d6:	eba0 0308 	sub.w	r3, r0, r8
 80090da:	fa09 f303 	lsl.w	r3, r9, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	46a2      	mov	sl, r4
 80090e4:	e7d2      	b.n	800908c <_svfiprintf_r+0x9c>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d19      	adds	r1, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9103      	str	r1, [sp, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfbb      	ittet	lt
 80090f2:	425b      	neglt	r3, r3
 80090f4:	f042 0202 	orrlt.w	r2, r2, #2
 80090f8:	9307      	strge	r3, [sp, #28]
 80090fa:	9307      	strlt	r3, [sp, #28]
 80090fc:	bfb8      	it	lt
 80090fe:	9204      	strlt	r2, [sp, #16]
 8009100:	7823      	ldrb	r3, [r4, #0]
 8009102:	2b2e      	cmp	r3, #46	; 0x2e
 8009104:	d10c      	bne.n	8009120 <_svfiprintf_r+0x130>
 8009106:	7863      	ldrb	r3, [r4, #1]
 8009108:	2b2a      	cmp	r3, #42	; 0x2a
 800910a:	d135      	bne.n	8009178 <_svfiprintf_r+0x188>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9203      	str	r2, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfb8      	it	lt
 8009118:	f04f 33ff 	movlt.w	r3, #4294967295
 800911c:	3402      	adds	r4, #2
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091ec <_svfiprintf_r+0x1fc>
 8009124:	7821      	ldrb	r1, [r4, #0]
 8009126:	2203      	movs	r2, #3
 8009128:	4650      	mov	r0, sl
 800912a:	f7f7 f859 	bl	80001e0 <memchr>
 800912e:	b140      	cbz	r0, 8009142 <_svfiprintf_r+0x152>
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	eba0 000a 	sub.w	r0, r0, sl
 8009136:	fa03 f000 	lsl.w	r0, r3, r0
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	4303      	orrs	r3, r0
 800913e:	3401      	adds	r4, #1
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009146:	4826      	ldr	r0, [pc, #152]	; (80091e0 <_svfiprintf_r+0x1f0>)
 8009148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914c:	2206      	movs	r2, #6
 800914e:	f7f7 f847 	bl	80001e0 <memchr>
 8009152:	2800      	cmp	r0, #0
 8009154:	d038      	beq.n	80091c8 <_svfiprintf_r+0x1d8>
 8009156:	4b23      	ldr	r3, [pc, #140]	; (80091e4 <_svfiprintf_r+0x1f4>)
 8009158:	bb1b      	cbnz	r3, 80091a2 <_svfiprintf_r+0x1b2>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	3307      	adds	r3, #7
 800915e:	f023 0307 	bic.w	r3, r3, #7
 8009162:	3308      	adds	r3, #8
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009168:	4433      	add	r3, r6
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
 800916c:	e767      	b.n	800903e <_svfiprintf_r+0x4e>
 800916e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009172:	460c      	mov	r4, r1
 8009174:	2001      	movs	r0, #1
 8009176:	e7a5      	b.n	80090c4 <_svfiprintf_r+0xd4>
 8009178:	2300      	movs	r3, #0
 800917a:	3401      	adds	r4, #1
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	4619      	mov	r1, r3
 8009180:	f04f 0c0a 	mov.w	ip, #10
 8009184:	4620      	mov	r0, r4
 8009186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800918a:	3a30      	subs	r2, #48	; 0x30
 800918c:	2a09      	cmp	r2, #9
 800918e:	d903      	bls.n	8009198 <_svfiprintf_r+0x1a8>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0c5      	beq.n	8009120 <_svfiprintf_r+0x130>
 8009194:	9105      	str	r1, [sp, #20]
 8009196:	e7c3      	b.n	8009120 <_svfiprintf_r+0x130>
 8009198:	fb0c 2101 	mla	r1, ip, r1, r2
 800919c:	4604      	mov	r4, r0
 800919e:	2301      	movs	r3, #1
 80091a0:	e7f0      	b.n	8009184 <_svfiprintf_r+0x194>
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	462a      	mov	r2, r5
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <_svfiprintf_r+0x1f8>)
 80091aa:	a904      	add	r1, sp, #16
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7fc fd1d 	bl	8005bec <_printf_float>
 80091b2:	1c42      	adds	r2, r0, #1
 80091b4:	4606      	mov	r6, r0
 80091b6:	d1d6      	bne.n	8009166 <_svfiprintf_r+0x176>
 80091b8:	89ab      	ldrh	r3, [r5, #12]
 80091ba:	065b      	lsls	r3, r3, #25
 80091bc:	f53f af2c 	bmi.w	8009018 <_svfiprintf_r+0x28>
 80091c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c2:	b01d      	add	sp, #116	; 0x74
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	ab03      	add	r3, sp, #12
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	462a      	mov	r2, r5
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <_svfiprintf_r+0x1f8>)
 80091d0:	a904      	add	r1, sp, #16
 80091d2:	4638      	mov	r0, r7
 80091d4:	f7fc ffae 	bl	8006134 <_printf_i>
 80091d8:	e7eb      	b.n	80091b2 <_svfiprintf_r+0x1c2>
 80091da:	bf00      	nop
 80091dc:	0800a12c 	.word	0x0800a12c
 80091e0:	0800a136 	.word	0x0800a136
 80091e4:	08005bed 	.word	0x08005bed
 80091e8:	08008f39 	.word	0x08008f39
 80091ec:	0800a132 	.word	0x0800a132

080091f0 <nan>:
 80091f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091f8 <nan+0x8>
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	00000000 	.word	0x00000000
 80091fc:	7ff80000 	.word	0x7ff80000

08009200 <_sbrk_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	; (800921c <_sbrk_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f8 faa0 	bl	8001750 <_sbrk>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_sbrk_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_sbrk_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	2000048c 	.word	0x2000048c

08009220 <strncmp>:
 8009220:	b510      	push	{r4, lr}
 8009222:	b16a      	cbz	r2, 8009240 <strncmp+0x20>
 8009224:	3901      	subs	r1, #1
 8009226:	1884      	adds	r4, r0, r2
 8009228:	f810 3b01 	ldrb.w	r3, [r0], #1
 800922c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009230:	4293      	cmp	r3, r2
 8009232:	d103      	bne.n	800923c <strncmp+0x1c>
 8009234:	42a0      	cmp	r0, r4
 8009236:	d001      	beq.n	800923c <strncmp+0x1c>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1f5      	bne.n	8009228 <strncmp+0x8>
 800923c:	1a98      	subs	r0, r3, r2
 800923e:	bd10      	pop	{r4, pc}
 8009240:	4610      	mov	r0, r2
 8009242:	e7fc      	b.n	800923e <strncmp+0x1e>

08009244 <__ascii_wctomb>:
 8009244:	b149      	cbz	r1, 800925a <__ascii_wctomb+0x16>
 8009246:	2aff      	cmp	r2, #255	; 0xff
 8009248:	bf85      	ittet	hi
 800924a:	238a      	movhi	r3, #138	; 0x8a
 800924c:	6003      	strhi	r3, [r0, #0]
 800924e:	700a      	strbls	r2, [r1, #0]
 8009250:	f04f 30ff 	movhi.w	r0, #4294967295
 8009254:	bf98      	it	ls
 8009256:	2001      	movls	r0, #1
 8009258:	4770      	bx	lr
 800925a:	4608      	mov	r0, r1
 800925c:	4770      	bx	lr
	...

08009260 <__assert_func>:
 8009260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009262:	4614      	mov	r4, r2
 8009264:	461a      	mov	r2, r3
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <__assert_func+0x2c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4605      	mov	r5, r0
 800926c:	68d8      	ldr	r0, [r3, #12]
 800926e:	b14c      	cbz	r4, 8009284 <__assert_func+0x24>
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <__assert_func+0x30>)
 8009272:	9100      	str	r1, [sp, #0]
 8009274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009278:	4906      	ldr	r1, [pc, #24]	; (8009294 <__assert_func+0x34>)
 800927a:	462b      	mov	r3, r5
 800927c:	f000 f80e 	bl	800929c <fiprintf>
 8009280:	f000 fa84 	bl	800978c <abort>
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <__assert_func+0x38>)
 8009286:	461c      	mov	r4, r3
 8009288:	e7f3      	b.n	8009272 <__assert_func+0x12>
 800928a:	bf00      	nop
 800928c:	20000010 	.word	0x20000010
 8009290:	0800a13d 	.word	0x0800a13d
 8009294:	0800a14a 	.word	0x0800a14a
 8009298:	0800a178 	.word	0x0800a178

0800929c <fiprintf>:
 800929c:	b40e      	push	{r1, r2, r3}
 800929e:	b503      	push	{r0, r1, lr}
 80092a0:	4601      	mov	r1, r0
 80092a2:	ab03      	add	r3, sp, #12
 80092a4:	4805      	ldr	r0, [pc, #20]	; (80092bc <fiprintf+0x20>)
 80092a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	f000 f87d 	bl	80093ac <_vfiprintf_r>
 80092b2:	b002      	add	sp, #8
 80092b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b8:	b003      	add	sp, #12
 80092ba:	4770      	bx	lr
 80092bc:	20000010 	.word	0x20000010

080092c0 <memmove>:
 80092c0:	4288      	cmp	r0, r1
 80092c2:	b510      	push	{r4, lr}
 80092c4:	eb01 0402 	add.w	r4, r1, r2
 80092c8:	d902      	bls.n	80092d0 <memmove+0x10>
 80092ca:	4284      	cmp	r4, r0
 80092cc:	4623      	mov	r3, r4
 80092ce:	d807      	bhi.n	80092e0 <memmove+0x20>
 80092d0:	1e43      	subs	r3, r0, #1
 80092d2:	42a1      	cmp	r1, r4
 80092d4:	d008      	beq.n	80092e8 <memmove+0x28>
 80092d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092de:	e7f8      	b.n	80092d2 <memmove+0x12>
 80092e0:	4402      	add	r2, r0
 80092e2:	4601      	mov	r1, r0
 80092e4:	428a      	cmp	r2, r1
 80092e6:	d100      	bne.n	80092ea <memmove+0x2a>
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092f2:	e7f7      	b.n	80092e4 <memmove+0x24>

080092f4 <__malloc_lock>:
 80092f4:	4801      	ldr	r0, [pc, #4]	; (80092fc <__malloc_lock+0x8>)
 80092f6:	f000 bc09 	b.w	8009b0c <__retarget_lock_acquire_recursive>
 80092fa:	bf00      	nop
 80092fc:	20000494 	.word	0x20000494

08009300 <__malloc_unlock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_unlock+0x8>)
 8009302:	f000 bc04 	b.w	8009b0e <__retarget_lock_release_recursive>
 8009306:	bf00      	nop
 8009308:	20000494 	.word	0x20000494

0800930c <_realloc_r>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	4607      	mov	r7, r0
 8009310:	4614      	mov	r4, r2
 8009312:	460e      	mov	r6, r1
 8009314:	b921      	cbnz	r1, 8009320 <_realloc_r+0x14>
 8009316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800931a:	4611      	mov	r1, r2
 800931c:	f7ff bdb2 	b.w	8008e84 <_malloc_r>
 8009320:	b922      	cbnz	r2, 800932c <_realloc_r+0x20>
 8009322:	f7ff fd5f 	bl	8008de4 <_free_r>
 8009326:	4625      	mov	r5, r4
 8009328:	4628      	mov	r0, r5
 800932a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800932c:	f000 fc54 	bl	8009bd8 <_malloc_usable_size_r>
 8009330:	42a0      	cmp	r0, r4
 8009332:	d20f      	bcs.n	8009354 <_realloc_r+0x48>
 8009334:	4621      	mov	r1, r4
 8009336:	4638      	mov	r0, r7
 8009338:	f7ff fda4 	bl	8008e84 <_malloc_r>
 800933c:	4605      	mov	r5, r0
 800933e:	2800      	cmp	r0, #0
 8009340:	d0f2      	beq.n	8009328 <_realloc_r+0x1c>
 8009342:	4631      	mov	r1, r6
 8009344:	4622      	mov	r2, r4
 8009346:	f7ff f875 	bl	8008434 <memcpy>
 800934a:	4631      	mov	r1, r6
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fd49 	bl	8008de4 <_free_r>
 8009352:	e7e9      	b.n	8009328 <_realloc_r+0x1c>
 8009354:	4635      	mov	r5, r6
 8009356:	e7e7      	b.n	8009328 <_realloc_r+0x1c>

08009358 <__sfputc_r>:
 8009358:	6893      	ldr	r3, [r2, #8]
 800935a:	3b01      	subs	r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	b410      	push	{r4}
 8009360:	6093      	str	r3, [r2, #8]
 8009362:	da08      	bge.n	8009376 <__sfputc_r+0x1e>
 8009364:	6994      	ldr	r4, [r2, #24]
 8009366:	42a3      	cmp	r3, r4
 8009368:	db01      	blt.n	800936e <__sfputc_r+0x16>
 800936a:	290a      	cmp	r1, #10
 800936c:	d103      	bne.n	8009376 <__sfputc_r+0x1e>
 800936e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009372:	f000 b94b 	b.w	800960c <__swbuf_r>
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	1c58      	adds	r0, r3, #1
 800937a:	6010      	str	r0, [r2, #0]
 800937c:	7019      	strb	r1, [r3, #0]
 800937e:	4608      	mov	r0, r1
 8009380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009384:	4770      	bx	lr

08009386 <__sfputs_r>:
 8009386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009388:	4606      	mov	r6, r0
 800938a:	460f      	mov	r7, r1
 800938c:	4614      	mov	r4, r2
 800938e:	18d5      	adds	r5, r2, r3
 8009390:	42ac      	cmp	r4, r5
 8009392:	d101      	bne.n	8009398 <__sfputs_r+0x12>
 8009394:	2000      	movs	r0, #0
 8009396:	e007      	b.n	80093a8 <__sfputs_r+0x22>
 8009398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939c:	463a      	mov	r2, r7
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff ffda 	bl	8009358 <__sfputc_r>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d1f3      	bne.n	8009390 <__sfputs_r+0xa>
 80093a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093ac <_vfiprintf_r>:
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	460d      	mov	r5, r1
 80093b2:	b09d      	sub	sp, #116	; 0x74
 80093b4:	4614      	mov	r4, r2
 80093b6:	4698      	mov	r8, r3
 80093b8:	4606      	mov	r6, r0
 80093ba:	b118      	cbz	r0, 80093c4 <_vfiprintf_r+0x18>
 80093bc:	6983      	ldr	r3, [r0, #24]
 80093be:	b90b      	cbnz	r3, 80093c4 <_vfiprintf_r+0x18>
 80093c0:	f000 fb06 	bl	80099d0 <__sinit>
 80093c4:	4b89      	ldr	r3, [pc, #548]	; (80095ec <_vfiprintf_r+0x240>)
 80093c6:	429d      	cmp	r5, r3
 80093c8:	d11b      	bne.n	8009402 <_vfiprintf_r+0x56>
 80093ca:	6875      	ldr	r5, [r6, #4]
 80093cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	d405      	bmi.n	80093de <_vfiprintf_r+0x32>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d402      	bmi.n	80093de <_vfiprintf_r+0x32>
 80093d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093da:	f000 fb97 	bl	8009b0c <__retarget_lock_acquire_recursive>
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	071b      	lsls	r3, r3, #28
 80093e2:	d501      	bpl.n	80093e8 <_vfiprintf_r+0x3c>
 80093e4:	692b      	ldr	r3, [r5, #16]
 80093e6:	b9eb      	cbnz	r3, 8009424 <_vfiprintf_r+0x78>
 80093e8:	4629      	mov	r1, r5
 80093ea:	4630      	mov	r0, r6
 80093ec:	f000 f960 	bl	80096b0 <__swsetup_r>
 80093f0:	b1c0      	cbz	r0, 8009424 <_vfiprintf_r+0x78>
 80093f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f4:	07dc      	lsls	r4, r3, #31
 80093f6:	d50e      	bpl.n	8009416 <_vfiprintf_r+0x6a>
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	b01d      	add	sp, #116	; 0x74
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	4b7b      	ldr	r3, [pc, #492]	; (80095f0 <_vfiprintf_r+0x244>)
 8009404:	429d      	cmp	r5, r3
 8009406:	d101      	bne.n	800940c <_vfiprintf_r+0x60>
 8009408:	68b5      	ldr	r5, [r6, #8]
 800940a:	e7df      	b.n	80093cc <_vfiprintf_r+0x20>
 800940c:	4b79      	ldr	r3, [pc, #484]	; (80095f4 <_vfiprintf_r+0x248>)
 800940e:	429d      	cmp	r5, r3
 8009410:	bf08      	it	eq
 8009412:	68f5      	ldreq	r5, [r6, #12]
 8009414:	e7da      	b.n	80093cc <_vfiprintf_r+0x20>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	0598      	lsls	r0, r3, #22
 800941a:	d4ed      	bmi.n	80093f8 <_vfiprintf_r+0x4c>
 800941c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800941e:	f000 fb76 	bl	8009b0e <__retarget_lock_release_recursive>
 8009422:	e7e9      	b.n	80093f8 <_vfiprintf_r+0x4c>
 8009424:	2300      	movs	r3, #0
 8009426:	9309      	str	r3, [sp, #36]	; 0x24
 8009428:	2320      	movs	r3, #32
 800942a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800942e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009432:	2330      	movs	r3, #48	; 0x30
 8009434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095f8 <_vfiprintf_r+0x24c>
 8009438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800943c:	f04f 0901 	mov.w	r9, #1
 8009440:	4623      	mov	r3, r4
 8009442:	469a      	mov	sl, r3
 8009444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009448:	b10a      	cbz	r2, 800944e <_vfiprintf_r+0xa2>
 800944a:	2a25      	cmp	r2, #37	; 0x25
 800944c:	d1f9      	bne.n	8009442 <_vfiprintf_r+0x96>
 800944e:	ebba 0b04 	subs.w	fp, sl, r4
 8009452:	d00b      	beq.n	800946c <_vfiprintf_r+0xc0>
 8009454:	465b      	mov	r3, fp
 8009456:	4622      	mov	r2, r4
 8009458:	4629      	mov	r1, r5
 800945a:	4630      	mov	r0, r6
 800945c:	f7ff ff93 	bl	8009386 <__sfputs_r>
 8009460:	3001      	adds	r0, #1
 8009462:	f000 80aa 	beq.w	80095ba <_vfiprintf_r+0x20e>
 8009466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009468:	445a      	add	r2, fp
 800946a:	9209      	str	r2, [sp, #36]	; 0x24
 800946c:	f89a 3000 	ldrb.w	r3, [sl]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80a2 	beq.w	80095ba <_vfiprintf_r+0x20e>
 8009476:	2300      	movs	r3, #0
 8009478:	f04f 32ff 	mov.w	r2, #4294967295
 800947c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009480:	f10a 0a01 	add.w	sl, sl, #1
 8009484:	9304      	str	r3, [sp, #16]
 8009486:	9307      	str	r3, [sp, #28]
 8009488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800948c:	931a      	str	r3, [sp, #104]	; 0x68
 800948e:	4654      	mov	r4, sl
 8009490:	2205      	movs	r2, #5
 8009492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009496:	4858      	ldr	r0, [pc, #352]	; (80095f8 <_vfiprintf_r+0x24c>)
 8009498:	f7f6 fea2 	bl	80001e0 <memchr>
 800949c:	9a04      	ldr	r2, [sp, #16]
 800949e:	b9d8      	cbnz	r0, 80094d8 <_vfiprintf_r+0x12c>
 80094a0:	06d1      	lsls	r1, r2, #27
 80094a2:	bf44      	itt	mi
 80094a4:	2320      	movmi	r3, #32
 80094a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094aa:	0713      	lsls	r3, r2, #28
 80094ac:	bf44      	itt	mi
 80094ae:	232b      	movmi	r3, #43	; 0x2b
 80094b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b4:	f89a 3000 	ldrb.w	r3, [sl]
 80094b8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ba:	d015      	beq.n	80094e8 <_vfiprintf_r+0x13c>
 80094bc:	9a07      	ldr	r2, [sp, #28]
 80094be:	4654      	mov	r4, sl
 80094c0:	2000      	movs	r0, #0
 80094c2:	f04f 0c0a 	mov.w	ip, #10
 80094c6:	4621      	mov	r1, r4
 80094c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094cc:	3b30      	subs	r3, #48	; 0x30
 80094ce:	2b09      	cmp	r3, #9
 80094d0:	d94e      	bls.n	8009570 <_vfiprintf_r+0x1c4>
 80094d2:	b1b0      	cbz	r0, 8009502 <_vfiprintf_r+0x156>
 80094d4:	9207      	str	r2, [sp, #28]
 80094d6:	e014      	b.n	8009502 <_vfiprintf_r+0x156>
 80094d8:	eba0 0308 	sub.w	r3, r0, r8
 80094dc:	fa09 f303 	lsl.w	r3, r9, r3
 80094e0:	4313      	orrs	r3, r2
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	46a2      	mov	sl, r4
 80094e6:	e7d2      	b.n	800948e <_vfiprintf_r+0xe2>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	1d19      	adds	r1, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	9103      	str	r1, [sp, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bfbb      	ittet	lt
 80094f4:	425b      	neglt	r3, r3
 80094f6:	f042 0202 	orrlt.w	r2, r2, #2
 80094fa:	9307      	strge	r3, [sp, #28]
 80094fc:	9307      	strlt	r3, [sp, #28]
 80094fe:	bfb8      	it	lt
 8009500:	9204      	strlt	r2, [sp, #16]
 8009502:	7823      	ldrb	r3, [r4, #0]
 8009504:	2b2e      	cmp	r3, #46	; 0x2e
 8009506:	d10c      	bne.n	8009522 <_vfiprintf_r+0x176>
 8009508:	7863      	ldrb	r3, [r4, #1]
 800950a:	2b2a      	cmp	r3, #42	; 0x2a
 800950c:	d135      	bne.n	800957a <_vfiprintf_r+0x1ce>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	1d1a      	adds	r2, r3, #4
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	9203      	str	r2, [sp, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfb8      	it	lt
 800951a:	f04f 33ff 	movlt.w	r3, #4294967295
 800951e:	3402      	adds	r4, #2
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009608 <_vfiprintf_r+0x25c>
 8009526:	7821      	ldrb	r1, [r4, #0]
 8009528:	2203      	movs	r2, #3
 800952a:	4650      	mov	r0, sl
 800952c:	f7f6 fe58 	bl	80001e0 <memchr>
 8009530:	b140      	cbz	r0, 8009544 <_vfiprintf_r+0x198>
 8009532:	2340      	movs	r3, #64	; 0x40
 8009534:	eba0 000a 	sub.w	r0, r0, sl
 8009538:	fa03 f000 	lsl.w	r0, r3, r0
 800953c:	9b04      	ldr	r3, [sp, #16]
 800953e:	4303      	orrs	r3, r0
 8009540:	3401      	adds	r4, #1
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009548:	482c      	ldr	r0, [pc, #176]	; (80095fc <_vfiprintf_r+0x250>)
 800954a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800954e:	2206      	movs	r2, #6
 8009550:	f7f6 fe46 	bl	80001e0 <memchr>
 8009554:	2800      	cmp	r0, #0
 8009556:	d03f      	beq.n	80095d8 <_vfiprintf_r+0x22c>
 8009558:	4b29      	ldr	r3, [pc, #164]	; (8009600 <_vfiprintf_r+0x254>)
 800955a:	bb1b      	cbnz	r3, 80095a4 <_vfiprintf_r+0x1f8>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	3307      	adds	r3, #7
 8009560:	f023 0307 	bic.w	r3, r3, #7
 8009564:	3308      	adds	r3, #8
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956a:	443b      	add	r3, r7
 800956c:	9309      	str	r3, [sp, #36]	; 0x24
 800956e:	e767      	b.n	8009440 <_vfiprintf_r+0x94>
 8009570:	fb0c 3202 	mla	r2, ip, r2, r3
 8009574:	460c      	mov	r4, r1
 8009576:	2001      	movs	r0, #1
 8009578:	e7a5      	b.n	80094c6 <_vfiprintf_r+0x11a>
 800957a:	2300      	movs	r3, #0
 800957c:	3401      	adds	r4, #1
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	4619      	mov	r1, r3
 8009582:	f04f 0c0a 	mov.w	ip, #10
 8009586:	4620      	mov	r0, r4
 8009588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800958c:	3a30      	subs	r2, #48	; 0x30
 800958e:	2a09      	cmp	r2, #9
 8009590:	d903      	bls.n	800959a <_vfiprintf_r+0x1ee>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0c5      	beq.n	8009522 <_vfiprintf_r+0x176>
 8009596:	9105      	str	r1, [sp, #20]
 8009598:	e7c3      	b.n	8009522 <_vfiprintf_r+0x176>
 800959a:	fb0c 2101 	mla	r1, ip, r1, r2
 800959e:	4604      	mov	r4, r0
 80095a0:	2301      	movs	r3, #1
 80095a2:	e7f0      	b.n	8009586 <_vfiprintf_r+0x1da>
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	462a      	mov	r2, r5
 80095aa:	4b16      	ldr	r3, [pc, #88]	; (8009604 <_vfiprintf_r+0x258>)
 80095ac:	a904      	add	r1, sp, #16
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7fc fb1c 	bl	8005bec <_printf_float>
 80095b4:	4607      	mov	r7, r0
 80095b6:	1c78      	adds	r0, r7, #1
 80095b8:	d1d6      	bne.n	8009568 <_vfiprintf_r+0x1bc>
 80095ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095bc:	07d9      	lsls	r1, r3, #31
 80095be:	d405      	bmi.n	80095cc <_vfiprintf_r+0x220>
 80095c0:	89ab      	ldrh	r3, [r5, #12]
 80095c2:	059a      	lsls	r2, r3, #22
 80095c4:	d402      	bmi.n	80095cc <_vfiprintf_r+0x220>
 80095c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095c8:	f000 faa1 	bl	8009b0e <__retarget_lock_release_recursive>
 80095cc:	89ab      	ldrh	r3, [r5, #12]
 80095ce:	065b      	lsls	r3, r3, #25
 80095d0:	f53f af12 	bmi.w	80093f8 <_vfiprintf_r+0x4c>
 80095d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095d6:	e711      	b.n	80093fc <_vfiprintf_r+0x50>
 80095d8:	ab03      	add	r3, sp, #12
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	462a      	mov	r2, r5
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <_vfiprintf_r+0x258>)
 80095e0:	a904      	add	r1, sp, #16
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7fc fda6 	bl	8006134 <_printf_i>
 80095e8:	e7e4      	b.n	80095b4 <_vfiprintf_r+0x208>
 80095ea:	bf00      	nop
 80095ec:	0800a29c 	.word	0x0800a29c
 80095f0:	0800a2bc 	.word	0x0800a2bc
 80095f4:	0800a27c 	.word	0x0800a27c
 80095f8:	0800a12c 	.word	0x0800a12c
 80095fc:	0800a136 	.word	0x0800a136
 8009600:	08005bed 	.word	0x08005bed
 8009604:	08009387 	.word	0x08009387
 8009608:	0800a132 	.word	0x0800a132

0800960c <__swbuf_r>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	460e      	mov	r6, r1
 8009610:	4614      	mov	r4, r2
 8009612:	4605      	mov	r5, r0
 8009614:	b118      	cbz	r0, 800961e <__swbuf_r+0x12>
 8009616:	6983      	ldr	r3, [r0, #24]
 8009618:	b90b      	cbnz	r3, 800961e <__swbuf_r+0x12>
 800961a:	f000 f9d9 	bl	80099d0 <__sinit>
 800961e:	4b21      	ldr	r3, [pc, #132]	; (80096a4 <__swbuf_r+0x98>)
 8009620:	429c      	cmp	r4, r3
 8009622:	d12b      	bne.n	800967c <__swbuf_r+0x70>
 8009624:	686c      	ldr	r4, [r5, #4]
 8009626:	69a3      	ldr	r3, [r4, #24]
 8009628:	60a3      	str	r3, [r4, #8]
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	071a      	lsls	r2, r3, #28
 800962e:	d52f      	bpl.n	8009690 <__swbuf_r+0x84>
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	b36b      	cbz	r3, 8009690 <__swbuf_r+0x84>
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	6820      	ldr	r0, [r4, #0]
 8009638:	1ac0      	subs	r0, r0, r3
 800963a:	6963      	ldr	r3, [r4, #20]
 800963c:	b2f6      	uxtb	r6, r6
 800963e:	4283      	cmp	r3, r0
 8009640:	4637      	mov	r7, r6
 8009642:	dc04      	bgt.n	800964e <__swbuf_r+0x42>
 8009644:	4621      	mov	r1, r4
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f92e 	bl	80098a8 <_fflush_r>
 800964c:	bb30      	cbnz	r0, 800969c <__swbuf_r+0x90>
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	3b01      	subs	r3, #1
 8009652:	60a3      	str	r3, [r4, #8]
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	6022      	str	r2, [r4, #0]
 800965a:	701e      	strb	r6, [r3, #0]
 800965c:	6963      	ldr	r3, [r4, #20]
 800965e:	3001      	adds	r0, #1
 8009660:	4283      	cmp	r3, r0
 8009662:	d004      	beq.n	800966e <__swbuf_r+0x62>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	07db      	lsls	r3, r3, #31
 8009668:	d506      	bpl.n	8009678 <__swbuf_r+0x6c>
 800966a:	2e0a      	cmp	r6, #10
 800966c:	d104      	bne.n	8009678 <__swbuf_r+0x6c>
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 f919 	bl	80098a8 <_fflush_r>
 8009676:	b988      	cbnz	r0, 800969c <__swbuf_r+0x90>
 8009678:	4638      	mov	r0, r7
 800967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967c:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <__swbuf_r+0x9c>)
 800967e:	429c      	cmp	r4, r3
 8009680:	d101      	bne.n	8009686 <__swbuf_r+0x7a>
 8009682:	68ac      	ldr	r4, [r5, #8]
 8009684:	e7cf      	b.n	8009626 <__swbuf_r+0x1a>
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <__swbuf_r+0xa0>)
 8009688:	429c      	cmp	r4, r3
 800968a:	bf08      	it	eq
 800968c:	68ec      	ldreq	r4, [r5, #12]
 800968e:	e7ca      	b.n	8009626 <__swbuf_r+0x1a>
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f80c 	bl	80096b0 <__swsetup_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	d0cb      	beq.n	8009634 <__swbuf_r+0x28>
 800969c:	f04f 37ff 	mov.w	r7, #4294967295
 80096a0:	e7ea      	b.n	8009678 <__swbuf_r+0x6c>
 80096a2:	bf00      	nop
 80096a4:	0800a29c 	.word	0x0800a29c
 80096a8:	0800a2bc 	.word	0x0800a2bc
 80096ac:	0800a27c 	.word	0x0800a27c

080096b0 <__swsetup_r>:
 80096b0:	4b32      	ldr	r3, [pc, #200]	; (800977c <__swsetup_r+0xcc>)
 80096b2:	b570      	push	{r4, r5, r6, lr}
 80096b4:	681d      	ldr	r5, [r3, #0]
 80096b6:	4606      	mov	r6, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	b125      	cbz	r5, 80096c6 <__swsetup_r+0x16>
 80096bc:	69ab      	ldr	r3, [r5, #24]
 80096be:	b913      	cbnz	r3, 80096c6 <__swsetup_r+0x16>
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f985 	bl	80099d0 <__sinit>
 80096c6:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <__swsetup_r+0xd0>)
 80096c8:	429c      	cmp	r4, r3
 80096ca:	d10f      	bne.n	80096ec <__swsetup_r+0x3c>
 80096cc:	686c      	ldr	r4, [r5, #4]
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096d4:	0719      	lsls	r1, r3, #28
 80096d6:	d42c      	bmi.n	8009732 <__swsetup_r+0x82>
 80096d8:	06dd      	lsls	r5, r3, #27
 80096da:	d411      	bmi.n	8009700 <__swsetup_r+0x50>
 80096dc:	2309      	movs	r3, #9
 80096de:	6033      	str	r3, [r6, #0]
 80096e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ea:	e03e      	b.n	800976a <__swsetup_r+0xba>
 80096ec:	4b25      	ldr	r3, [pc, #148]	; (8009784 <__swsetup_r+0xd4>)
 80096ee:	429c      	cmp	r4, r3
 80096f0:	d101      	bne.n	80096f6 <__swsetup_r+0x46>
 80096f2:	68ac      	ldr	r4, [r5, #8]
 80096f4:	e7eb      	b.n	80096ce <__swsetup_r+0x1e>
 80096f6:	4b24      	ldr	r3, [pc, #144]	; (8009788 <__swsetup_r+0xd8>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	bf08      	it	eq
 80096fc:	68ec      	ldreq	r4, [r5, #12]
 80096fe:	e7e6      	b.n	80096ce <__swsetup_r+0x1e>
 8009700:	0758      	lsls	r0, r3, #29
 8009702:	d512      	bpl.n	800972a <__swsetup_r+0x7a>
 8009704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009706:	b141      	cbz	r1, 800971a <__swsetup_r+0x6a>
 8009708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800970c:	4299      	cmp	r1, r3
 800970e:	d002      	beq.n	8009716 <__swsetup_r+0x66>
 8009710:	4630      	mov	r0, r6
 8009712:	f7ff fb67 	bl	8008de4 <_free_r>
 8009716:	2300      	movs	r3, #0
 8009718:	6363      	str	r3, [r4, #52]	; 0x34
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	2300      	movs	r3, #0
 8009724:	6063      	str	r3, [r4, #4]
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	f043 0308 	orr.w	r3, r3, #8
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	b94b      	cbnz	r3, 800974a <__swsetup_r+0x9a>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800973c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009740:	d003      	beq.n	800974a <__swsetup_r+0x9a>
 8009742:	4621      	mov	r1, r4
 8009744:	4630      	mov	r0, r6
 8009746:	f000 fa07 	bl	8009b58 <__smakebuf_r>
 800974a:	89a0      	ldrh	r0, [r4, #12]
 800974c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009750:	f010 0301 	ands.w	r3, r0, #1
 8009754:	d00a      	beq.n	800976c <__swsetup_r+0xbc>
 8009756:	2300      	movs	r3, #0
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	6963      	ldr	r3, [r4, #20]
 800975c:	425b      	negs	r3, r3
 800975e:	61a3      	str	r3, [r4, #24]
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	b943      	cbnz	r3, 8009776 <__swsetup_r+0xc6>
 8009764:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009768:	d1ba      	bne.n	80096e0 <__swsetup_r+0x30>
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	0781      	lsls	r1, r0, #30
 800976e:	bf58      	it	pl
 8009770:	6963      	ldrpl	r3, [r4, #20]
 8009772:	60a3      	str	r3, [r4, #8]
 8009774:	e7f4      	b.n	8009760 <__swsetup_r+0xb0>
 8009776:	2000      	movs	r0, #0
 8009778:	e7f7      	b.n	800976a <__swsetup_r+0xba>
 800977a:	bf00      	nop
 800977c:	20000010 	.word	0x20000010
 8009780:	0800a29c 	.word	0x0800a29c
 8009784:	0800a2bc 	.word	0x0800a2bc
 8009788:	0800a27c 	.word	0x0800a27c

0800978c <abort>:
 800978c:	b508      	push	{r3, lr}
 800978e:	2006      	movs	r0, #6
 8009790:	f000 fa52 	bl	8009c38 <raise>
 8009794:	2001      	movs	r0, #1
 8009796:	f7f7 ff63 	bl	8001660 <_exit>
	...

0800979c <__sflush_r>:
 800979c:	898a      	ldrh	r2, [r1, #12]
 800979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	4605      	mov	r5, r0
 80097a4:	0710      	lsls	r0, r2, #28
 80097a6:	460c      	mov	r4, r1
 80097a8:	d458      	bmi.n	800985c <__sflush_r+0xc0>
 80097aa:	684b      	ldr	r3, [r1, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dc05      	bgt.n	80097bc <__sflush_r+0x20>
 80097b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dc02      	bgt.n	80097bc <__sflush_r+0x20>
 80097b6:	2000      	movs	r0, #0
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d0f9      	beq.n	80097b6 <__sflush_r+0x1a>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097c8:	682f      	ldr	r7, [r5, #0]
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	d032      	beq.n	8009834 <__sflush_r+0x98>
 80097ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	075a      	lsls	r2, r3, #29
 80097d4:	d505      	bpl.n	80097e2 <__sflush_r+0x46>
 80097d6:	6863      	ldr	r3, [r4, #4]
 80097d8:	1ac0      	subs	r0, r0, r3
 80097da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097dc:	b10b      	cbz	r3, 80097e2 <__sflush_r+0x46>
 80097de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097e0:	1ac0      	subs	r0, r0, r3
 80097e2:	2300      	movs	r3, #0
 80097e4:	4602      	mov	r2, r0
 80097e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097e8:	6a21      	ldr	r1, [r4, #32]
 80097ea:	4628      	mov	r0, r5
 80097ec:	47b0      	blx	r6
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	d106      	bne.n	8009802 <__sflush_r+0x66>
 80097f4:	6829      	ldr	r1, [r5, #0]
 80097f6:	291d      	cmp	r1, #29
 80097f8:	d82c      	bhi.n	8009854 <__sflush_r+0xb8>
 80097fa:	4a2a      	ldr	r2, [pc, #168]	; (80098a4 <__sflush_r+0x108>)
 80097fc:	40ca      	lsrs	r2, r1
 80097fe:	07d6      	lsls	r6, r2, #31
 8009800:	d528      	bpl.n	8009854 <__sflush_r+0xb8>
 8009802:	2200      	movs	r2, #0
 8009804:	6062      	str	r2, [r4, #4]
 8009806:	04d9      	lsls	r1, r3, #19
 8009808:	6922      	ldr	r2, [r4, #16]
 800980a:	6022      	str	r2, [r4, #0]
 800980c:	d504      	bpl.n	8009818 <__sflush_r+0x7c>
 800980e:	1c42      	adds	r2, r0, #1
 8009810:	d101      	bne.n	8009816 <__sflush_r+0x7a>
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	b903      	cbnz	r3, 8009818 <__sflush_r+0x7c>
 8009816:	6560      	str	r0, [r4, #84]	; 0x54
 8009818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981a:	602f      	str	r7, [r5, #0]
 800981c:	2900      	cmp	r1, #0
 800981e:	d0ca      	beq.n	80097b6 <__sflush_r+0x1a>
 8009820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009824:	4299      	cmp	r1, r3
 8009826:	d002      	beq.n	800982e <__sflush_r+0x92>
 8009828:	4628      	mov	r0, r5
 800982a:	f7ff fadb 	bl	8008de4 <_free_r>
 800982e:	2000      	movs	r0, #0
 8009830:	6360      	str	r0, [r4, #52]	; 0x34
 8009832:	e7c1      	b.n	80097b8 <__sflush_r+0x1c>
 8009834:	6a21      	ldr	r1, [r4, #32]
 8009836:	2301      	movs	r3, #1
 8009838:	4628      	mov	r0, r5
 800983a:	47b0      	blx	r6
 800983c:	1c41      	adds	r1, r0, #1
 800983e:	d1c7      	bne.n	80097d0 <__sflush_r+0x34>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c4      	beq.n	80097d0 <__sflush_r+0x34>
 8009846:	2b1d      	cmp	r3, #29
 8009848:	d001      	beq.n	800984e <__sflush_r+0xb2>
 800984a:	2b16      	cmp	r3, #22
 800984c:	d101      	bne.n	8009852 <__sflush_r+0xb6>
 800984e:	602f      	str	r7, [r5, #0]
 8009850:	e7b1      	b.n	80097b6 <__sflush_r+0x1a>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	e7ad      	b.n	80097b8 <__sflush_r+0x1c>
 800985c:	690f      	ldr	r7, [r1, #16]
 800985e:	2f00      	cmp	r7, #0
 8009860:	d0a9      	beq.n	80097b6 <__sflush_r+0x1a>
 8009862:	0793      	lsls	r3, r2, #30
 8009864:	680e      	ldr	r6, [r1, #0]
 8009866:	bf08      	it	eq
 8009868:	694b      	ldreq	r3, [r1, #20]
 800986a:	600f      	str	r7, [r1, #0]
 800986c:	bf18      	it	ne
 800986e:	2300      	movne	r3, #0
 8009870:	eba6 0807 	sub.w	r8, r6, r7
 8009874:	608b      	str	r3, [r1, #8]
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	dd9c      	ble.n	80097b6 <__sflush_r+0x1a>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009880:	4643      	mov	r3, r8
 8009882:	463a      	mov	r2, r7
 8009884:	4628      	mov	r0, r5
 8009886:	47b0      	blx	r6
 8009888:	2800      	cmp	r0, #0
 800988a:	dc06      	bgt.n	800989a <__sflush_r+0xfe>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	e78e      	b.n	80097b8 <__sflush_r+0x1c>
 800989a:	4407      	add	r7, r0
 800989c:	eba8 0800 	sub.w	r8, r8, r0
 80098a0:	e7e9      	b.n	8009876 <__sflush_r+0xda>
 80098a2:	bf00      	nop
 80098a4:	20400001 	.word	0x20400001

080098a8 <_fflush_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	690b      	ldr	r3, [r1, #16]
 80098ac:	4605      	mov	r5, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	b913      	cbnz	r3, 80098b8 <_fflush_r+0x10>
 80098b2:	2500      	movs	r5, #0
 80098b4:	4628      	mov	r0, r5
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	b118      	cbz	r0, 80098c2 <_fflush_r+0x1a>
 80098ba:	6983      	ldr	r3, [r0, #24]
 80098bc:	b90b      	cbnz	r3, 80098c2 <_fflush_r+0x1a>
 80098be:	f000 f887 	bl	80099d0 <__sinit>
 80098c2:	4b14      	ldr	r3, [pc, #80]	; (8009914 <_fflush_r+0x6c>)
 80098c4:	429c      	cmp	r4, r3
 80098c6:	d11b      	bne.n	8009900 <_fflush_r+0x58>
 80098c8:	686c      	ldr	r4, [r5, #4]
 80098ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0ef      	beq.n	80098b2 <_fflush_r+0xa>
 80098d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098d4:	07d0      	lsls	r0, r2, #31
 80098d6:	d404      	bmi.n	80098e2 <_fflush_r+0x3a>
 80098d8:	0599      	lsls	r1, r3, #22
 80098da:	d402      	bmi.n	80098e2 <_fflush_r+0x3a>
 80098dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098de:	f000 f915 	bl	8009b0c <__retarget_lock_acquire_recursive>
 80098e2:	4628      	mov	r0, r5
 80098e4:	4621      	mov	r1, r4
 80098e6:	f7ff ff59 	bl	800979c <__sflush_r>
 80098ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ec:	07da      	lsls	r2, r3, #31
 80098ee:	4605      	mov	r5, r0
 80098f0:	d4e0      	bmi.n	80098b4 <_fflush_r+0xc>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	059b      	lsls	r3, r3, #22
 80098f6:	d4dd      	bmi.n	80098b4 <_fflush_r+0xc>
 80098f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098fa:	f000 f908 	bl	8009b0e <__retarget_lock_release_recursive>
 80098fe:	e7d9      	b.n	80098b4 <_fflush_r+0xc>
 8009900:	4b05      	ldr	r3, [pc, #20]	; (8009918 <_fflush_r+0x70>)
 8009902:	429c      	cmp	r4, r3
 8009904:	d101      	bne.n	800990a <_fflush_r+0x62>
 8009906:	68ac      	ldr	r4, [r5, #8]
 8009908:	e7df      	b.n	80098ca <_fflush_r+0x22>
 800990a:	4b04      	ldr	r3, [pc, #16]	; (800991c <_fflush_r+0x74>)
 800990c:	429c      	cmp	r4, r3
 800990e:	bf08      	it	eq
 8009910:	68ec      	ldreq	r4, [r5, #12]
 8009912:	e7da      	b.n	80098ca <_fflush_r+0x22>
 8009914:	0800a29c 	.word	0x0800a29c
 8009918:	0800a2bc 	.word	0x0800a2bc
 800991c:	0800a27c 	.word	0x0800a27c

08009920 <std>:
 8009920:	2300      	movs	r3, #0
 8009922:	b510      	push	{r4, lr}
 8009924:	4604      	mov	r4, r0
 8009926:	e9c0 3300 	strd	r3, r3, [r0]
 800992a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800992e:	6083      	str	r3, [r0, #8]
 8009930:	8181      	strh	r1, [r0, #12]
 8009932:	6643      	str	r3, [r0, #100]	; 0x64
 8009934:	81c2      	strh	r2, [r0, #14]
 8009936:	6183      	str	r3, [r0, #24]
 8009938:	4619      	mov	r1, r3
 800993a:	2208      	movs	r2, #8
 800993c:	305c      	adds	r0, #92	; 0x5c
 800993e:	f7fc f8ad 	bl	8005a9c <memset>
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <std+0x38>)
 8009944:	6263      	str	r3, [r4, #36]	; 0x24
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <std+0x3c>)
 8009948:	62a3      	str	r3, [r4, #40]	; 0x28
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <std+0x40>)
 800994c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800994e:	4b05      	ldr	r3, [pc, #20]	; (8009964 <std+0x44>)
 8009950:	6224      	str	r4, [r4, #32]
 8009952:	6323      	str	r3, [r4, #48]	; 0x30
 8009954:	bd10      	pop	{r4, pc}
 8009956:	bf00      	nop
 8009958:	08009c71 	.word	0x08009c71
 800995c:	08009c93 	.word	0x08009c93
 8009960:	08009ccb 	.word	0x08009ccb
 8009964:	08009cef 	.word	0x08009cef

08009968 <_cleanup_r>:
 8009968:	4901      	ldr	r1, [pc, #4]	; (8009970 <_cleanup_r+0x8>)
 800996a:	f000 b8af 	b.w	8009acc <_fwalk_reent>
 800996e:	bf00      	nop
 8009970:	080098a9 	.word	0x080098a9

08009974 <__sfmoreglue>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	1e4a      	subs	r2, r1, #1
 8009978:	2568      	movs	r5, #104	; 0x68
 800997a:	4355      	muls	r5, r2
 800997c:	460e      	mov	r6, r1
 800997e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009982:	f7ff fa7f 	bl	8008e84 <_malloc_r>
 8009986:	4604      	mov	r4, r0
 8009988:	b140      	cbz	r0, 800999c <__sfmoreglue+0x28>
 800998a:	2100      	movs	r1, #0
 800998c:	e9c0 1600 	strd	r1, r6, [r0]
 8009990:	300c      	adds	r0, #12
 8009992:	60a0      	str	r0, [r4, #8]
 8009994:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009998:	f7fc f880 	bl	8005a9c <memset>
 800999c:	4620      	mov	r0, r4
 800999e:	bd70      	pop	{r4, r5, r6, pc}

080099a0 <__sfp_lock_acquire>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__sfp_lock_acquire+0x8>)
 80099a2:	f000 b8b3 	b.w	8009b0c <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	20000498 	.word	0x20000498

080099ac <__sfp_lock_release>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__sfp_lock_release+0x8>)
 80099ae:	f000 b8ae 	b.w	8009b0e <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	20000498 	.word	0x20000498

080099b8 <__sinit_lock_acquire>:
 80099b8:	4801      	ldr	r0, [pc, #4]	; (80099c0 <__sinit_lock_acquire+0x8>)
 80099ba:	f000 b8a7 	b.w	8009b0c <__retarget_lock_acquire_recursive>
 80099be:	bf00      	nop
 80099c0:	20000493 	.word	0x20000493

080099c4 <__sinit_lock_release>:
 80099c4:	4801      	ldr	r0, [pc, #4]	; (80099cc <__sinit_lock_release+0x8>)
 80099c6:	f000 b8a2 	b.w	8009b0e <__retarget_lock_release_recursive>
 80099ca:	bf00      	nop
 80099cc:	20000493 	.word	0x20000493

080099d0 <__sinit>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	4604      	mov	r4, r0
 80099d4:	f7ff fff0 	bl	80099b8 <__sinit_lock_acquire>
 80099d8:	69a3      	ldr	r3, [r4, #24]
 80099da:	b11b      	cbz	r3, 80099e4 <__sinit+0x14>
 80099dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e0:	f7ff bff0 	b.w	80099c4 <__sinit_lock_release>
 80099e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099e8:	6523      	str	r3, [r4, #80]	; 0x50
 80099ea:	4b13      	ldr	r3, [pc, #76]	; (8009a38 <__sinit+0x68>)
 80099ec:	4a13      	ldr	r2, [pc, #76]	; (8009a3c <__sinit+0x6c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	bf04      	itt	eq
 80099f6:	2301      	moveq	r3, #1
 80099f8:	61a3      	streq	r3, [r4, #24]
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 f820 	bl	8009a40 <__sfp>
 8009a00:	6060      	str	r0, [r4, #4]
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f81c 	bl	8009a40 <__sfp>
 8009a08:	60a0      	str	r0, [r4, #8]
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 f818 	bl	8009a40 <__sfp>
 8009a10:	2200      	movs	r2, #0
 8009a12:	60e0      	str	r0, [r4, #12]
 8009a14:	2104      	movs	r1, #4
 8009a16:	6860      	ldr	r0, [r4, #4]
 8009a18:	f7ff ff82 	bl	8009920 <std>
 8009a1c:	68a0      	ldr	r0, [r4, #8]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	2109      	movs	r1, #9
 8009a22:	f7ff ff7d 	bl	8009920 <std>
 8009a26:	68e0      	ldr	r0, [r4, #12]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	2112      	movs	r1, #18
 8009a2c:	f7ff ff78 	bl	8009920 <std>
 8009a30:	2301      	movs	r3, #1
 8009a32:	61a3      	str	r3, [r4, #24]
 8009a34:	e7d2      	b.n	80099dc <__sinit+0xc>
 8009a36:	bf00      	nop
 8009a38:	08009e30 	.word	0x08009e30
 8009a3c:	08009969 	.word	0x08009969

08009a40 <__sfp>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	4607      	mov	r7, r0
 8009a44:	f7ff ffac 	bl	80099a0 <__sfp_lock_acquire>
 8009a48:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <__sfp+0x84>)
 8009a4a:	681e      	ldr	r6, [r3, #0]
 8009a4c:	69b3      	ldr	r3, [r6, #24]
 8009a4e:	b913      	cbnz	r3, 8009a56 <__sfp+0x16>
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ffbd 	bl	80099d0 <__sinit>
 8009a56:	3648      	adds	r6, #72	; 0x48
 8009a58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	d503      	bpl.n	8009a68 <__sfp+0x28>
 8009a60:	6833      	ldr	r3, [r6, #0]
 8009a62:	b30b      	cbz	r3, 8009aa8 <__sfp+0x68>
 8009a64:	6836      	ldr	r6, [r6, #0]
 8009a66:	e7f7      	b.n	8009a58 <__sfp+0x18>
 8009a68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a6c:	b9d5      	cbnz	r5, 8009aa4 <__sfp+0x64>
 8009a6e:	4b16      	ldr	r3, [pc, #88]	; (8009ac8 <__sfp+0x88>)
 8009a70:	60e3      	str	r3, [r4, #12]
 8009a72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a76:	6665      	str	r5, [r4, #100]	; 0x64
 8009a78:	f000 f847 	bl	8009b0a <__retarget_lock_init_recursive>
 8009a7c:	f7ff ff96 	bl	80099ac <__sfp_lock_release>
 8009a80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a88:	6025      	str	r5, [r4, #0]
 8009a8a:	61a5      	str	r5, [r4, #24]
 8009a8c:	2208      	movs	r2, #8
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a94:	f7fc f802 	bl	8005a9c <memset>
 8009a98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa4:	3468      	adds	r4, #104	; 0x68
 8009aa6:	e7d9      	b.n	8009a5c <__sfp+0x1c>
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	4638      	mov	r0, r7
 8009aac:	f7ff ff62 	bl	8009974 <__sfmoreglue>
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	6030      	str	r0, [r6, #0]
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d1d5      	bne.n	8009a64 <__sfp+0x24>
 8009ab8:	f7ff ff78 	bl	80099ac <__sfp_lock_release>
 8009abc:	230c      	movs	r3, #12
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	e7ee      	b.n	8009aa0 <__sfp+0x60>
 8009ac2:	bf00      	nop
 8009ac4:	08009e30 	.word	0x08009e30
 8009ac8:	ffff0001 	.word	0xffff0001

08009acc <_fwalk_reent>:
 8009acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	4688      	mov	r8, r1
 8009ad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ad8:	2700      	movs	r7, #0
 8009ada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ade:	f1b9 0901 	subs.w	r9, r9, #1
 8009ae2:	d505      	bpl.n	8009af0 <_fwalk_reent+0x24>
 8009ae4:	6824      	ldr	r4, [r4, #0]
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	d1f7      	bne.n	8009ada <_fwalk_reent+0xe>
 8009aea:	4638      	mov	r0, r7
 8009aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af0:	89ab      	ldrh	r3, [r5, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d907      	bls.n	8009b06 <_fwalk_reent+0x3a>
 8009af6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009afa:	3301      	adds	r3, #1
 8009afc:	d003      	beq.n	8009b06 <_fwalk_reent+0x3a>
 8009afe:	4629      	mov	r1, r5
 8009b00:	4630      	mov	r0, r6
 8009b02:	47c0      	blx	r8
 8009b04:	4307      	orrs	r7, r0
 8009b06:	3568      	adds	r5, #104	; 0x68
 8009b08:	e7e9      	b.n	8009ade <_fwalk_reent+0x12>

08009b0a <__retarget_lock_init_recursive>:
 8009b0a:	4770      	bx	lr

08009b0c <__retarget_lock_acquire_recursive>:
 8009b0c:	4770      	bx	lr

08009b0e <__retarget_lock_release_recursive>:
 8009b0e:	4770      	bx	lr

08009b10 <__swhatbuf_r>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	460e      	mov	r6, r1
 8009b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	b096      	sub	sp, #88	; 0x58
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	461d      	mov	r5, r3
 8009b20:	da07      	bge.n	8009b32 <__swhatbuf_r+0x22>
 8009b22:	2300      	movs	r3, #0
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	89b3      	ldrh	r3, [r6, #12]
 8009b28:	061a      	lsls	r2, r3, #24
 8009b2a:	d410      	bmi.n	8009b4e <__swhatbuf_r+0x3e>
 8009b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b30:	e00e      	b.n	8009b50 <__swhatbuf_r+0x40>
 8009b32:	466a      	mov	r2, sp
 8009b34:	f000 f902 	bl	8009d3c <_fstat_r>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	dbf2      	blt.n	8009b22 <__swhatbuf_r+0x12>
 8009b3c:	9a01      	ldr	r2, [sp, #4]
 8009b3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b46:	425a      	negs	r2, r3
 8009b48:	415a      	adcs	r2, r3
 8009b4a:	602a      	str	r2, [r5, #0]
 8009b4c:	e7ee      	b.n	8009b2c <__swhatbuf_r+0x1c>
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	2000      	movs	r0, #0
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	b016      	add	sp, #88	; 0x58
 8009b56:	bd70      	pop	{r4, r5, r6, pc}

08009b58 <__smakebuf_r>:
 8009b58:	898b      	ldrh	r3, [r1, #12]
 8009b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b5c:	079d      	lsls	r5, r3, #30
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	d507      	bpl.n	8009b74 <__smakebuf_r+0x1c>
 8009b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	6163      	str	r3, [r4, #20]
 8009b70:	b002      	add	sp, #8
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	ab01      	add	r3, sp, #4
 8009b76:	466a      	mov	r2, sp
 8009b78:	f7ff ffca 	bl	8009b10 <__swhatbuf_r>
 8009b7c:	9900      	ldr	r1, [sp, #0]
 8009b7e:	4605      	mov	r5, r0
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff f97f 	bl	8008e84 <_malloc_r>
 8009b86:	b948      	cbnz	r0, 8009b9c <__smakebuf_r+0x44>
 8009b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8c:	059a      	lsls	r2, r3, #22
 8009b8e:	d4ef      	bmi.n	8009b70 <__smakebuf_r+0x18>
 8009b90:	f023 0303 	bic.w	r3, r3, #3
 8009b94:	f043 0302 	orr.w	r3, r3, #2
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	e7e3      	b.n	8009b64 <__smakebuf_r+0xc>
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <__smakebuf_r+0x7c>)
 8009b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	6020      	str	r0, [r4, #0]
 8009ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	9b00      	ldr	r3, [sp, #0]
 8009bac:	6163      	str	r3, [r4, #20]
 8009bae:	9b01      	ldr	r3, [sp, #4]
 8009bb0:	6120      	str	r0, [r4, #16]
 8009bb2:	b15b      	cbz	r3, 8009bcc <__smakebuf_r+0x74>
 8009bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f000 f8d1 	bl	8009d60 <_isatty_r>
 8009bbe:	b128      	cbz	r0, 8009bcc <__smakebuf_r+0x74>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	f043 0301 	orr.w	r3, r3, #1
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	89a0      	ldrh	r0, [r4, #12]
 8009bce:	4305      	orrs	r5, r0
 8009bd0:	81a5      	strh	r5, [r4, #12]
 8009bd2:	e7cd      	b.n	8009b70 <__smakebuf_r+0x18>
 8009bd4:	08009969 	.word	0x08009969

08009bd8 <_malloc_usable_size_r>:
 8009bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bdc:	1f18      	subs	r0, r3, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbc      	itt	lt
 8009be2:	580b      	ldrlt	r3, [r1, r0]
 8009be4:	18c0      	addlt	r0, r0, r3
 8009be6:	4770      	bx	lr

08009be8 <_raise_r>:
 8009be8:	291f      	cmp	r1, #31
 8009bea:	b538      	push	{r3, r4, r5, lr}
 8009bec:	4604      	mov	r4, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	d904      	bls.n	8009bfc <_raise_r+0x14>
 8009bf2:	2316      	movs	r3, #22
 8009bf4:	6003      	str	r3, [r0, #0]
 8009bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bfe:	b112      	cbz	r2, 8009c06 <_raise_r+0x1e>
 8009c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c04:	b94b      	cbnz	r3, 8009c1a <_raise_r+0x32>
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 f830 	bl	8009c6c <_getpid_r>
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	4601      	mov	r1, r0
 8009c10:	4620      	mov	r0, r4
 8009c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c16:	f000 b817 	b.w	8009c48 <_kill_r>
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d00a      	beq.n	8009c34 <_raise_r+0x4c>
 8009c1e:	1c59      	adds	r1, r3, #1
 8009c20:	d103      	bne.n	8009c2a <_raise_r+0x42>
 8009c22:	2316      	movs	r3, #22
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	2001      	movs	r0, #1
 8009c28:	e7e7      	b.n	8009bfa <_raise_r+0x12>
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c30:	4628      	mov	r0, r5
 8009c32:	4798      	blx	r3
 8009c34:	2000      	movs	r0, #0
 8009c36:	e7e0      	b.n	8009bfa <_raise_r+0x12>

08009c38 <raise>:
 8009c38:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <raise+0xc>)
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	f7ff bfd3 	b.w	8009be8 <_raise_r>
 8009c42:	bf00      	nop
 8009c44:	20000010 	.word	0x20000010

08009c48 <_kill_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	; (8009c68 <_kill_r+0x20>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	f7f7 fcf3 	bl	8001640 <_kill>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d102      	bne.n	8009c64 <_kill_r+0x1c>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b103      	cbz	r3, 8009c64 <_kill_r+0x1c>
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	2000048c 	.word	0x2000048c

08009c6c <_getpid_r>:
 8009c6c:	f7f7 bce0 	b.w	8001630 <_getpid>

08009c70 <__sread>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c78:	f000 f894 	bl	8009da4 <_read_r>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	bfab      	itete	ge
 8009c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c82:	89a3      	ldrhlt	r3, [r4, #12]
 8009c84:	181b      	addge	r3, r3, r0
 8009c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c8a:	bfac      	ite	ge
 8009c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c8e:	81a3      	strhlt	r3, [r4, #12]
 8009c90:	bd10      	pop	{r4, pc}

08009c92 <__swrite>:
 8009c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c96:	461f      	mov	r7, r3
 8009c98:	898b      	ldrh	r3, [r1, #12]
 8009c9a:	05db      	lsls	r3, r3, #23
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	d505      	bpl.n	8009cb0 <__swrite+0x1e>
 8009ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca8:	2302      	movs	r3, #2
 8009caa:	2200      	movs	r2, #0
 8009cac:	f000 f868 	bl	8009d80 <_lseek_r>
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	f000 b817 	b.w	8009cf8 <_write_r>

08009cca <__sseek>:
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	460c      	mov	r4, r1
 8009cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd2:	f000 f855 	bl	8009d80 <_lseek_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	bf15      	itete	ne
 8009cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ce6:	81a3      	strheq	r3, [r4, #12]
 8009ce8:	bf18      	it	ne
 8009cea:	81a3      	strhne	r3, [r4, #12]
 8009cec:	bd10      	pop	{r4, pc}

08009cee <__sclose>:
 8009cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf2:	f000 b813 	b.w	8009d1c <_close_r>
	...

08009cf8 <_write_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d07      	ldr	r5, [pc, #28]	; (8009d18 <_write_r+0x20>)
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	4608      	mov	r0, r1
 8009d00:	4611      	mov	r1, r2
 8009d02:	2200      	movs	r2, #0
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	f7f7 fcd1 	bl	80016ae <_write>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_write_r+0x1e>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_write_r+0x1e>
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	2000048c 	.word	0x2000048c

08009d1c <_close_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d06      	ldr	r5, [pc, #24]	; (8009d38 <_close_r+0x1c>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	f7f7 fcdd 	bl	80016e6 <_close>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_close_r+0x1a>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_close_r+0x1a>
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	2000048c 	.word	0x2000048c

08009d3c <_fstat_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d07      	ldr	r5, [pc, #28]	; (8009d5c <_fstat_r+0x20>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	4611      	mov	r1, r2
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	f7f7 fcd8 	bl	80016fe <_fstat>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d102      	bne.n	8009d58 <_fstat_r+0x1c>
 8009d52:	682b      	ldr	r3, [r5, #0]
 8009d54:	b103      	cbz	r3, 8009d58 <_fstat_r+0x1c>
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	2000048c 	.word	0x2000048c

08009d60 <_isatty_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d06      	ldr	r5, [pc, #24]	; (8009d7c <_isatty_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f7 fcd7 	bl	800171e <_isatty>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_isatty_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_isatty_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	2000048c 	.word	0x2000048c

08009d80 <_lseek_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	; (8009da0 <_lseek_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f7 fcd0 	bl	8001734 <_lseek>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_lseek_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_lseek_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	2000048c 	.word	0x2000048c

08009da4 <_read_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	; (8009dc4 <_read_r+0x20>)
 8009da8:	4604      	mov	r4, r0
 8009daa:	4608      	mov	r0, r1
 8009dac:	4611      	mov	r1, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f7 fc5e 	bl	8001674 <_read>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_read_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_read_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	2000048c 	.word	0x2000048c

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
